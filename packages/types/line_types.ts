// deno-lint-ignore-file
/*
 * @module
 * LINEJS Types - Autogenerated by data2typedef.ts
 */

type Int64 = number | bigint;
export const enums: {
  AR0_g: Record<AR0_g & string, AR0_g & number>;
  AR0_q: Record<AR0_q & string, AR0_q & number>;
  AccountMigrationPincodeType: Record<AccountMigrationPincodeType & string, AccountMigrationPincodeType & number>;
  ApplicationType: Record<ApplicationType & string, ApplicationType & number>;
  BotType: Record<BotType & string, BotType & number>;
  CarrierCode: Record<CarrierCode & string, CarrierCode & number>;
  ChannelErrorCode: Record<ChannelErrorCode & string, ChannelErrorCode & number>;
  ContactAttribute: Record<ContactAttribute & string, ContactAttribute & number>;
  ContactSetting: Record<ContactSetting & string, ContactSetting & number>;
  ContactStatus: Record<ContactStatus & string, ContactStatus & number>;
  ContactType: Record<ContactType & string, ContactType & number>;
  ContentType: Record<ContentType & string, ContentType & number>;
  Eg_EnumC8927a: Record<Eg_EnumC8927a & string, Eg_EnumC8927a & number>;
  EmailConfirmationStatus: Record<EmailConfirmationStatus & string, EmailConfirmationStatus & number>;
  ErrorCode: Record<ErrorCode & string, ErrorCode & number>;
  Fg_a: Record<Fg_a & string, Fg_a & number>;
  FriendRequestStatus: Record<FriendRequestStatus & string, FriendRequestStatus & number>;
  IdentityProvider: Record<IdentityProvider & string, IdentityProvider & number>;
  LN0_F0: Record<LN0_F0 & string, LN0_F0 & number>;
  LN0_X0: Record<LN0_X0 & string, LN0_X0 & number>;
  MIDType: Record<MIDType & string, MIDType & number>;
  NZ0_B0: Record<NZ0_B0 & string, NZ0_B0 & number>;
  NZ0_C0: Record<NZ0_C0 & string, NZ0_C0 & number>;
  NZ0_EnumC12154b1: Record<NZ0_EnumC12154b1 & string, NZ0_EnumC12154b1 & number>;
  NZ0_EnumC12169g1: Record<NZ0_EnumC12169g1 & string, NZ0_EnumC12169g1 & number>;
  NZ0_EnumC12170h: Record<NZ0_EnumC12170h & string, NZ0_EnumC12170h & number>;
  NZ0_EnumC12188n: Record<NZ0_EnumC12188n & string, NZ0_EnumC12188n & number>;
  NZ0_EnumC12192o0: Record<NZ0_EnumC12192o0 & string, NZ0_EnumC12192o0 & number>;
  NZ0_EnumC12193o1: Record<NZ0_EnumC12193o1 & string, NZ0_EnumC12193o1 & number>;
  NZ0_EnumC12195p0: Record<NZ0_EnumC12195p0 & string, NZ0_EnumC12195p0 & number>;
  NZ0_EnumC12197q: Record<NZ0_EnumC12197q & string, NZ0_EnumC12197q & number>;
  NZ0_EnumC12218x0: Record<NZ0_EnumC12218x0 & string, NZ0_EnumC12218x0 & number>;
  NZ0_I0: Record<NZ0_I0 & string, NZ0_I0 & number>;
  NZ0_K0: Record<NZ0_K0 & string, NZ0_K0 & number>;
  NZ0_N0: Record<NZ0_N0 & string, NZ0_N0 & number>;
  NZ0_S0: Record<NZ0_S0 & string, NZ0_S0 & number>;
  NZ0_W0: Record<NZ0_W0 & string, NZ0_W0 & number>;
  NotificationStatus: Record<NotificationStatus & string, NotificationStatus & number>;
  NotificationType: Record<NotificationType & string, NotificationType & number>;
  Ob1_B0: Record<Ob1_B0 & string, Ob1_B0 & number>;
  Ob1_C1: Record<Ob1_C1 & string, Ob1_C1 & number>;
  Ob1_D0: Record<Ob1_D0 & string, Ob1_D0 & number>;
  Ob1_EnumC12607a1: Record<Ob1_EnumC12607a1 & string, Ob1_EnumC12607a1 & number>;
  Ob1_EnumC12610b1: Record<Ob1_EnumC12610b1 & string, Ob1_EnumC12610b1 & number>;
  Ob1_EnumC12631i1: Record<Ob1_EnumC12631i1 & string, Ob1_EnumC12631i1 & number>;
  Ob1_EnumC12638l: Record<Ob1_EnumC12638l & string, Ob1_EnumC12638l & number>;
  Ob1_EnumC12641m: Record<Ob1_EnumC12641m & string, Ob1_EnumC12641m & number>;
  Ob1_EnumC12652p1: Record<Ob1_EnumC12652p1 & string, Ob1_EnumC12652p1 & number>;
  Ob1_EnumC12656r0: Record<Ob1_EnumC12656r0 & string, Ob1_EnumC12656r0 & number>;
  Ob1_EnumC12664u: Record<Ob1_EnumC12664u & string, Ob1_EnumC12664u & number>;
  Ob1_EnumC12666u1: Record<Ob1_EnumC12666u1 & string, Ob1_EnumC12666u1 & number>;
  Ob1_F1: Record<Ob1_F1 & string, Ob1_F1 & number>;
  Ob1_I: Record<Ob1_I & string, Ob1_I & number>;
  Ob1_J0: Record<Ob1_J0 & string, Ob1_J0 & number>;
  Ob1_J1: Record<Ob1_J1 & string, Ob1_J1 & number>;
  Ob1_K1: Record<Ob1_K1 & string, Ob1_K1 & number>;
  Ob1_M1: Record<Ob1_M1 & string, Ob1_M1 & number>;
  Ob1_O0: Record<Ob1_O0 & string, Ob1_O0 & number>;
  Ob1_O1: Record<Ob1_O1 & string, Ob1_O1 & number>;
  Ob1_P1: Record<Ob1_P1 & string, Ob1_P1 & number>;
  Ob1_Q1: Record<Ob1_Q1 & string, Ob1_Q1 & number>;
  Ob1_R1: Record<Ob1_R1 & string, Ob1_R1 & number>;
  Ob1_U1: Record<Ob1_U1 & string, Ob1_U1 & number>;
  Ob1_V1: Record<Ob1_V1 & string, Ob1_V1 & number>;
  Ob1_X1: Record<Ob1_X1 & string, Ob1_X1 & number>;
  Ob1_a2: Record<Ob1_a2 & string, Ob1_a2 & number>;
  Ob1_c2: Record<Ob1_c2 & string, Ob1_c2 & number>;
  OpType: Record<OpType & string, OpType & number>;
  P70_g: Record<P70_g & string, P70_g & number>;
  PaidCallType: Record<PaidCallType & string, PaidCallType & number>;
  PayloadType: Record<PayloadType & string, PayloadType & number>;
  Pb1_A0: Record<Pb1_A0 & string, Pb1_A0 & number>;
  Pb1_A3: Record<Pb1_A3 & string, Pb1_A3 & number>;
  Pb1_B: Record<Pb1_B & string, Pb1_B & number>;
  Pb1_D0: Record<Pb1_D0 & string, Pb1_D0 & number>;
  Pb1_D4: Record<Pb1_D4 & string, Pb1_D4 & number>;
  Pb1_D6: Record<Pb1_D6 & string, Pb1_D6 & number>;
  Pb1_E7: Record<Pb1_E7 & string, Pb1_E7 & number>;
  Pb1_EnumC12917a6: Record<Pb1_EnumC12917a6 & string, Pb1_EnumC12917a6 & number>;
  Pb1_EnumC12926b1: Record<Pb1_EnumC12926b1 & string, Pb1_EnumC12926b1 & number>;
  Pb1_EnumC12941c2: Record<Pb1_EnumC12941c2 & string, Pb1_EnumC12941c2 & number>;
  Pb1_EnumC12945c6: Record<Pb1_EnumC12945c6 & string, Pb1_EnumC12945c6 & number>;
  Pb1_EnumC12970e3: Record<Pb1_EnumC12970e3 & string, Pb1_EnumC12970e3 & number>;
  Pb1_EnumC12997g2: Record<Pb1_EnumC12997g2 & string, Pb1_EnumC12997g2 & number>;
  Pb1_EnumC12998g3: Record<Pb1_EnumC12998g3 & string, Pb1_EnumC12998g3 & number>;
  Pb1_EnumC13009h0: Record<Pb1_EnumC13009h0 & string, Pb1_EnumC13009h0 & number>;
  Pb1_EnumC13010h1: Record<Pb1_EnumC13010h1 & string, Pb1_EnumC13010h1 & number>;
  Pb1_EnumC13015h6: Record<Pb1_EnumC13015h6 & string, Pb1_EnumC13015h6 & number>;
  Pb1_EnumC13022i: Record<Pb1_EnumC13022i & string, Pb1_EnumC13022i & number>;
  Pb1_EnumC13029i6: Record<Pb1_EnumC13029i6 & string, Pb1_EnumC13029i6 & number>;
  Pb1_EnumC13037j0: Record<Pb1_EnumC13037j0 & string, Pb1_EnumC13037j0 & number>;
  Pb1_EnumC13050k: Record<Pb1_EnumC13050k & string, Pb1_EnumC13050k & number>;
  Pb1_EnumC13082m3: Record<Pb1_EnumC13082m3 & string, Pb1_EnumC13082m3 & number>;
  Pb1_EnumC13093n0: Record<Pb1_EnumC13093n0 & string, Pb1_EnumC13093n0 & number>;
  Pb1_EnumC13127p6: Record<Pb1_EnumC13127p6 & string, Pb1_EnumC13127p6 & number>;
  Pb1_EnumC13128p7: Record<Pb1_EnumC13128p7 & string, Pb1_EnumC13128p7 & number>;
  Pb1_EnumC13148r0: Record<Pb1_EnumC13148r0 & string, Pb1_EnumC13148r0 & number>;
  Pb1_EnumC13151r3: Record<Pb1_EnumC13151r3 & string, Pb1_EnumC13151r3 & number>;
  Pb1_EnumC13162s0: Record<Pb1_EnumC13162s0 & string, Pb1_EnumC13162s0 & number>;
  Pb1_EnumC13196u6: Record<Pb1_EnumC13196u6 & string, Pb1_EnumC13196u6 & number>;
  Pb1_EnumC13209v5: Record<Pb1_EnumC13209v5 & string, Pb1_EnumC13209v5 & number>;
  Pb1_EnumC13221w3: Record<Pb1_EnumC13221w3 & string, Pb1_EnumC13221w3 & number>;
  Pb1_EnumC13222w4: Record<Pb1_EnumC13222w4 & string, Pb1_EnumC13222w4 & number>;
  Pb1_EnumC13237x5: Record<Pb1_EnumC13237x5 & string, Pb1_EnumC13237x5 & number>;
  Pb1_EnumC13238x6: Record<Pb1_EnumC13238x6 & string, Pb1_EnumC13238x6 & number>;
  Pb1_EnumC13251y5: Record<Pb1_EnumC13251y5 & string, Pb1_EnumC13251y5 & number>;
  Pb1_EnumC13252y6: Record<Pb1_EnumC13252y6 & string, Pb1_EnumC13252y6 & number>;
  Pb1_EnumC13260z0: Record<Pb1_EnumC13260z0 & string, Pb1_EnumC13260z0 & number>;
  Pb1_EnumC13267z7: Record<Pb1_EnumC13267z7 & string, Pb1_EnumC13267z7 & number>;
  Pb1_F0: Record<Pb1_F0 & string, Pb1_F0 & number>;
  Pb1_F4: Record<Pb1_F4 & string, Pb1_F4 & number>;
  Pb1_F5: Record<Pb1_F5 & string, Pb1_F5 & number>;
  Pb1_F6: Record<Pb1_F6 & string, Pb1_F6 & number>;
  Pb1_G3: Record<Pb1_G3 & string, Pb1_G3 & number>;
  Pb1_G4: Record<Pb1_G4 & string, Pb1_G4 & number>;
  Pb1_G6: Record<Pb1_G6 & string, Pb1_G6 & number>;
  Pb1_H6: Record<Pb1_H6 & string, Pb1_H6 & number>;
  Pb1_I6: Record<Pb1_I6 & string, Pb1_I6 & number>;
  Pb1_J4: Record<Pb1_J4 & string, Pb1_J4 & number>;
  Pb1_K2: Record<Pb1_K2 & string, Pb1_K2 & number>;
  Pb1_K6: Record<Pb1_K6 & string, Pb1_K6 & number>;
  Pb1_L2: Record<Pb1_L2 & string, Pb1_L2 & number>;
  Pb1_L4: Record<Pb1_L4 & string, Pb1_L4 & number>;
  Pb1_M6: Record<Pb1_M6 & string, Pb1_M6 & number>;
  Pb1_N6: Record<Pb1_N6 & string, Pb1_N6 & number>;
  Pb1_O2: Record<Pb1_O2 & string, Pb1_O2 & number>;
  Pb1_O6: Record<Pb1_O6 & string, Pb1_O6 & number>;
  Pb1_P6: Record<Pb1_P6 & string, Pb1_P6 & number>;
  Pb1_Q2: Record<Pb1_Q2 & string, Pb1_Q2 & number>;
  Pb1_R3: Record<Pb1_R3 & string, Pb1_R3 & number>;
  Pb1_S7: Record<Pb1_S7 & string, Pb1_S7 & number>;
  Pb1_T3: Record<Pb1_T3 & string, Pb1_T3 & number>;
  Pb1_T7: Record<Pb1_T7 & string, Pb1_T7 & number>;
  Pb1_V7: Record<Pb1_V7 & string, Pb1_V7 & number>;
  Pb1_W2: Record<Pb1_W2 & string, Pb1_W2 & number>;
  Pb1_W3: Record<Pb1_W3 & string, Pb1_W3 & number>;
  Pb1_X1: Record<Pb1_X1 & string, Pb1_X1 & number>;
  Pb1_X2: Record<Pb1_X2 & string, Pb1_X2 & number>;
  Pb1_Z2: Record<Pb1_Z2 & string, Pb1_Z2 & number>;
  Pb1_gd: Record<Pb1_gd & string, Pb1_gd & number>;
  Pb1_od: Record<Pb1_od & string, Pb1_od & number>;
  PointErrorCode: Record<PointErrorCode & string, PointErrorCode & number>;
  Q70_q: Record<Q70_q & string, Q70_q & number>;
  Q70_r: Record<Q70_r & string, Q70_r & number>;
  Qj_EnumC13584a: Record<Qj_EnumC13584a & string, Qj_EnumC13584a & number>;
  Qj_EnumC13585b: Record<Qj_EnumC13585b & string, Qj_EnumC13585b & number>;
  Qj_EnumC13588e: Record<Qj_EnumC13588e & string, Qj_EnumC13588e & number>;
  Qj_EnumC13592i: Record<Qj_EnumC13592i & string, Qj_EnumC13592i & number>;
  Qj_EnumC13597n: Record<Qj_EnumC13597n & string, Qj_EnumC13597n & number>;
  Qj_EnumC13604v: Record<Qj_EnumC13604v & string, Qj_EnumC13604v & number>;
  Qj_EnumC13605w: Record<Qj_EnumC13605w & string, Qj_EnumC13605w & number>;
  Qj_EnumC13606x: Record<Qj_EnumC13606x & string, Qj_EnumC13606x & number>;
  Qj_a0: Record<Qj_a0 & string, Qj_a0 & number>;
  Qj_e0: Record<Qj_e0 & string, Qj_e0 & number>;
  Qj_h0: Record<Qj_h0 & string, Qj_h0 & number>;
  Qj_i0: Record<Qj_i0 & string, Qj_i0 & number>;
  R70_e: Record<R70_e & string, R70_e & number>;
  RegistrationType: Record<RegistrationType & string, RegistrationType & number>;
  ReportType: Record<ReportType & string, ReportType & number>;
  S70_a: Record<S70_a & string, S70_a & number>;
  SettingsAttributeEx: Record<SettingsAttributeEx & string, SettingsAttributeEx & number>;
  SnsIdType: Record<SnsIdType & string, SnsIdType & number>;
  SpammerReason: Record<SpammerReason & string, SpammerReason & number>;
  SpotCategory: Record<SpotCategory & string, SpotCategory & number>;
  SquareAttribute: Record<SquareAttribute & string, SquareAttribute & number>;
  SquareAuthorityAttribute: Record<SquareAuthorityAttribute & string, SquareAuthorityAttribute & number>;
  SquareChatType: Record<SquareChatType & string, SquareChatType & number>;
  SquareMemberAttribute: Record<SquareMemberAttribute & string, SquareMemberAttribute & number>;
  SquareMembershipState: Record<SquareMembershipState & string, SquareMembershipState & number>;
  StickerResourceType: Record<StickerResourceType & string, StickerResourceType & number>;
  SyncCategory: Record<SyncCategory & string, SyncCategory & number>;
  T70_C: Record<T70_C & string, T70_C & number>;
  T70_EnumC14390b: Record<T70_EnumC14390b & string, T70_EnumC14390b & number>;
  T70_EnumC14392c: Record<T70_EnumC14392c & string, T70_EnumC14392c & number>;
  T70_EnumC14406j: Record<T70_EnumC14406j & string, T70_EnumC14406j & number>;
  T70_K: Record<T70_K & string, T70_K & number>;
  T70_L: Record<T70_L & string, T70_L & number>;
  T70_Z0: Record<T70_Z0 & string, T70_Z0 & number>;
  T70_e1: Record<T70_e1 & string, T70_e1 & number>;
  T70_j1: Record<T70_j1 & string, T70_j1 & number>;
  U70_c: Record<U70_c & string, U70_c & number>;
  Uf_EnumC14873o: Record<Uf_EnumC14873o & string, Uf_EnumC14873o & number>;
  VR0_l: Record<VR0_l & string, VR0_l & number>;
  VerificationMethod: Record<VerificationMethod & string, VerificationMethod & number>;
  VerificationResult: Record<VerificationResult & string, VerificationResult & number>;
  WR0_a: Record<WR0_a & string, WR0_a & number>;
  a80_EnumC16644b: Record<a80_EnumC16644b & string, a80_EnumC16644b & number>;
  FetchDirection: Record<FetchDirection & string, FetchDirection & number>;
  LiveTalkEventType: Record<LiveTalkEventType & string, LiveTalkEventType & number>;
  LiveTalkReportType: Record<LiveTalkReportType & string, LiveTalkReportType & number>;
  MessageSummaryReportType: Record<MessageSummaryReportType & string, MessageSummaryReportType & number>;
  NotificationPostType: Record<NotificationPostType & string, NotificationPostType & number>;
  SquareEventStatus: Record<SquareEventStatus & string, SquareEventStatus & number>;
  SquareEventType: Record<SquareEventType & string, SquareEventType & number>;
  AdScreen: Record<AdScreen & string, AdScreen & number>;
  BooleanState: Record<BooleanState & string, BooleanState & number>;
  ChatroomPopupType: Record<ChatroomPopupType & string, ChatroomPopupType & number>;
  ContentsAttribute: Record<ContentsAttribute & string, ContentsAttribute & number>;
  FetchType: Record<FetchType & string, FetchType & number>;
  LiveTalkAttribute: Record<LiveTalkAttribute & string, LiveTalkAttribute & number>;
  LiveTalkRole: Record<LiveTalkRole & string, LiveTalkRole & number>;
  LiveTalkSpeakerSetting: Record<LiveTalkSpeakerSetting & string, LiveTalkSpeakerSetting & number>;
  LiveTalkType: Record<LiveTalkType & string, LiveTalkType & number>;
  MessageReactionType: Record<MessageReactionType & string, MessageReactionType & number>;
  NotifiedMessageType: Record<NotifiedMessageType & string, NotifiedMessageType & number>;
  PopupAttribute: Record<PopupAttribute & string, PopupAttribute & number>;
  PopupType: Record<PopupType & string, PopupType & number>;
  SquareChatAttribute: Record<SquareChatAttribute & string, SquareChatAttribute & number>;
  SquareChatFeatureControlState: Record<SquareChatFeatureControlState & string, SquareChatFeatureControlState & number>;
  SquareChatMemberAttribute: Record<SquareChatMemberAttribute & string, SquareChatMemberAttribute & number>;
  SquareChatMembershipState: Record<SquareChatMembershipState & string, SquareChatMembershipState & number>;
  SquareChatState: Record<SquareChatState & string, SquareChatState & number>;
  SquareEmblem: Record<SquareEmblem & string, SquareEmblem & number>;
  SquareErrorCode: Record<SquareErrorCode & string, SquareErrorCode & number>;
  SquareFeatureControlState: Record<SquareFeatureControlState & string, SquareFeatureControlState & number>;
  SquareFeatureSetAttribute: Record<SquareFeatureSetAttribute & string, SquareFeatureSetAttribute & number>;
  SquareJoinMethodType: Record<SquareJoinMethodType & string, SquareJoinMethodType & number>;
  SquareMemberRelationState: Record<SquareMemberRelationState & string, SquareMemberRelationState & number>;
  SquareMemberRole: Record<SquareMemberRole & string, SquareMemberRole & number>;
  SquareMessageState: Record<SquareMessageState & string, SquareMessageState & number>;
  SquareMetadataAttribute: Record<SquareMetadataAttribute & string, SquareMetadataAttribute & number>;
  SquarePreferenceAttribute: Record<SquarePreferenceAttribute & string, SquarePreferenceAttribute & number>;
  SquareProviderType: Record<SquareProviderType & string, SquareProviderType & number>;
  SquareState: Record<SquareState & string, SquareState & number>;
  SquareThreadAttribute: Record<SquareThreadAttribute & string, SquareThreadAttribute & number>;
  SquareThreadMembershipState: Record<SquareThreadMembershipState & string, SquareThreadMembershipState & number>;
  SquareThreadState: Record<SquareThreadState & string, SquareThreadState & number>;
  SquareType: Record<SquareType & string, SquareType & number>;
  TargetChatType: Record<TargetChatType & string, TargetChatType & number>;
  TargetUserType: Record<TargetUserType & string, TargetUserType & number>;
  do0_EnumC23139B: Record<do0_EnumC23139B & string, do0_EnumC23139B & number>;
  do0_EnumC23147e: Record<do0_EnumC23147e & string, do0_EnumC23147e & number>;
  do0_EnumC23148f: Record<do0_EnumC23148f & string, do0_EnumC23148f & number>;
  do0_G: Record<do0_G & string, do0_G & number>;
  do0_M: Record<do0_M & string, do0_M & number>;
  fN0_EnumC24466B: Record<fN0_EnumC24466B & string, fN0_EnumC24466B & number>;
  fN0_EnumC24467C: Record<fN0_EnumC24467C & string, fN0_EnumC24467C & number>;
  fN0_EnumC24469a: Record<fN0_EnumC24469a & string, fN0_EnumC24469a & number>;
  fN0_F: Record<fN0_F & string, fN0_F & number>;
  fN0_G: Record<fN0_G & string, fN0_G & number>;
  fN0_H: Record<fN0_H & string, fN0_H & number>;
  fN0_o: Record<fN0_o & string, fN0_o & number>;
  fN0_p: Record<fN0_p & string, fN0_p & number>;
  fN0_q: Record<fN0_q & string, fN0_q & number>;
  g80_EnumC24993a: Record<g80_EnumC24993a & string, g80_EnumC24993a & number>;
  h80_EnumC25645e: Record<h80_EnumC25645e & string, h80_EnumC25645e & number>;
  I80_EnumC26392b: Record<I80_EnumC26392b & string, I80_EnumC26392b & number>;
  I80_EnumC26394c: Record<I80_EnumC26394c & string, I80_EnumC26394c & number>;
  I80_EnumC26408j: Record<I80_EnumC26408j & string, I80_EnumC26408j & number>;
  I80_EnumC26425y: Record<I80_EnumC26425y & string, I80_EnumC26425y & number>;
  j80_EnumC27228a: Record<j80_EnumC27228a & string, j80_EnumC27228a & number>;
  jO0_EnumC27533B: Record<jO0_EnumC27533B & string, jO0_EnumC27533B & number>;
  jO0_EnumC27535b: Record<jO0_EnumC27535b & string, jO0_EnumC27535b & number>;
  jO0_EnumC27559z: Record<jO0_EnumC27559z & string, jO0_EnumC27559z & number>;
  jf_EnumC27712a: Record<jf_EnumC27712a & string, jf_EnumC27712a & number>;
  jf_EnumC27717f: Record<jf_EnumC27717f & string, jf_EnumC27717f & number>;
  kf_EnumC28766a: Record<kf_EnumC28766a & string, kf_EnumC28766a & number>;
  kf_o: Record<kf_o & string, kf_o & number>;
  kf_p: Record<kf_p & string, kf_p & number>;
  kf_r: Record<kf_r & string, kf_r & number>;
  kf_u: Record<kf_u & string, kf_u & number>;
  kf_x: Record<kf_x & string, kf_x & number>;
  n80_o: Record<n80_o & string, n80_o & number>;
  o80_e: Record<o80_e & string, o80_e & number>;
  og_E: Record<og_E & string, og_E & number>;
  og_EnumC32661b: Record<og_EnumC32661b & string, og_EnumC32661b & number>;
  og_EnumC32663d: Record<og_EnumC32663d & string, og_EnumC32663d & number>;
  og_EnumC32671l: Record<og_EnumC32671l & string, og_EnumC32671l & number>;
  og_G: Record<og_G & string, og_G & number>;
  og_I: Record<og_I & string, og_I & number>;
  q80_EnumC33651c: Record<q80_EnumC33651c & string, q80_EnumC33651c & number>;
  qm_EnumC34112e: Record<qm_EnumC34112e & string, qm_EnumC34112e & number>;
  qm_s: Record<qm_s & string, qm_s & number>;
  r80_EnumC34361a: Record<r80_EnumC34361a & string, r80_EnumC34361a & number>;
  r80_EnumC34362b: Record<r80_EnumC34362b & string, r80_EnumC34362b & number>;
  r80_EnumC34365e: Record<r80_EnumC34365e & string, r80_EnumC34365e & number>;
  r80_EnumC34367g: Record<r80_EnumC34367g & string, r80_EnumC34367g & number>;
  r80_EnumC34368h: Record<r80_EnumC34368h & string, r80_EnumC34368h & number>;
  r80_EnumC34370j: Record<r80_EnumC34370j & string, r80_EnumC34370j & number>;
  r80_EnumC34371k: Record<r80_EnumC34371k & string, r80_EnumC34371k & number>;
  r80_EnumC34372l: Record<r80_EnumC34372l & string, r80_EnumC34372l & number>;
  r80_EnumC34374n: Record<r80_EnumC34374n & string, r80_EnumC34374n & number>;
  r80_EnumC34376p: Record<r80_EnumC34376p & string, r80_EnumC34376p & number>;
  r80_EnumC34377q: Record<r80_EnumC34377q & string, r80_EnumC34377q & number>;
  r80_EnumC34378s: Record<r80_EnumC34378s & string, r80_EnumC34378s & number>;
  r80_e0: Record<r80_e0 & string, r80_e0 & number>;
  r80_g0: Record<r80_g0 & string, r80_g0 & number>;
  r80_h0: Record<r80_h0 & string, r80_h0 & number>;
  r80_i0: Record<r80_i0 & string, r80_i0 & number>;
  r80_m0: Record<r80_m0 & string, r80_m0 & number>;
  r80_n0: Record<r80_n0 & string, r80_n0 & number>;
  r80_r: Record<r80_r & string, r80_r & number>;
  t80_h: Record<t80_h & string, t80_h & number>;
  t80_i: Record<t80_i & string, t80_i & number>;
  t80_n: Record<t80_n & string, t80_n & number>;
  t80_r: Record<t80_r & string, t80_r & number>;
  vh_EnumC37632c: Record<vh_EnumC37632c & string, vh_EnumC37632c & number>;
  vh_m: Record<vh_m & string, vh_m & number>;
  wm_EnumC38497a: Record<wm_EnumC38497a & string, wm_EnumC38497a & number>;
  zR0_EnumC40578c: Record<zR0_EnumC40578c & string, zR0_EnumC40578c & number>;
  zR0_EnumC40579d: Record<zR0_EnumC40579d & string, zR0_EnumC40579d & number>;
  zR0_h: Record<zR0_h & string, zR0_h & number>;
  zR0_j: Record<zR0_j & string, zR0_j & number>;
  zf_EnumC40713a: Record<zf_EnumC40713a & string, zf_EnumC40713a & number>;
  zf_EnumC40715c: Record<zf_EnumC40715c & string, zf_EnumC40715c & number>;
  zf_EnumC40716d: Record<zf_EnumC40716d & string, zf_EnumC40716d & number>;
} = {
  "AR0_g": {
    "ILLEGAL_ARGUMENT": 16641,
    "MAJOR_VERSION_NOT_SUPPORTED": 16642,
    "AUTHENTICATION_FAILED": 16897,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_UNAVAILABLE": 20739
  },
  "AR0_q": {
    "NOT_PURCHASED": 0,
    "SUBSCRIPTION": 1
  },
  "AccountMigrationPincodeType": {
    "NOT_APPLICABLE": 0,
    "NOT_SET": 1,
    "SET": 2,
    "NEED_ENFORCED_INPUT": 3
  },
  "ApplicationType": {
    "IOS": 16,
    "IOS_RC": 17,
    "IOS_BETA": 18,
    "IOS_ALPHA": 19,
    "ANDROID": 32,
    "ANDROID_RC": 33,
    "ANDROID_BETA": 34,
    "ANDROID_ALPHA": 35,
    "WAP": 48,
    "WAP_RC": 49,
    "WAP_BETA": 50,
    "WAP_ALPHA": 51,
    "BOT": 64,
    "BOT_RC": 65,
    "BOT_BETA": 66,
    "BOT_ALPHA": 67,
    "WEB": 80,
    "WEB_RC": 81,
    "WEB_BETA": 82,
    "WEB_ALPHA": 83,
    "DESKTOPWIN": 96,
    "DESKTOPWIN_RC": 97,
    "DESKTOPWIN_BETA": 98,
    "DESKTOPWIN_ALPHA": 99,
    "DESKTOPMAC": 112,
    "DESKTOPMAC_RC": 113,
    "DESKTOPMAC_BETA": 114,
    "DESKTOPMAC_ALPHA": 115,
    "CHANNELGW": 128,
    "CHANNELGW_RC": 129,
    "CHANNELGW_BETA": 130,
    "CHANNELGW_ALPHA": 131,
    "CHANNELCP": 144,
    "CHANNELCP_RC": 145,
    "CHANNELCP_BETA": 146,
    "CHANNELCP_ALPHA": 147,
    "WINPHONE": 160,
    "WINPHONE_RC": 161,
    "WINPHONE_BETA": 162,
    "WINPHONE_ALPHA": 163,
    "BLACKBERRY": 176,
    "BLACKBERRY_RC": 177,
    "BLACKBERRY_BETA": 178,
    "BLACKBERRY_ALPHA": 179,
    "WINMETRO": 192,
    "WINMETRO_RC": 193,
    "WINMETRO_BETA": 194,
    "WINMETRO_ALPHA": 195,
    "S40": 200,
    "S40_RC": 209,
    "S40_BETA": 210,
    "S40_ALPHA": 211,
    "CHRONO": 224,
    "CHRONO_RC": 225,
    "CHRONO_BETA": 226,
    "CHRONO_ALPHA": 227,
    "TIZEN": 256,
    "TIZEN_RC": 257,
    "TIZEN_BETA": 258,
    "TIZEN_ALPHA": 259,
    "VIRTUAL": 272,
    "FIREFOXOS": 288,
    "FIREFOXOS_RC": 289,
    "FIREFOXOS_BETA": 290,
    "FIREFOXOS_ALPHA": 291,
    "IOSIPAD": 304,
    "IOSIPAD_RC": 305,
    "IOSIPAD_BETA": 306,
    "IOSIPAD_ALPHA": 307,
    "BIZIOS": 320,
    "BIZIOS_RC": 321,
    "BIZIOS_BETA": 322,
    "BIZIOS_ALPHA": 323,
    "BIZANDROID": 336,
    "BIZANDROID_RC": 337,
    "BIZANDROID_BETA": 338,
    "BIZANDROID_ALPHA": 339,
    "BIZBOT": 352,
    "BIZBOT_RC": 353,
    "BIZBOT_BETA": 354,
    "BIZBOT_ALPHA": 355,
    "CHROMEOS": 368,
    "CHROMEOS_RC": 369,
    "CHROMEOS_BETA": 370,
    "CHROMEOS_ALPHA": 371,
    "ANDROIDLITE": 384,
    "ANDROIDLITE_RC": 385,
    "ANDROIDLITE_BETA": 386,
    "ANDROIDLITE_ALPHA": 387,
    "WIN10": 400,
    "WIN10_RC": 401,
    "WIN10_BETA": 402,
    "WIN10_ALPHA": 403,
    "BIZWEB": 416,
    "BIZWEB_RC": 417,
    "BIZWEB_BETA": 418,
    "BIZWEB_ALPHA": 419,
    "DUMMYPRIMARY": 432,
    "DUMMYPRIMARY_RC": 433,
    "DUMMYPRIMARY_BETA": 434,
    "DUMMYPRIMARY_ALPHA": 435,
    "SQUARE": 448,
    "SQUARE_RC": 449,
    "SQUARE_BETA": 450,
    "SQUARE_ALPHA": 451,
    "INTERNAL": 464,
    "INTERNAL_RC": 465,
    "INTERNAL_BETA": 466,
    "INTERNAL_ALPHA": 467,
    "CLOVAFRIENDS": 480,
    "CLOVAFRIENDS_RC": 481,
    "CLOVAFRIENDS_BETA": 482,
    "CLOVAFRIENDS_ALPHA": 483,
    "WATCHOS": 496,
    "WATCHOS_RC": 497,
    "WATCHOS_BETA": 498,
    "WATCHOS_ALPHA": 499,
    "OPENCHAT_PLUG": 512,
    "OPENCHAT_PLUG_RC": 513,
    "OPENCHAT_PLUG_BETA": 514,
    "OPENCHAT_PLUG_ALPHA": 515,
    "ANDROIDSECONDARY": 528,
    "ANDROIDSECONDARY_RC": 529,
    "ANDROIDSECONDARY_BETA": 530,
    "ANDROIDSECONDARY_ALPHA": 531,
    "WEAROS": 544,
    "WEAROS_RC": 545,
    "WEAROS_BETA": 546,
    "WEAROS_ALPHA": 547
  },
  "BotType": {
    "RESERVED": 0,
    "OFFICIAL": 1,
    "LINE_AT_0": 2,
    "LINE_AT": 3
  },
  "CarrierCode": {
    "NOT_SPECIFIED": 0,
    "JP_DOCOMO": 1,
    "JP_AU": 2,
    "JP_SOFTBANK": 3,
    "JP_DOCOMO_LINE": 4,
    "JP_SOFTBANK_LINE": 5,
    "JP_AU_LINE": 6,
    "JP_RAKUTEN": 7,
    "JP_MVNO": 8,
    "JP_USER_SELECTED_LINE": 9,
    "KR_SKT": 17,
    "KR_KT": 18,
    "KR_LGT": 19
  },
  "ChannelErrorCode": {
    "ILLEGAL_ARGUMENT": 0,
    "INTERNAL_ERROR": 1,
    "CONNECTION_ERROR": 2,
    "AUTHENTICATIONI_FAILED": 3,
    "NEED_PERMISSION_APPROVAL": 4,
    "COIN_NOT_USABLE": 5,
    "WEBVIEW_NOT_ALLOWED": 6,
    "NOT_AVAILABLE_API": 7
  },
  "ContactAttribute": {
    "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL": 1,
    "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL": 2,
    "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME": 16,
    "CONTACT_ATTRIBUTE_CAPABLE_BUDDY": 32
  },
  "ContactSetting": {
    "CONTACT_SETTING_NOTIFICATION_DISABLE": 1,
    "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE": 2,
    "CONTACT_SETTING_CONTACT_HIDE": 4,
    "CONTACT_SETTING_FAVORITE": 8,
    "CONTACT_SETTING_DELETE": 16,
    "CONTACT_SETTING_FRIEND_RINGTONE": 32,
    "CONTACT_SETTING_FRIEND_RINGBACK_TONE": 64
  },
  "ContactStatus": {
    "UNSPECIFIED": 0,
    "FRIEND": 1,
    "FRIEND_BLOCKED": 2,
    "RECOMMEND": 3,
    "RECOMMEND_BLOCKED": 4,
    "DELETED": 5,
    "DELETED_BLOCKED": 6
  },
  "ContactType": {
    "MID": 0,
    "PHONE": 1,
    "EMAIL": 2,
    "USERID": 3,
    "PROXIMITY": 4,
    "GROUP": 5,
    "USER": 6,
    "QRCODE": 7,
    "PROMOTION_BOT": 8,
    "CONTACT_MESSAGE": 9,
    "FRIEND_REQUEST": 10,
    "BEACON": 11,
    "REPAIR": 128,
    "FACEBOOK": 2305,
    "SINA": 2306,
    "RENREN": 2307,
    "FEIXIN": 2308,
    "BBM": 2309
  },
  "ContentType": {
    "NONE": 0,
    "IMAGE": 1,
    "VIDEO": 2,
    "AUDIO": 3,
    "HTML": 4,
    "PDF": 5,
    "CALL": 6,
    "STICKER": 7,
    "PRESENCE": 8,
    "GIFT": 9,
    "GROUPBOARD": 10,
    "APPLINK": 11,
    "LINK": 12,
    "CONTACT": 13,
    "FILE": 14,
    "LOCATION": 15,
    "POSTNOTIFICATION": 16,
    "RICH": 17,
    "CHATEVENT": 18,
    "MUSIC": 19,
    "PAYMENT": 20,
    "EXTIMAGE": 21,
    "FLEX": 22
  },
  "Eg_EnumC8927a": {
    "NEW": 1,
    "UPDATE": 2,
    "EVENT": 3
  },
  "EmailConfirmationStatus": {
    "NOT_SPECIFIED": 0,
    "NOT_YET": 1,
    "DONE": 3,
    "NEED_ENFORCED_INPUT": 4
  },
  "ErrorCode": {
    "ILLEGAL_ARGUMENT": 0,
    "AUTHENTICATION_FAILED": 1,
    "DB_FAILED": 2,
    "INVALID_STATE": 3,
    "EXCESSIVE_ACCESS": 4,
    "NOT_FOUND": 5,
    "INVALID_LENGTH": 6,
    "NOT_AVAILABLE_USER": 7,
    "NOT_AUTHORIZED_DEVICE": 8,
    "INVALID_MID": 9,
    "NOT_A_MEMBER": 10,
    "INCOMPATIBLE_APP_VERSION": 11,
    "NOT_READY": 12,
    "NOT_AVAILABLE_SESSION": 13,
    "NOT_AUTHORIZED_SESSION": 14,
    "SYSTEM_ERROR": 15,
    "NO_AVAILABLE_VERIFICATION_METHOD": 16,
    "NOT_AUTHENTICATED": 17,
    "INVALID_IDENTITY_CREDENTIAL": 18,
    "NOT_AVAILABLE_IDENTITY_IDENTIFIER": 19,
    "INTERNAL_ERROR": 20,
    "NO_SUCH_IDENTITY_IDENFIER": 21,
    "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": 22,
    "ILLEGAL_IDENTITY_CREDENTIAL": 23,
    "UNKNOWN_CHANNEL": 24,
    "NO_SUCH_MESSAGE_BOX": 25,
    "NOT_AVAILABLE_MESSAGE_BOX": 26,
    "CHANNEL_DOES_NOT_MATCH": 27,
    "NOT_YOUR_MESSAGE": 28,
    "MESSAGE_DEFINED_ERROR": 29,
    "USER_CANNOT_ACCEPT_PRESENTS": 30,
    "USER_NOT_STICKER_OWNER": 32,
    "MAINTENANCE_ERROR": 33,
    "ACCOUNT_NOT_MATCHED": 34,
    "ABUSE_BLOCK": 35,
    "NOT_FRIEND": 36,
    "NOT_ALLOWED_CALL": 37,
    "BLOCK_FRIEND": 38,
    "INCOMPATIBLE_VOIP_VERSION": 39,
    "INVALID_SNS_ACCESS_TOKEN": 40,
    "EXTERNAL_SERVICE_NOT_AVAILABLE": 41,
    "NOT_ALLOWED_ADD_CONTACT": 42,
    "NOT_CERTIFICATED": 43,
    "NOT_ALLOWED_SECONDARY_DEVICE": 44,
    "INVALID_PIN_CODE": 45,
    "EXCEED_FILE_MAX_SIZE": 47,
    "EXCEED_DAILY_QUOTA": 48,
    "NOT_SUPPORT_SEND_FILE": 49,
    "MUST_UPGRADE": 50,
    "NOT_AVAILABLE_PIN_CODE_SESSION": 51,
    "EXPIRED_REVISION": 52,
    "NOT_YET_PHONE_NUMBER": 54,
    "BAD_CALL_NUMBER": 55,
    "UNAVAILABLE_CALL_NUMBER": 56,
    "NOT_SUPPORT_CALL_SERVICE": 57,
    "CONGESTION_CONTROL": 58,
    "NO_BALANCE": 59,
    "NOT_PERMITTED_CALLER_ID": 60,
    "NO_CALLER_ID_LIMIT_EXCEEDED": 61,
    "CALLER_ID_VERIFICATION_REQUIRED": 62,
    "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 63,
    "MESSAGE_NOT_FOUND": 64,
    "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": 65,
    "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": 66,
    "ACCOUNT_MIGRATION_PINCODE_BLOCKED": 67,
    "INVALID_PASSWORD_FORMAT": 69,
    "FEATURE_RESTRICTED": 70,
    "MESSAGE_NOT_DESTRUCTIBLE": 71,
    "PAID_CALL_REDEEM_FAILED": 72,
    "PREVENTED_JOIN_BY_TICKET": 73,
    "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": 75,
    "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": 76,
    "SECURITY_CENTER_NOT_VERIFIED": 77,
    "SECURITY_CENTER_BLOCKED_BY_SETTING": 78,
    "SECURITY_CENTER_BLOCKED": 79,
    "TALK_PROXY_EXCEPTION": 80,
    "E2EE_INVALID_PROTOCOL": 81,
    "E2EE_RETRY_ENCRYPT": 82,
    "E2EE_UPDATE_SENDER_KEY": 83,
    "E2EE_UPDATE_RECEIVER_KEY": 84,
    "E2EE_INVALID_ARGUMENT": 85,
    "E2EE_INVALID_VERSION": 86,
    "E2EE_SENDER_DISABLED": 87,
    "E2EE_RECEIVER_DISABLED": 88,
    "E2EE_SENDER_NOT_ALLOWED": 89,
    "E2EE_RECEIVER_NOT_ALLOWED": 90,
    "E2EE_RESEND_FAIL": 91,
    "E2EE_RESEND_OK": 92,
    "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": 93,
    "E2EE_UPDATE_PRIMARY_DEVICE": 94,
    "SUCCESS": 95,
    "CANCEL": 96,
    "E2EE_PRIMARY_NOT_SUPPORT": 97,
    "E2EE_RETRY_PLAIN": 98,
    "E2EE_RECREATE_GROUP_KEY": 99,
    "E2EE_GROUP_TOO_MANY_MEMBERS": 100,
    "SERVER_BUSY": 101,
    "NOT_ALLOWED_ADD_FOLLOW": 102,
    "INCOMING_FRIEND_REQUEST_LIMIT": 103,
    "OUTGOING_FRIEND_REQUEST_LIMIT": 104,
    "OUTGOING_FRIEND_REQUEST_QUOTA": 105,
    "DUPLICATED": 106,
    "BANNED": 107,
    "NOT_AN_INVITEE": 108,
    "NOT_AN_OUTSIDER": 109,
    "EMPTY_GROUP": 111,
    "EXCEED_FOLLOW_LIMIT": 112,
    "UNSUPPORTED_ACCOUNT_TYPE": 113,
    "AGREEMENT_REQUIRED": 114,
    "SHOULD_RETRY": 115,
    "OVER_MAX_CHATS_PER_USER": 116,
    "NOT_AVAILABLE_API": 117,
    "INVALID_OTP": 118,
    "MUST_REFRESH_V3_TOKEN": 119,
    "ALREADY_EXPIRED": 120,
    "USER_NOT_STICON_OWNER": 121,
    "REFRESH_MEDIA_FLOW": 122,
    "EXCEED_FOLLOWER_LIMIT": 123,
    "INCOMPATIBLE_APP_TYPE": 124,
    "NOT_PREMIUM": 125
  },
  "Fg_a": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "NOT_FOUND": 3,
    "RETRY_LATER": 4,
    "HUMAN_VERIFICATION_REQUIRED": 5,
    "NOT_ENABLED": 6,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101,
    "NO_CONTENT": 102
  },
  "FriendRequestStatus": {
    "NONE": 0,
    "AVAILABLE": 1,
    "ALREADY_REQUESTED": 2,
    "UNAVAILABLE": 3
  },
  "IdentityProvider": {
    "UNKNOWN": 0,
    "LINE": 1,
    "NAVER_KR": 2,
    "LINE_PHONE": 3
  },
  "LN0_F0": {
    "UNKNOWN": 0,
    "INVALID_TARGET_USER": 1,
    "AGE_VALIDATION": 2,
    "TOO_MANY_FRIENDS": 3,
    "TOO_MANY_REQUESTS": 4,
    "MALFORMED_REQUEST": 5,
    "TRACKING_META_QRCODE_FAVORED": 6
  },
  "LN0_X0": {
    "USER": 1,
    "BOT": 2
  },
  "MIDType": {
    "USER": 0,
    "ROOM": 1,
    "GROUP": 2,
    "SQUARE": 3,
    "SQUARE_CHAT": 4,
    "SQUARE_MEMBER": 5,
    "BOT": 6,
    "SQUARE_THREAD": 7
  },
  "NZ0_B0": {
    "PAY": 0,
    "POI": 1,
    "FX": 2,
    "SEC": 3,
    "BIT": 4,
    "LIN": 5,
    "SCO": 6,
    "POC": 7
  },
  "NZ0_C0": {
    "OK": 0,
    "MAINTENANCE": 1,
    "TPS_EXCEEDED": 2,
    "NOT_FOUND": 3,
    "BLOCKED": 4,
    "INTERNAL_ERROR": 5,
    "WALLET_CMS_MAINTENANCE": 6
  },
  "NZ0_EnumC12154b1": {
    "NORMAL": 0,
    "CAMERA": 1
  },
  "NZ0_EnumC12169g1": {
    "WALLET": 101,
    "ASSET": 201,
    "SHOPPING": 301
  },
  "NZ0_EnumC12170h": {
    "HIDE_BADGE": 0,
    "SHOW_BADGE": 1
  },
  "NZ0_EnumC12188n": {
    "OK": 0,
    "UNAVAILABLE": 1,
    "DUPLICATAE_REGISTRATION": 2,
    "INTERNAL_ERROR": 3
  },
  "NZ0_EnumC12192o0": {
    "LV1": 0,
    "LV2": 1,
    "LV3": 2,
    "LV9": 3
  },
  "NZ0_EnumC12193o1": {
    "INVALID_PARAMETER": 400,
    "AUTHENTICATION_FAILED": 401,
    "INTERNAL_SERVER_ERROR": 500,
    "SERVICE_IN_MAINTENANCE_MODE": 503
  },
  "NZ0_EnumC12195p0": {
    "ALIVE": 1,
    "SUSPENDED": 2,
    "UNREGISTERED": 3
  },
  "NZ0_EnumC12197q": {
    "PREFIX": 0,
    "SUFFIX": 1
  },
  "NZ0_EnumC12218x0": {
    "NO_CONTENT": 0,
    "OK": 1,
    "ERROR": 2
  },
  "NZ0_I0": {
    "A": 0,
    "B": 1,
    "C": 2,
    "D": 3,
    "UNKNOWN": 4
  },
  "NZ0_K0": {
    "POCKET_MONEY": 0,
    "REFINANCE": 1
  },
  "NZ0_N0": {
    "COMPACT": 0,
    "EXPANDED": 1
  },
  "NZ0_S0": {
    "CARD": 0,
    "ACTION": 1
  },
  "NZ0_W0": {
    "OK": 0,
    "INTERNAL_ERROR": 1
  },
  "NotificationStatus": {
    "NOTIFICATION_ITEM_EXIST": 1,
    "TIMELINE_ITEM_EXIST": 2,
    "NOTE_GROUP_NEW_ITEM_EXIST": 4,
    "TIMELINE_BUDDYGROUP_CHANGED": 8,
    "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST": 16,
    "ALBUM_ITEM_EXIST": 32,
    "TIMELINE_ITEM_DELETED": 64,
    "OTOGROUP_ITEM_EXIST": 128,
    "GROUPHOME_NEW_ITEM_EXIST": 256,
    "GROUPHOME_HIDDEN_ITEM_CHANGED": 512,
    "NOTIFICATION_ITEM_CHANGED": 1024,
    "BEAD_ITEM_HIDE": 2048,
    "BEAD_ITEM_SHOW": 4096,
    "LINE_TICKET_UPDATED": 8192,
    "TIMELINE_STORY_UPDATED": 16384,
    "SMARTCH_UPDATED": 32768,
    "AVATAR_UPDATED": 65536,
    "HOME_NOTIFICATION_ITEM_EXIST": 131072,
    "TIMELINE_REBOOT_COMPLETED": 262144,
    "TIMELINE_GUIDE_STORY_UPDATED": 524288,
    "TIMELINE_F2F_COMPLETED": 1048576,
    "VOOM_LIVE_STATE_CHANGED": 2097152,
    "VOOM_ACTIVITY_REWARD_ITEM_EXIST": 4194304
  },
  "NotificationType": {
    "APPLE_APNS": 1,
    "GOOGLE_C2DM": 2,
    "NHN_NNI": 3,
    "SKT_AOM": 4,
    "MS_MPNS": 5,
    "RIM_BIS": 6,
    "GOOGLE_GCM": 7,
    "NOKIA_NNAPI": 8,
    "TIZEN": 9,
    "MOZILLA_SIMPLE": 10,
    "LINE_BOT": 17,
    "LINE_WAP": 18,
    "APPLE_APNS_VOIP": 19,
    "MS_WNS": 20,
    "GOOGLE_FCM": 21,
    "CLOVA": 22,
    "CLOVA_VOIP": 23,
    "HUAWEI_HCM": 24
  },
  "Ob1_B0": {
    "FOREGROUND": 0,
    "BACKGROUND": 1
  },
  "Ob1_C1": {
    "NORMAL": 0,
    "BIG": 1
  },
  "Ob1_D0": {
    "PURCHASE_ONLY": 0,
    "PURCHASE_OR_SUBSCRIPTION": 1,
    "SUBSCRIPTION_ONLY": 2
  },
  "Ob1_EnumC12607a1": {
    "DEFAULT": 1,
    "VIEW_VIDEO": 2
  },
  "Ob1_EnumC12610b1": {
    "NONE": 0,
    "BUDDY": 2,
    "INSTALL": 3,
    "MISSION": 4,
    "MUSTBUY": 5
  },
  "Ob1_EnumC12631i1": {
    "UNKNOWN": 0,
    "PRODUCT": 1,
    "USER": 2,
    "PREMIUM_USER": 3
  },
  "Ob1_EnumC12638l": {
    "VALID": 0,
    "INVALID": 1
  },
  "Ob1_EnumC12641m": {
    "PREMIUM": 1,
    "VERIFIED": 2,
    "UNVERIFIED": 3
  },
  "Ob1_EnumC12652p1": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "NOT_PAID_PRODUCT": 16644,
    "NOT_FREE_PRODUCT": 16645,
    "ALREADY_OWNED": 16646,
    "ERROR_WITH_CUSTOM_MESSAGE": 16647,
    "NOT_AVAILABLE_TO_RECIPIENT": 16648,
    "NOT_AVAILABLE_FOR_CHANNEL_ID": 16649,
    "NOT_SALE_FOR_COUNTRY": 16650,
    "NOT_SALES_PERIOD": 16651,
    "NOT_SALE_FOR_DEVICE": 16652,
    "NOT_SALE_FOR_VERSION": 16653,
    "ALREADY_EXPIRED": 16654,
    "LIMIT_EXCEEDED": 16655,
    "MISSING_CAPABILITY": 16656,
    "AUTHENTICATION_FAILED": 16897,
    "BALANCE_SHORTAGE": 17153,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_IN_MAINTENANCE_MODE": 20738,
    "SERVICE_UNAVAILABLE": 20739
  },
  "Ob1_EnumC12656r0": {
    "OK": 0,
    "PRODUCT_UNSUPPORTED": 1,
    "TEXT_NOT_SPECIFIED": 2,
    "TEXT_STYLE_UNAVAILABLE": 3,
    "CHARACTER_COUNT_LIMIT_EXCEEDED": 4,
    "CONTAINS_INVALID_WORD": 5
  },
  "Ob1_EnumC12664u": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "MAX_AMOUNT_OF_PRODUCTS_REACHED": 16644,
    "PRODUCT_IS_NOT_PREMIUM": 16645,
    "PRODUCT_IS_NOT_AVAILABLE_FOR_USER": 16646,
    "AUTHENTICATION_FAILED": 16897,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_UNAVAILABLE": 20739
  },
  "Ob1_EnumC12666u1": {
    "POPULAR": 0,
    "NEW_RELEASE": 1,
    "EVENT": 2,
    "RECOMMENDED": 3,
    "POPULAR_WEEKLY": 4,
    "POPULAR_MONTHLY": 5,
    "POPULAR_RECENTLY_PUBLISHED": 6,
    "BUDDY": 7,
    "EXTRA_EVENT": 8,
    "BROWSING_HISTORY": 9,
    "POPULAR_TOTAL_SALES": 10,
    "NEW_SUBSCRIPTION": 11,
    "POPULAR_SUBSCRIPTION_30D": 12,
    "CPD_STICKER": 13,
    "POPULAR_WITH_FREE": 14
  },
  "Ob1_F1": {
    "STATIC": 1,
    "ANIMATION": 2
  },
  "Ob1_I": {
    "STATIC": 0,
    "POPULAR": 1,
    "NEW_RELEASE": 2
  },
  "Ob1_J0": {
    "ON_SALE": 0,
    "OUTDATED_VERSION": 1,
    "NOT_ON_SALE": 2
  },
  "Ob1_J1": {
    "OK": 0,
    "INVALID_PARAMETER": 1,
    "NOT_FOUND": 2,
    "NOT_SUPPORTED": 3,
    "CONFLICT": 4,
    "NOT_ELIGIBLE": 5
  },
  "Ob1_K1": {
    "GOOGLE": 0,
    "APPLE": 1,
    "WEBSTORE": 2,
    "LINEMO": 3,
    "LINE_MUSIC": 4,
    "LYP": 5,
    "TW_CHT": 6,
    "FREEMIUM": 7
  },
  "Ob1_M1": {
    "OK": 0,
    "UNKNOWN": 1,
    "NOT_SUPPORTED": 2,
    "NO_SUBSCRIPTION": 3,
    "SUBSCRIPTION_EXISTS": 4,
    "NOT_AVAILABLE": 5,
    "CONFLICT": 6,
    "OUTDATED_VERSION": 7,
    "NO_STUDENT_INFORMATION": 8,
    "ACCOUNT_HOLD": 9,
    "RETRY_STATE": 10
  },
  "Ob1_O0": {
    "STICKER": 1,
    "THEME": 2,
    "STICON": 3
  },
  "Ob1_O1": {
    "AVAILABLE": 0,
    "DIFFERENT_STORE": 1,
    "NOT_STUDENT": 2,
    "ALREADY_PURCHASED": 3
  },
  "Ob1_P1": {
    "GENERAL": 1,
    "STUDENT": 2
  },
  "Ob1_Q1": {
    "BASIC": 1,
    "DELUXE": 2
  },
  "Ob1_R1": {
    "MONTHLY": 1,
    "YEARLY": 2
  },
  "Ob1_U1": {
    "OK": 0,
    "UNKNOWN": 1,
    "NO_SUBSCRIPTION": 2,
    "EXISTS": 3,
    "NOT_FOUND": 4,
    "EXCEEDS_LIMIT": 5,
    "NOT_AVAILABLE": 6
  },
  "Ob1_V1": {
    "DATE_ASC": 1,
    "DATE_DESC": 2
  },
  "Ob1_X1": {
    "GENERAL": 0,
    "CREATORS": 1,
    "STICON": 2
  },
  "Ob1_a2": {
    "NOT_PURCHASED": 0,
    "SUBSCRIPTION": 1,
    "NOT_SUBSCRIBED": 2,
    "NOT_ACCEPTED": 3,
    "NOT_PURCHASED_U2I": 4,
    "BUDDY": 5
  },
  "Ob1_c2": {
    "STATIC": 1,
    "ANIMATION": 2
  },
  "OpType": {
    "END_OF_OPERATION": 0,
    "UPDATE_PROFILE": 1,
    "NOTIFIED_UPDATE_PROFILE": 2,
    "REGISTER_USERID": 3,
    "ADD_CONTACT": 4,
    "NOTIFIED_ADD_CONTACT": 5,
    "BLOCK_CONTACT": 6,
    "UNBLOCK_CONTACT": 7,
    "NOTIFIED_RECOMMEND_CONTACT": 8,
    "CREATE_GROUP": 9,
    "UPDATE_GROUP": 10,
    "NOTIFIED_UPDATE_GROUP": 11,
    "INVITE_INTO_GROUP": 12,
    "NOTIFIED_INVITE_INTO_GROUP": 13,
    "LEAVE_GROUP": 14,
    "NOTIFIED_LEAVE_GROUP": 15,
    "ACCEPT_GROUP_INVITATION": 16,
    "NOTIFIED_ACCEPT_GROUP_INVITATION": 17,
    "KICKOUT_FROM_GROUP": 18,
    "NOTIFIED_KICKOUT_FROM_GROUP": 19,
    "CREATE_ROOM": 20,
    "INVITE_INTO_ROOM": 21,
    "NOTIFIED_INVITE_INTO_ROOM": 22,
    "LEAVE_ROOM": 23,
    "NOTIFIED_LEAVE_ROOM": 24,
    "SEND_MESSAGE": 25,
    "RECEIVE_MESSAGE": 26,
    "SEND_MESSAGE_RECEIPT": 27,
    "RECEIVE_MESSAGE_RECEIPT": 28,
    "SEND_CONTENT_RECEIPT": 29,
    "RECEIVE_ANNOUNCEMENT": 30,
    "CANCEL_INVITATION_GROUP": 31,
    "NOTIFIED_CANCEL_INVITATION_GROUP": 32,
    "NOTIFIED_UNREGISTER_USER": 33,
    "REJECT_GROUP_INVITATION": 34,
    "NOTIFIED_REJECT_GROUP_INVITATION": 35,
    "UPDATE_SETTINGS": 36,
    "NOTIFIED_REGISTER_USER": 37,
    "INVITE_VIA_EMAIL": 38,
    "NOTIFIED_REQUEST_RECOVERY": 39,
    "SEND_CHAT_CHECKED": 40,
    "SEND_CHAT_REMOVED": 41,
    "NOTIFIED_FORCE_SYNC": 42,
    "SEND_CONTENT": 43,
    "SEND_MESSAGE_MYHOME": 44,
    "NOTIFIED_UPDATE_CONTENT_PREVIEW": 45,
    "REMOVE_ALL_MESSAGES": 46,
    "NOTIFIED_UPDATE_PURCHASES": 47,
    "DUMMY": 48,
    "UPDATE_CONTACT": 49,
    "NOTIFIED_RECEIVED_CALL": 50,
    "CANCEL_CALL": 51,
    "NOTIFIED_REDIRECT": 52,
    "NOTIFIED_CHANNEL_SYNC": 53,
    "FAILED_SEND_MESSAGE": 54,
    "NOTIFIED_READ_MESSAGE": 55,
    "FAILED_EMAIL_CONFIRMATION": 56,
    "NOTIFIED_CHAT_CONTENT": 58,
    "NOTIFIED_PUSH_NOTICENTER_ITEM": 59,
    "NOTIFIED_JOIN_CHAT": 60,
    "NOTIFIED_LEAVE_CHAT": 61,
    "NOTIFIED_TYPING": 62,
    "FRIEND_REQUEST_ACCEPTED": 63,
    "DESTROY_MESSAGE": 64,
    "NOTIFIED_DESTROY_MESSAGE": 65,
    "UPDATE_PUBLICKEYCHAIN": 66,
    "NOTIFIED_UPDATE_PUBLICKEYCHAIN": 67,
    "NOTIFIED_BLOCK_CONTACT": 68,
    "NOTIFIED_UNBLOCK_CONTACT": 69,
    "UPDATE_GROUPPREFERENCE": 70,
    "NOTIFIED_PAYMENT_EVENT": 71,
    "REGISTER_E2EE_PUBLICKEY": 72,
    "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": 73,
    "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": 74,
    "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": 75,
    "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": 76,
    "NOTIFIED_E2EE_KEY_UPDATE": 77,
    "NOTIFIED_BUDDY_UPDATE_PROFILE": 78,
    "NOTIFIED_UPDATE_LINEAT_TABS": 79,
    "UPDATE_ROOM": 80,
    "NOTIFIED_BEACON_DETECTED": 81,
    "UPDATE_EXTENDED_PROFILE": 82,
    "ADD_FOLLOW": 83,
    "NOTIFIED_ADD_FOLLOW": 84,
    "DELETE_FOLLOW": 85,
    "NOTIFIED_DELETE_FOLLOW": 86,
    "UPDATE_TIMELINE_SETTINGS": 87,
    "NOTIFIED_FRIEND_REQUEST": 88,
    "UPDATE_RINGBACK_TONE": 89,
    "NOTIFIED_POSTBACK": 90,
    "RECEIVE_READ_WATERMARK": 91,
    "NOTIFIED_MESSAGE_DELIVERED": 92,
    "NOTIFIED_UPDATE_CHAT_BAR": 93,
    "NOTIFIED_CHATAPP_INSTALLED": 94,
    "NOTIFIED_CHATAPP_UPDATED": 95,
    "NOTIFIED_CHATAPP_NEW_MARK": 96,
    "NOTIFIED_CHATAPP_DELETED": 97,
    "NOTIFIED_CHATAPP_SYNC": 98,
    "NOTIFIED_UPDATE_MESSAGE": 99,
    "UPDATE_CHATROOMBGM": 100,
    "NOTIFIED_UPDATE_CHATROOMBGM": 101,
    "UPDATE_RINGTONE": 102,
    "UPDATE_USER_SETTINGS": 118,
    "NOTIFIED_UPDATE_STATUS_BAR": 119,
    "CREATE_CHAT": 120,
    "UPDATE_CHAT": 121,
    "NOTIFIED_UPDATE_CHAT": 122,
    "INVITE_INTO_CHAT": 123,
    "NOTIFIED_INVITE_INTO_CHAT": 124,
    "CANCEL_CHAT_INVITATION": 125,
    "NOTIFIED_CANCEL_CHAT_INVITATION": 126,
    "DELETE_SELF_FROM_CHAT": 127,
    "NOTIFIED_DELETE_SELF_FROM_CHAT": 128,
    "ACCEPT_CHAT_INVITATION": 129,
    "NOTIFIED_ACCEPT_CHAT_INVITATION": 130,
    "REJECT_CHAT_INVITATION": 131,
    "DELETE_OTHER_FROM_CHAT": 132,
    "NOTIFIED_DELETE_OTHER_FROM_CHAT": 133,
    "NOTIFIED_CONTACT_CALENDAR_EVENT": 134,
    "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL": 135,
    "UPDATE_THINGS_OPERATIONS": 136,
    "SEND_CHAT_HIDDEN": 137,
    "CHAT_META_SYNC_ALL": 138,
    "SEND_REACTION": 139,
    "NOTIFIED_SEND_REACTION": 140,
    "NOTIFIED_UPDATE_PROFILE_CONTENT": 141,
    "FAILED_DELIVERY_MESSAGE": 142,
    "SEND_ENCRYPTED_E2EE_KEY_REQUESTED": 143,
    "CHANNEL_PAAK_AUTHENTICATION_REQUESTED": 144,
    "UPDATE_PIN_STATE": 145,
    "NOTIFIED_PREMIUMBACKUP_STATE_CHANGED": 146,
    "CREATE_MULTI_PROFILE": 147,
    "MULTI_PROFILE_STATUS_CHANGED": 148,
    "DELETE_MULTI_PROFILE": 149,
    "UPDATE_PROFILE_MAPPING": 150,
    "DELETE_PROFILE_MAPPING": 151,
    "NOTIFIED_DESTROY_NOTICENTER_PUSH": 152
  },
  "P70_g": {
    "INVALID_REQUEST": 1000,
    "RETRY_REQUIRED": 1001
  },
  "PaidCallType": {
    "OUT": 0,
    "IN": 1,
    "TOLLFREE": 2,
    "RECORD": 3,
    "AD": 4,
    "CS": 5,
    "OA": 6,
    "OAM": 7
  },
  "PayloadType": {
    "PAYLOAD_BUY": 101,
    "PAYLOAD_CS": 111,
    "PAYLOAD_BONUS": 121,
    "PAYLOAD_EVENT": 131,
    "PAYLOAD_POINT_AUTO_EXCHANGED": 141,
    "PAYLOAD_POINT_MANUAL_EXCHANGED": 151
  },
  "Pb1_A0": {
    "NORMAL": 0,
    "VIDEOCAM": 1,
    "VOIP": 2,
    "RECORD": 3
  },
  "Pb1_A3": {
    "UNKNOWN": 0,
    "BACKGROUND_NEW_KEY_CREATED": 1,
    "BACKGROUND_PERIODICAL_VERIFICATION": 2,
    "FOREGROUND_NEW_PIN_REGISTERED": 3,
    "FOREGROUND_VERIFICATION": 4
  },
  "Pb1_B": {
    "SIRI": 1,
    "GOOGLE_ASSISTANT": 2,
    "OS_SHARE": 3
  },
  "Pb1_D0": {
    "RICH_MENU_ID": 0,
    "STATUS_BAR": 1,
    "BUDDY_CAUTION_NOTICE": 2
  },
  "Pb1_D4": {
    "AUDIO": 1,
    "VIDEO": 2,
    "FACEPLAY": 3
  },
  "Pb1_D6": {
    "GOOGLE": 0,
    "BAIDU": 1,
    "FOURSQUARE": 2,
    "YAHOOJAPAN": 3,
    "KINGWAY": 4
  },
  "Pb1_E7": {
    "UNKNOWN": 0,
    "TALK": 1,
    "SQUARE": 2
  },
  "Pb1_EnumC12917a6": {
    "UNKNOWN": 0,
    "APP_FOREGROUND": 1,
    "PERIODIC": 2,
    "MANUAL": 3
  },
  "Pb1_EnumC12926b1": {
    "NOT_A_FRIEND": 0,
    "ALWAYS": 1
  },
  "Pb1_EnumC12941c2": {
    "BLE_LCS_API_USABLE": 26,
    "PROHIBIT_MINIMIZE_CHANNEL_BROWSER": 27,
    "ALLOW_IOS_WEBKIT": 28,
    "PURCHASE_LCS_API_USABLE": 38,
    "ALLOW_ANDROID_ENABLE_ZOOM": 48
  },
  "Pb1_EnumC12945c6": {
    "V1": 1,
    "V2": 2
  },
  "Pb1_EnumC12970e3": {
    "USER_AGE_CHECKED": 1,
    "USER_APPROVAL_REQUIRED": 2
  },
  "Pb1_EnumC12997g2": {
    "PROFILE": 0,
    "FRIENDS": 1,
    "GROUP": 2
  },
  "Pb1_EnumC12998g3": {
    "UNKNOWN": 0,
    "WIFI": 1,
    "CELLULAR_NETWORK": 2
  },
  "Pb1_EnumC13009h0": {
    "NORMAL": 1,
    "LOW_BATTERY": 2
  },
  "Pb1_EnumC13010h1": {
    "NEW": 1,
    "PLANET": 2
  },
  "Pb1_EnumC13015h6": {
    "FORWARD": 0,
    "AUTO_REPLY": 1,
    "SUBORDINATE": 2,
    "REPLY": 3
  },
  "Pb1_EnumC13022i": {
    "SKIP": 0,
    "PINCODE": 1,
    "SECURITY_CENTER": 2
  },
  "Pb1_EnumC13029i6": {
    "ADD": 0,
    "REMOVE": 1,
    "MODIFY": 2
  },
  "Pb1_EnumC13037j0": {
    "UNSPECIFIED": 0,
    "INACTIVE": 1,
    "ACTIVE": 2,
    "DELETED": 3
  },
  "Pb1_EnumC13050k": {
    "UNKNOWN": 0,
    "IOS_REDUCED_ACCURACY": 1,
    "IOS_FULL_ACCURACY": 2,
    "AOS_PRECISE_LOCATION": 3,
    "AOS_APPROXIMATE_LOCATION": 4
  },
  "Pb1_EnumC13082m3": {
    "SHOW": 0,
    "HIDE": 1
  },
  "Pb1_EnumC13093n0": {
    "NONE": 0,
    "TOP": 1
  },
  "Pb1_EnumC13127p6": {
    "NORMAL": 0,
    "ALERT_DISABLED": 1,
    "ALWAYS": 2
  },
  "Pb1_EnumC13128p7": {
    "UNKNOWN": 0,
    "DIRECT_INVITATION": 1,
    "DIRECT_CHAT": 2,
    "GROUP_INVITATION": 3,
    "GROUP_CHAT": 4,
    "ROOM_INVITATION": 5,
    "ROOM_CHAT": 6,
    "FRIEND_PROFILE": 7,
    "DIRECT_CHAT_SELECTED": 8,
    "GROUP_CHAT_SELECTED": 9,
    "ROOM_CHAT_SELECTED": 10,
    "DEPRECATED": 11
  },
  "Pb1_EnumC13148r0": {
    "ALWAYS_HIDDEN": 1,
    "ALWAYS_SHOWN": 2,
    "SHOWN_BY_CONDITION": 3
  },
  "Pb1_EnumC13151r3": {
    "ONEWAY": 0,
    "BOTH": 1,
    "NOT_REGISTERED": 2
  },
  "Pb1_EnumC13162s0": {
    "NOT_SUSPICIOUS": 1,
    "SUSPICIOUS_00": 2,
    "SUSPICIOUS_01": 3
  },
  "Pb1_EnumC13196u6": {
    "COIN": 0,
    "CREDIT": 1,
    "MONTHLY": 2,
    "OAM": 3
  },
  "Pb1_EnumC13209v5": {
    "DUMMY": 0,
    "NOTICE": 1,
    "MORETAB": 2,
    "STICKERSHOP": 3,
    "CHANNEL": 4,
    "DENY_KEYWORD": 5,
    "CONNECTIONINFO": 6,
    "BUDDY": 7,
    "TIMELINEINFO": 8,
    "THEMESHOP": 9,
    "CALLRATE": 10,
    "CONFIGURATION": 11,
    "STICONSHOP": 12,
    "SUGGESTDICTIONARY": 13,
    "SUGGESTSETTINGS": 14,
    "USERSETTINGS": 15,
    "ANALYTICSINFO": 16,
    "SEARCHPOPULARKEYWORD": 17,
    "SEARCHNOTICE": 18,
    "TIMELINE": 19,
    "SEARCHPOPULARCATEGORY": 20,
    "EXTENDEDPROFILE": 21,
    "SEASONALMARKETING": 22,
    "NEWSTAB": 23,
    "SUGGESTDICTIONARYV2": 24,
    "CHATAPPSYNC": 25,
    "AGREEMENTS": 26,
    "INSTANTNEWS": 27,
    "EMOJI_MAPPING": 28,
    "SEARCHBARKEYWORDS": 29,
    "SHOPPING": 30,
    "CHAT_EFFECT_BACKGROUND": 31,
    "CHAT_EFFECT_KEYWORD": 32,
    "SEARCHINDEX": 33,
    "HUBTAB": 34,
    "PAY_RULE_UPDATED": 35,
    "SMARTCH": 36,
    "HOME_SERVICE_LIST": 37,
    "TIMELINESTORY": 38,
    "WALLET_TAB": 39,
    "POD_TAB": 40,
    "HOME_SAFETY_CHECK": 41,
    "HOME_SEASONAL_EFFECT": 42,
    "OPENCHAT_MAIN": 43,
    "CHAT_EFFECT_CONTENT_METADATA_TAG": 44,
    "VOOM_LIVE_STATE_CHANGED": 45,
    "PROFILE_STUDIO_N_BADGE": 46,
    "LYP_FONT": 47,
    "TIMELINESTORY_OA": 48,
    "TRAVEL": 49
  },
  "Pb1_EnumC13221w3": {
    "UNKNOWN": 0,
    "EUROPEAN_ECONOMIC_AREA": 1
  },
  "Pb1_EnumC13222w4": {
    "OBS_VIDEO": 1,
    "OBS_GENERAL": 2,
    "OBS_RINGBACK_TONE": 3
  },
  "Pb1_EnumC13237x5": {
    "AUDIO": 1,
    "VIDEO": 2,
    "LIVE": 3,
    "PHOTOBOOTH": 4
  },
  "Pb1_EnumC13238x6": {
    "NOT_SPECIFIED": 0,
    "VALID": 1,
    "VERIFICATION_REQUIRED": 2,
    "NOT_PERMITTED": 3,
    "LIMIT_EXCEEDED": 4,
    "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 5
  },
  "Pb1_EnumC13251y5": {
    "STANDARD": 1,
    "CONSTELLA": 2
  },
  "Pb1_EnumC13252y6": {
    "ALL": 0,
    "PROFILE": 1,
    "SETTINGS": 2,
    "CONFIGURATIONS": 3,
    "CONTACT": 4,
    "GROUP": 5,
    "E2EE": 6,
    "MESSAGE": 7
  },
  "Pb1_EnumC13260z0": {
    "ON_AIR": 0,
    "LIVE": 1,
    "GLP": 2
  },
  "Pb1_EnumC13267z7": {
    "NOTIFICATION_SETTING": 1,
    "ALL": 255
  },
  "Pb1_F0": {
    "NA": 0,
    "FRIEND_VIEW": 1,
    "OFFICIAL_ACCOUNT_VIEW": 2
  },
  "Pb1_F4": {
    "INCOMING": 1,
    "OUTGOING": 2
  },
  "Pb1_F5": {
    "UNKNOWN": 0,
    "SUCCESS": 1,
    "REQUIRE_SERVER_SIDE_EMAIL": 2,
    "REQUIRE_CLIENT_SIDE_EMAIL": 3
  },
  "Pb1_F6": {
    "JBU": 0,
    "LIP": 1
  },
  "Pb1_G3": {
    "PROMOTION_FRIENDS_INVITE": 1,
    "CAPABILITY_SERVER_SIDE_SMS": 2,
    "LINE_CLIENT_ANALYTICS_CONFIGURATION": 3
  },
  "Pb1_G4": {
    "TIMELINE": 1,
    "NEARBY": 2,
    "SQUARE": 3
  },
  "Pb1_G6": {
    "NICE": 2,
    "LOVE": 3,
    "FUN": 4,
    "AMAZING": 5,
    "SAD": 6,
    "OMG": 7
  },
  "Pb1_H6": {
    "PUBLIC": 0,
    "PRIVATE": 1
  },
  "Pb1_I6": {
    "NEVER_SHOW": 0,
    "ONE_WAY": 1,
    "MUTUAL": 2
  },
  "Pb1_J4": {
    "OTHER": 0,
    "INITIALIZATION": 1,
    "PERIODIC_SYNC": 2,
    "MANUAL_SYNC": 3,
    "LOCAL_DB_CORRUPTED": 4
  },
  "Pb1_K2": {
    "CHANNEL_INFO": 1,
    "CHANNEL_TOKEN": 2,
    "COMMON_DOMAIN": 4,
    "ALL": 255
  },
  "Pb1_K6": {
    "EMAIL": 1,
    "DISPLAY_NAME": 2,
    "PHONETIC_NAME": 4,
    "PICTURE": 8,
    "STATUS_MESSAGE": 16,
    "ALLOW_SEARCH_BY_USERID": 32,
    "ALLOW_SEARCH_BY_EMAIL": 64,
    "BUDDY_STATUS": 128,
    "MUSIC_PROFILE": 256,
    "AVATAR_PROFILE": 512,
    "ALL": 2147483647
  },
  "Pb1_L2": {
    "SYNC": 0,
    "REMOVE": 1,
    "REMOVE_ALL": 2
  },
  "Pb1_L4": {
    "UNKNOWN": 0,
    "REVISION_GAP_TOO_LARGE_CLIENT": 1,
    "REVISION_GAP_TOO_LARGE_SERVER": 2,
    "OPERATION_EXPIRED": 3,
    "REVISION_HOLE": 4,
    "FORCE_TRIGGERED": 5
  },
  "Pb1_M6": {
    "OWNER": 0,
    "FRIEND": 1
  },
  "Pb1_N6": {
    "NFT": 1,
    "AVATAR": 2,
    "SNOW": 3,
    "ARCZ": 4,
    "FRENZ": 5
  },
  "Pb1_O2": {
    "NAME": 1,
    "PICTURE_STATUS": 2,
    "PREVENTED_JOIN_BY_TICKET": 4,
    "NOTIFICATION_SETTING": 8,
    "INVITATION_TICKET": 16,
    "FAVORITE_TIMESTAMP": 32,
    "CHAT_TYPE": 64
  },
  "Pb1_O6": {
    "DEFAULT": 1,
    "MULTI_PROFILE": 2
  },
  "Pb1_P6": {
    "HIDDEN": 0,
    "PUBLIC": 1000
  },
  "Pb1_Q2": {
    "BACKGROUND": 0,
    "KEYWORD": 1,
    "CONTENT_METADATA_TAG_BASED": 2
  },
  "Pb1_R3": {
    "BEACON_AGREEMENT": 1,
    "BLUETOOTH": 2,
    "SHAKE_AGREEMENT": 3,
    "AUTO_SUGGEST": 4,
    "CHATROOM_CAPTURE": 5,
    "CHATROOM_MINIMIZEBROWSER": 6,
    "CHATROOM_MOBILESAFARI": 7,
    "VIDEO_HIGHTLIGHT_WIZARD": 8,
    "CHAT_FOLDER": 9,
    "BLUETOOTH_SCAN": 10,
    "AUTO_SUGGEST_FOLLOW_UP": 11
  },
  "Pb1_S7": {
    "NONE": 1,
    "ALL": 2
  },
  "Pb1_T3": {
    "LOCATION_OS": 1,
    "LOCATION_APP": 2,
    "VIDEO_AUTO_PLAY": 3,
    "HNI": 4,
    "AUTO_SUGGEST_LANG": 5,
    "CHAT_EFFECT_CACHED_CONTENT_LIST": 6,
    "IFA": 7,
    "ACCURACY_MODE": 8
  },
  "Pb1_T7": {
    "SYNC": 0,
    "REPORT": 1
  },
  "Pb1_V7": {
    "UNSPECIFIED": 0,
    "UNKNOWN": 1,
    "INITIALIZATION": 2,
    "OPERATION": 3,
    "FULL_SYNC": 4,
    "AUTO_REPAIR": 5,
    "MANUAL_REPAIR": 6,
    "INTERNAL": 7,
    "USER_INITIATED": 8
  },
  "Pb1_W2": {
    "ANYONE_IN_CHAT": 0,
    "CREATOR_ONLY": 1,
    "NO_ONE": 2
  },
  "Pb1_W3": {
    "ILLEGAL_ARGUMENT": 0,
    "AUTHENTICATION_FAILED": 1,
    "INTERNAL_ERROR": 2,
    "RESTORE_KEY_FIRST": 3,
    "NO_BACKUP": 4,
    "INVALID_PIN": 6,
    "PERMANENTLY_LOCKED": 7,
    "INVALID_PASSWORD": 8,
    "MASTER_KEY_CONFLICT": 9
  },
  "Pb1_X1": {
    "MESSAGE": 0,
    "MESSAGE_NOTIFICATION": 1,
    "NOTIFICATION_CENTER": 2
  },
  "Pb1_X2": {
    "MESSAGE": 0,
    "NOTE": 1,
    "CHANNEL": 2
  },
  "Pb1_Z2": {
    "GROUP": 0,
    "ROOM": 1,
    "PEER": 2
  },
  "Pb1_gd": {
    "OVER": 1,
    "UNDER": 2,
    "UNDEFINED": 3
  },
  "Pb1_od": {
    "UNKNOWN": 0,
    "LOCATION": 1
  },
  "PointErrorCode": {
    "REQUEST_DUPLICATION": 3001,
    "INVALID_PARAMETER": 3002,
    "NOT_ENOUGH_BALANCE": 3003,
    "AUTHENTICATION_FAIL": 3004,
    "API_ACCESS_FORBIDDEN": 3005,
    "MEMBER_ACCOUNT_NOT_FOUND": 3006,
    "SERVICE_ACCOUNT_NOT_FOUND": 3007,
    "TRANSACTION_NOT_FOUND": 3008,
    "ALREADY_REVERSED_TRANSACTION": 3009,
    "MESSAGE_NOT_READABLE": 3010,
    "HTTP_REQUEST_METHOD_NOT_SUPPORTED": 3011,
    "HTTP_MEDIA_TYPE_NOT_SUPPORTED": 3012,
    "NOT_ALLOWED_TO_DEPOSIT": 3013,
    "NOT_ALLOWED_TO_PAY": 3014,
    "TRANSACTION_ACCESS_FORBIDDEN": 3015,
    "INVALID_SERVICE_CONFIGURATION": 4001,
    "DCS_COMMUNICATION_FAIL": 5004,
    "UPDATE_BALANCE_FAIL": 5007,
    "SYSTEM_MAINTENANCE": 5888,
    "SYSTEM_ERROR": 5999
  },
  "Q70_q": {
    "UNKNOWN": 0,
    "FACEBOOK": 1,
    "APPLE": 2,
    "GOOGLE": 3
  },
  "Q70_r": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "RETRY_LATER": 4,
    "HUMAN_VERIFICATION_REQUIRED": 5,
    "APP_UPGRADE_REQUIRED": 101
  },
  "Qj_EnumC13584a": {
    "NOT_DETERMINED": 0,
    "RESTRICTED": 1,
    "DENIED": 2,
    "AUTHORIZED": 3
  },
  "Qj_EnumC13585b": {
    "WHITE": 1,
    "BLACK": 2
  },
  "Qj_EnumC13588e": {
    "LIGHT": 1,
    "DARK": 2
  },
  "Qj_EnumC13592i": {
    "ILLEGAL_ARGUMENT": 0,
    "INTERNAL_ERROR": 1,
    "CONNECTION_ERROR": 2,
    "AUTHENTICATION_FAILED": 3,
    "NEED_PERMISSION_APPROVAL": 4,
    "COIN_NOT_USABLE": 5,
    "WEBVIEW_NOT_ALLOWED": 6
  },
  "Qj_EnumC13597n": {
    "INVALID_REQUEST": 1,
    "UNAUTHORIZED": 2,
    "CONSENT_REQUIRED": 3,
    "VERSION_UPDATE_REQUIRED": 4,
    "COMPREHENSIVE_AGREEMENT_REQUIRED": 5,
    "SPLASH_SCREEN_REQUIRED": 6,
    "PERMANENT_LINK_INVALID_REQUEST": 7,
    "NO_DESTINATION_URL": 8,
    "SERVICE_ALREADY_TERMINATED": 9,
    "SERVER_ERROR": 100
  },
  "Qj_EnumC13604v": {
    "GEOLOCATION": 1,
    "ADVERTISING_ID": 2,
    "BLUETOOTH_LE": 3,
    "QR_CODE": 4,
    "ADVERTISING_SDK": 5,
    "ADD_TO_HOME": 6,
    "SHARE_TARGET_MESSAGE": 7,
    "VIDEO_AUTO_PLAY": 8,
    "PROFILE_PLUS": 9,
    "SUBWINDOW_OPEN": 10,
    "SUBWINDOW_COMMON_MODULE": 11,
    "NO_LIFF_REFERRER": 12,
    "SKIP_CHANNEL_VERIFICATION_SCREEN": 13,
    "PROVIDER_PAGE": 14,
    "BASIC_AUTH": 15,
    "SIRI_DONATION": 16
  },
  "Qj_EnumC13605w": {
    "ALLOW_DIRECT_LINK": 1,
    "ALLOW_DIRECT_LINK_V2": 2
  },
  "Qj_EnumC13606x": {
    "LIGHT": 1,
    "LIGHT_TRANSLUCENT": 2,
    "DARK_TRANSLUCENT": 3,
    "LIGHT_ICON": 4,
    "DARK_ICON": 5
  },
  "Qj_a0": {
    "CONCAT": 1,
    "REPLACE": 2
  },
  "Qj_e0": {
    "SUCCESS": 0,
    "FAILURE": 1,
    "CANCEL": 2
  },
  "Qj_h0": {
    "RIGHT": 1,
    "LEFT": 2
  },
  "Qj_i0": {
    "FULL": 1,
    "TALL": 2,
    "COMPACT": 3
  },
  "R70_e": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "EXTERNAL_SERVICE_UNAVAILABLE": 3,
    "RETRY_LATER": 4,
    "INVALID_CONTEXT": 100,
    "NOT_SUPPORTED": 101,
    "FORBIDDEN": 102,
    "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR": 201
  },
  "RegistrationType": {
    "PHONE": 0,
    "EMAIL_WAP": 1,
    "FACEBOOK": 2305,
    "SINA": 2306,
    "RENREN": 2307,
    "FEIXIN": 2308,
    "APPLE": 2309,
    "YAHOOJAPAN": 2310,
    "GOOGLE": 2311
  },
  "ReportType": {
    "ADVERTISING": 1,
    "GENDER_HARASSMENT": 2,
    "HARASSMENT": 3,
    "OTHER": 4,
    "IRRELEVANT_CONTENT": 5,
    "IMPERSONATION": 6,
    "SCAM": 7
  },
  "S70_a": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "RETRY_LATER": 3,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101
  },
  "SettingsAttributeEx": {
    "NOTIFICATION_ENABLE": 0,
    "NOTIFICATION_MUTE_EXPIRATION": 1,
    "NOTIFICATION_NEW_MESSAGE": 2,
    "NOTIFICATION_GROUP_INVITATION": 3,
    "NOTIFICATION_SHOW_MESSAGE": 4,
    "NOTIFICATION_INCOMING_CALL": 5,
    "PRIVACY_SYNC_CONTACTS": 6,
    "PRIVACY_SEARCH_BY_PHONE_NUMBER": 7,
    "NOTIFICATION_SOUND_MESSAGE": 8,
    "NOTIFICATION_SOUND_GROUP": 9,
    "CONTACT_MY_TICKET": 10,
    "IDENTITY_PROVIDER": 11,
    "IDENTITY_IDENTIFIER": 12,
    "PRIVACY_SEARCH_BY_USERID": 13,
    "PRIVACY_SEARCH_BY_EMAIL": 14,
    "PREFERENCE_LOCALE": 15,
    "NOTIFICATION_DISABLED_WITH_SUB": 16,
    "NOTIFICATION_PAYMENT": 17,
    "SECURITY_CENTER_SETTINGS": 18,
    "SNS_ACCOUNT": 19,
    "PHONE_REGISTRATION": 20,
    "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": 21,
    "CUSTOM_MODE": 22,
    "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": 23,
    "EMAIL_CONFIRMATION_STATUS": 24,
    "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": 25,
    "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": 26,
    "PRIVACY_AGREE_USE_PAIDCALL": 27,
    "ACCOUNT_MIGRATION_PINCODE": 28,
    "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": 29,
    "PRIVACY_ALLOW_FRIEND_REQUEST": 30,
    "PWLESS_PRIMARY_CREDENTIAL_REGISTRATION": 31,
    "ALLOWED_TO_CONNECT_EAP_ACCOUNT": 32,
    "E2EE_ENABLE": 33,
    "HITOKOTO_BACKUP_REQUESTED": 34,
    "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": 35,
    "CONTACT_ALLOW_FOLLOWING": 36,
    "PRIVACY_ALLOW_NEARBY": 37,
    "AGREEMENT_NEARBY": 38,
    "AGREEMENT_SQUARE": 39,
    "NOTIFICATION_MENTION": 40,
    "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": 41,
    "AGREEMENT_BOT_USE": 42,
    "AGREEMENT_SHAKE_FUNCTION": 43,
    "AGREEMENT_MOBILE_CONTACT_NAME": 44,
    "NOTIFICATION_THUMBNAIL": 45,
    "AGREEMENT_SOUND_TO_TEXT": 46,
    "AGREEMENT_PRIVACY_POLICY_VERSION": 47,
    "AGREEMENT_AD_BY_WEB_ACCESS": 48,
    "AGREEMENT_PHONE_NUMBER_MATCHING": 49,
    "AGREEMENT_COMMUNICATION_INFO": 50,
    "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS": 51,
    "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": 52,
    "AGREEMENT_GDPR": 53,
    "PRIVACY_STATUS_MESSAGE_HISTORY": 54,
    "AGREEMENT_PROVIDE_LOCATION": 55,
    "AGREEMENT_BEACON": 56,
    "PRIVACY_PROFILE_HISTORY": 57,
    "AGREEMENT_CONTENTS_SUGGEST": 58,
    "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": 59,
    "PRIVACY_AGE_RESULT": 60,
    "PRIVACY_AGE_RESULT_RECEIVED": 61,
    "AGREEMENT_OCR_IMAGE_COLLECTION": 62,
    "PRIVACY_ALLOW_FOLLOW": 63,
    "PRIVACY_SHOW_FOLLOW_LIST": 64,
    "NOTIFICATION_BADGE_TALK_ONLY": 65,
    "AGREEMENT_ICNA": 66,
    "NOTIFICATION_REACTION": 67,
    "AGREEMENT_MID": 68,
    "HOME_NOTIFICATION_NEW_FRIEND": 69,
    "HOME_NOTIFICATION_FAVORITE_FRIEND_UPDATE": 70,
    "HOME_NOTIFICATION_GROUP_MEMBER_UPDATE": 71,
    "HOME_NOTIFICATION_BIRTHDAY": 72,
    "AGREEMENT_LINE_OUT_USE": 73,
    "AGREEMENT_LINE_OUT_PROVIDE_INFO": 74,
    "NOTIFICATION_SHOW_PROFILE_IMAGE": 75,
    "AGREEMENT_PDPA": 76,
    "AGREEMENT_LOCATION_VERSION": 77,
    "ALLOWED_TO_SHOW_ZHD_PAGE": 78,
    "AGREEMENT_SNOW_AI_AVATAR": 79,
    "EAP_ONLY_ACCOUNT_TARGET_COUNTRY": 80,
    "AGREEMENT_LYP_PREMIUM_ALBUM": 81,
    "AGREEMENT_LYP_PREMIUM_ALBUM_VERSION": 82,
    "AGREEMENT_ALBUM_USAGE_DATA": 83,
    "AGREEMENT_ALBUM_USAGE_DATA_VERSION": 84,
    "AGREEMENT_LYP_PREMIUM_BACKUP": 85,
    "AGREEMENT_LYP_PREMIUM_BACKUP_VERSION": 86,
    "AGREEMENT_OA_AI_ASSISTANT": 87,
    "AGREEMENT_OA_AI_ASSISTANT_VERSION": 88,
    "AGREEMENT_LYP_PREMIUM_MULTI_PROFILE": 89,
    "AGREEMENT_LYP_PREMIUM_MULTI_PROFILE_VERSION": 90
  },
  "SnsIdType": {
    "FACEBOOK": 1,
    "SINA": 2,
    "RENREN": 3,
    "FEIXIN": 4,
    "BBM": 5,
    "APPLE": 6,
    "YAHOOJAPAN": 7,
    "GOOGLE": 8
  },
  "SpammerReason": {
    "OTHER": 0,
    "ADVERTISING": 1,
    "GENDER_HARASSMENT": 2,
    "HARASSMENT": 3,
    "IMPERSONATION": 4,
    "SCAM": 5
  },
  "SpotCategory": {
    "UNKNOWN": 0,
    "GOURMET": 1,
    "BEAUTY": 2,
    "TRAVEL": 3,
    "SHOPPING": 4,
    "ENTERTAINMENT": 5,
    "SPORTS": 6,
    "TRANSPORT": 7,
    "LIFE": 8,
    "HOSPITAL": 9,
    "FINANCE": 10,
    "EDUCATION": 11,
    "OTHER": 12,
    "ALL": 10000
  },
  "SquareAttribute": {
    "NAME": 1,
    "WELCOME_MESSAGE": 2,
    "PROFILE_IMAGE": 3,
    "DESCRIPTION": 4,
    "SEARCHABLE": 6,
    "CATEGORY": 7,
    "INVITATION_URL": 8,
    "ABLE_TO_USE_INVITATION_URL": 9,
    "STATE": 10,
    "EMBLEMS": 11,
    "JOIN_METHOD": 12,
    "CHANNEL_ID": 13,
    "SVC_TAGS": 14
  },
  "SquareAuthorityAttribute": {
    "UPDATE_SQUARE_PROFILE": 1,
    "INVITE_NEW_MEMBER": 2,
    "APPROVE_JOIN_REQUEST": 3,
    "CREATE_POST": 4,
    "CREATE_OPEN_SQUARE_CHAT": 5,
    "DELETE_SQUARE_CHAT_OR_POST": 6,
    "REMOVE_SQUARE_MEMBER": 7,
    "GRANT_ROLE": 8,
    "ENABLE_INVITATION_TICKET": 9,
    "CREATE_CHAT_ANNOUNCEMENT": 10,
    "UPDATE_MAX_CHAT_MEMBER_COUNT": 11,
    "USE_READONLY_DEFAULT_CHAT": 12,
    "SEND_ALL_MENTION": 13
  },
  "SquareChatType": {
    "OPEN": 1,
    "SECRET": 2,
    "ONE_ON_ONE": 3,
    "SQUARE_DEFAULT": 4
  },
  "SquareMemberAttribute": {
    "DISPLAY_NAME": 1,
    "PROFILE_IMAGE": 2,
    "ABLE_TO_RECEIVE_MESSAGE": 3,
    "MEMBERSHIP_STATE": 5,
    "ROLE": 6,
    "PREFERENCE": 7
  },
  "SquareMembershipState": {
    "JOIN_REQUESTED": 1,
    "JOINED": 2,
    "REJECTED": 3,
    "LEFT": 4,
    "KICK_OUT": 5,
    "BANNED": 6,
    "DELETED": 7,
    "JOIN_REQUEST_WITHDREW": 8
  },
  "StickerResourceType": {
    "STATIC": 1,
    "ANIMATION": 2,
    "SOUND": 3,
    "ANIMATION_SOUND": 4,
    "POPUP": 5,
    "POPUP_SOUND": 6,
    "NAME_TEXT": 7,
    "PER_STICKER_TEXT": 8
  },
  "SyncCategory": {
    "PROFILE": 0,
    "SETTINGS": 1,
    "OPS": 2,
    "CONTACT": 3,
    "RECOMMEND": 4,
    "BLOCK": 5,
    "GROUP": 6,
    "ROOM": 7,
    "NOTIFICATION": 8,
    "ADDRESS_BOOK": 9
  },
  "T70_C": {
    "INITIAL_BACKUP_STATE_UNSPECIFIED": 0,
    "INITIAL_BACKUP_STATE_READY": 1,
    "INITIAL_BACKUP_STATE_MESSAGE_ONGOING": 2,
    "INITIAL_BACKUP_STATE_FINISHED": 3,
    "INITIAL_BACKUP_STATE_ABORTED": 4,
    "INITIAL_BACKUP_STATE_MEDIA_ONGOING": 5
  },
  "T70_EnumC14390b": {
    "UNKNOWN": 0,
    "PHONE_NUMBER": 1,
    "EMAIL": 2
  },
  "T70_EnumC14392c": {
    "UNKNOWN": 0,
    "SKIP": 1,
    "PASSWORD": 2,
    "WEB_BASED": 3,
    "EMAIL_BASED": 4,
    "NONE": 11
  },
  "T70_EnumC14406j": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "NOT_FOUND": 3,
    "RETRY_LATER": 4,
    "HUMAN_VERIFICATION_REQUIRED": 5,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101
  },
  "T70_K": {
    "UNKNOWN": 0,
    "SMS": 1,
    "IVR": 2,
    "SMSPULL": 3
  },
  "T70_L": {
    "PREMIUM_TYPE_UNSPECIFIED": 0,
    "PREMIUM_TYPE_LYP": 1,
    "PREMIUM_TYPE_LINE": 2
  },
  "T70_Z0": {
    "PHONE_VERIF": 1,
    "EAP_VERIF": 2
  },
  "T70_e1": {
    "UNKNOWN": 0,
    "SKIP": 1,
    "WEB_BASED": 2
  },
  "T70_j1": {
    "UNKNOWN": 0,
    "FACEBOOK": 1,
    "APPLE": 2,
    "GOOGLE": 3
  },
  "U70_c": {
    "INTERNAL_ERROR": 0,
    "FORBIDDEN": 1,
    "INVALID_CONTEXT": 100
  },
  "Uf_EnumC14873o": {
    "ANDROID": 1,
    "IOS": 2
  },
  "VR0_l": {
    "DEFAULT": 1,
    "UEN": 2
  },
  "VerificationMethod": {
    "NO_AVAILABLE": 0,
    "PIN_VIA_SMS": 1,
    "CALLERID_INDIGO": 2,
    "PIN_VIA_TTS": 4,
    "SKIP": 10
  },
  "VerificationResult": {
    "FAILED": 0,
    "OK_NOT_REGISTERED_YET": 1,
    "OK_REGISTERED_WITH_SAME_DEVICE": 2,
    "OK_REGISTERED_WITH_ANOTHER_DEVICE": 3
  },
  "WR0_a": {
    "FREE": 1,
    "PREMIUM": 2
  },
  "a80_EnumC16644b": {
    "UNKNOWN": 0,
    "FACEBOOK": 1,
    "APPLE": 2,
    "GOOGLE": 3
  },
  "FetchDirection": {
    "FORWARD": 1,
    "BACKWARD": 2
  },
  "LiveTalkEventType": {
    "NOTIFIED_UPDATE_LIVE_TALK_TITLE": 1,
    "NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT": 2,
    "NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE": 3,
    "NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK": 4,
    "NOTIFIED_UPDATE_SQUARE_MEMBER": 5
  },
  "LiveTalkReportType": {
    "ADVERTISING": 1,
    "GENDER_HARASSMENT": 2,
    "HARASSMENT": 3,
    "IRRELEVANT_CONTENT": 4,
    "OTHER": 5,
    "IMPERSONATION": 6,
    "SCAM": 7
  },
  "MessageSummaryReportType": {
    "LEGAL_VIOLATION": 1,
    "HARASSMENT": 2,
    "PERSONAL_IDENTIFIER": 3,
    "FALSE_INFORMATION": 4,
    "GENDER_HARASSMENT": 5,
    "OTHER": 6
  },
  "NotificationPostType": {
    "POST_MENTION": 2,
    "POST_LIKE": 3,
    "POST_COMMENT": 4,
    "POST_COMMENT_MENTION": 5,
    "POST_COMMENT_LIKE": 6,
    "POST_RELAY_JOIN": 7
  },
  "SquareEventStatus": {
    "NORMAL": 1,
    "ALERT_DISABLED": 2
  },
  "SquareEventType": {
    "RECEIVE_MESSAGE": 0,
    "SEND_MESSAGE": 1,
    "NOTIFIED_JOIN_SQUARE_CHAT": 2,
    "NOTIFIED_INVITE_INTO_SQUARE_CHAT": 3,
    "NOTIFIED_LEAVE_SQUARE_CHAT": 4,
    "NOTIFIED_DESTROY_MESSAGE": 5,
    "NOTIFIED_MARK_AS_READ": 6,
    "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE": 7,
    "NOTIFIED_UPDATE_SQUARE": 8,
    "NOTIFIED_UPDATE_SQUARE_STATUS": 9,
    "NOTIFIED_UPDATE_SQUARE_AUTHORITY": 10,
    "NOTIFIED_UPDATE_SQUARE_MEMBER": 11,
    "NOTIFIED_UPDATE_SQUARE_CHAT": 12,
    "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS": 13,
    "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER": 14,
    "NOTIFIED_CREATE_SQUARE_MEMBER": 15,
    "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER": 16,
    "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION": 17,
    "NOTIFIED_SHUTDOWN_SQUARE": 18,
    "NOTIFIED_KICKOUT_FROM_SQUARE": 19,
    "NOTIFIED_DELETE_SQUARE_CHAT": 20,
    "NOTIFICATION_JOIN_REQUEST": 21,
    "NOTIFICATION_JOINED": 22,
    "NOTIFICATION_PROMOTED_COADMIN": 23,
    "NOTIFICATION_PROMOTED_ADMIN": 24,
    "NOTIFICATION_DEMOTED_MEMBER": 25,
    "NOTIFICATION_KICKED_OUT": 26,
    "NOTIFICATION_SQUARE_DELETE": 27,
    "NOTIFICATION_SQUARE_CHAT_DELETE": 28,
    "NOTIFICATION_MESSAGE": 29,
    "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME": 30,
    "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE": 31,
    "NOTIFIED_UPDATE_SQUARE_FEATURE_SET": 32,
    "NOTIFIED_ADD_BOT": 33,
    "NOTIFIED_REMOVE_BOT": 34,
    "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS": 36,
    "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT": 37,
    "NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT": 38,
    "NOTIFICATION_POST_ANNOUNCEMENT": 39,
    "NOTIFICATION_POST": 40,
    "MUTATE_MESSAGE": 41,
    "NOTIFICATION_NEW_CHAT_MEMBER": 42,
    "NOTIFIED_UPDATE_READONLY_CHAT": 43,
    "NOTIFIED_UPDATE_MESSAGE_STATUS": 46,
    "NOTIFICATION_MESSAGE_REACTION": 47,
    "NOTIFIED_CHAT_POPUP": 48,
    "NOTIFIED_SYSTEM_MESSAGE": 49,
    "NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET": 50,
    "NOTIFIED_UPDATE_LIVE_TALK": 51,
    "NOTIFICATION_LIVE_TALK": 52,
    "NOTIFIED_UPDATE_LIVE_TALK_INFO": 53,
    "NOTIFICATION_THREAD_MESSAGE": 54,
    "NOTIFICATION_THREAD_MESSAGE_REACTION": 55,
    "NOTIFIED_UPDATE_THREAD": 56,
    "NOTIFIED_UPDATE_THREAD_STATUS": 57,
    "NOTIFIED_UPDATE_THREAD_MEMBER": 58,
    "NOTIFIED_UPDATE_THREAD_ROOT_MESSAGE": 59,
    "NOTIFIED_UPDATE_THREAD_ROOT_MESSAGE_STATUS": 60
  },
  "AdScreen": {
    "CHATROOM": 1,
    "THREAD_SPACE": 2,
    "YOUR_THREADS": 3,
    "NOTE_LIST": 4,
    "NOTE_END": 5,
    "WEB_MAIN": 6,
    "WEB_SEARCH_RESULT": 7
  },
  "BooleanState": {
    "NONE": 0,
    "OFF": 1,
    "ON": 2
  },
  "ChatroomPopupType": {
    "IMG_TEXT": 1,
    "TEXT_ONLY": 2,
    "IMG_ONLY": 3
  },
  "ContentsAttribute": {
    "NONE": 1,
    "CONTENTS_HIDDEN": 2
  },
  "FetchType": {
    "DEFAULT": 1,
    "PREFETCH_BY_SERVER": 2,
    "PREFETCH_BY_CLIENT": 3
  },
  "LiveTalkAttribute": {
    "TITLE": 1,
    "ALLOW_REQUEST_TO_SPEAK": 2
  },
  "LiveTalkRole": {
    "HOST": 1,
    "CO_HOST": 2,
    "GUEST": 3
  },
  "LiveTalkSpeakerSetting": {
    "APPROVAL": 1,
    "ALL": 2
  },
  "LiveTalkType": {
    "PUBLIC": 1,
    "PRIVATE": 2
  },
  "MessageReactionType": {
    "ALL": 0,
    "UNDO": 1,
    "NICE": 2,
    "LOVE": 3,
    "FUN": 4,
    "AMAZING": 5,
    "SAD": 6,
    "OMG": 7
  },
  "NotifiedMessageType": {
    "MENTION": 1,
    "REPLY": 2
  },
  "PopupAttribute": {
    "NAME": 1,
    "ACTIVATED": 2,
    "STARTS_AT": 3,
    "ENDS_AT": 4,
    "CONTENT": 5
  },
  "PopupType": {
    "MAIN": 1,
    "CHATROOM": 2
  },
  "SquareChatAttribute": {
    "NAME": 2,
    "SQUARE_CHAT_IMAGE": 3,
    "STATE": 4,
    "TYPE": 5,
    "MAX_MEMBER_COUNT": 6,
    "MESSAGE_VISIBILITY": 7,
    "ABLE_TO_SEARCH_MESSAGE": 8
  },
  "SquareChatFeatureControlState": {
    "DISABLED": 1,
    "ENABLED": 2
  },
  "SquareChatMemberAttribute": {
    "MEMBERSHIP_STATE": 4,
    "NOTIFICATION_MESSAGE": 6,
    "NOTIFICATION_NEW_MEMBER": 7,
    "LEFT_BY_KICK_MESSAGE_LOCAL_ID": 8,
    "MESSAGE_LOCAL_ID_WHEN_BLOCK": 9
  },
  "SquareChatMembershipState": {
    "JOINED": 1,
    "LEFT": 2
  },
  "SquareChatState": {
    "ALIVE": 0,
    "DELETED": 1,
    "SUSPENDED": 2
  },
  "SquareEmblem": {
    "SUPER": 1,
    "OFFICIAL": 2
  },
  "SquareErrorCode": {
    "UNKNOWN": 0,
    "ILLEGAL_ARGUMENT": 400,
    "AUTHENTICATION_FAILURE": 401,
    "FORBIDDEN": 403,
    "NOT_FOUND": 404,
    "REVISION_MISMATCH": 409,
    "PRECONDITION_FAILED": 410,
    "INTERNAL_ERROR": 500,
    "NOT_IMPLEMENTED": 501,
    "TRY_AGAIN_LATER": 503,
    "MAINTENANCE": 505,
    "NO_PRESENCE_EXISTS": 506
  },
  "SquareFeatureControlState": {
    "DISABLED": 1,
    "ENABLED": 2
  },
  "SquareFeatureSetAttribute": {
    "CREATING_SECRET_SQUARE_CHAT": 1,
    "INVITING_INTO_OPEN_SQUARE_CHAT": 2,
    "CREATING_SQUARE_CHAT": 3,
    "READONLY_DEFAULT_CHAT": 4,
    "SHOWING_ADVERTISEMENT": 5,
    "DELEGATE_JOIN_TO_PLUG": 6,
    "DELEGATE_KICK_OUT_TO_PLUG": 7,
    "DISABLE_UPDATE_JOIN_METHOD": 8,
    "DISABLE_TRANSFER_ADMIN": 9,
    "CREATING_LIVE_TALK": 10,
    "DISABLE_UPDATE_SEARCHABLE": 11,
    "SUMMARIZING_MESSAGES": 12,
    "CREATING_SQUARE_THREAD": 13,
    "ENABLE_SQUARE_THREAD": 14,
    "DISABLE_CHANGE_ROLE_CO_ADMIN": 15
  },
  "SquareJoinMethodType": {
    "NONE": 0,
    "APPROVAL": 1,
    "CODE": 2
  },
  "SquareMemberRelationState": {
    "NONE": 1,
    "BLOCKED": 2
  },
  "SquareMemberRole": {
    "ADMIN": 1,
    "CO_ADMIN": 2,
    "MEMBER": 10
  },
  "SquareMessageState": {
    "SENT": 1,
    "DELETED": 2,
    "FORBIDDEN": 3,
    "UNSENT": 4
  },
  "SquareMetadataAttribute": {
    "EXCLUDED": 1,
    "NO_AD": 2
  },
  "SquarePreferenceAttribute": {
    "FAVORITE": 1,
    "NOTI_FOR_NEW_JOIN_REQUEST": 2
  },
  "SquareProviderType": {
    "UNKNOWN": 1,
    "YOUTUBE": 2,
    "OA_FANSPACE": 3
  },
  "SquareState": {
    "ALIVE": 0,
    "DELETED": 1,
    "SUSPENDED": 2
  },
  "SquareThreadAttribute": {
    "STATE": 1,
    "EXPIRES_AT": 2,
    "READ_ONLY_AT": 3
  },
  "SquareThreadMembershipState": {
    "JOINED": 1,
    "LEFT": 2
  },
  "SquareThreadState": {
    "ALIVE": 1,
    "DELETED": 2
  },
  "SquareType": {
    "CLOSED": 0,
    "OPEN": 1
  },
  "TargetChatType": {
    "ALL": 0,
    "MIDS": 1,
    "CATEGORIES": 2,
    "CHANNEL_ID": 3
  },
  "TargetUserType": {
    "ALL": 0,
    "MIDS": 1
  },
  "do0_EnumC23139B": {
    "CLOUD": 1,
    "BLE": 2,
    "BEACON": 3
  },
  "do0_EnumC23147e": {
    "SUCCESS": 0,
    "UNKNOWN_ERROR": 1,
    "BLUETOOTH_NOT_AVAILABLE": 2,
    "CONNECTION_TIMEOUT": 3,
    "CONNECTION_ERROR": 4,
    "CONNECTION_IN_PROGRESS": 5
  },
  "do0_EnumC23148f": {
    "ONETIME": 0,
    "AUTOMATIC": 1,
    "BEACON": 2
  },
  "do0_G": {
    "SUCCESS": 0,
    "UNKNOWN_ERROR": 1,
    "GATT_ERROR": 2,
    "GATT_OPERATION_NOT_SUPPORTED": 3,
    "GATT_SERVICE_NOT_FOUND": 4,
    "GATT_CHARACTERISTIC_NOT_FOUND": 5,
    "GATT_CONNECTION_CLOSED": 6,
    "CONNECTION_INVALID": 7
  },
  "do0_M": {
    "INTERNAL_SERVER_ERROR": 0,
    "UNAUTHORIZED": 1,
    "INVALID_REQUEST": 2,
    "INVALID_STATE": 3,
    "DEVICE_LIMIT_EXCEEDED": 4096,
    "UNSUPPORTED_REGION": 4097
  },
  "fN0_EnumC24466B": {
    "LINE_PREMIUM": 0,
    "LYP_PREMIUM": 1
  },
  "fN0_EnumC24467C": {
    "LINE": 1,
    "YAHOO_JAPAN": 2
  },
  "fN0_EnumC24469a": {
    "OK": 1,
    "NOT_SUPPORTED": 2,
    "UNDEFINED": 3,
    "NOT_ENOUGH_TICKETS": 4,
    "NOT_FRIENDS": 5,
    "NO_AGREEMENT": 6
  },
  "fN0_F": {
    "OK": 1,
    "NOT_SUPPORTED": 2,
    "UNDEFINED": 3,
    "CONFLICT": 4,
    "NOT_AVAILABLE": 5,
    "INVALID_INVITATION": 6,
    "IN_PAYMENT_FAILURE_STATE": 7
  },
  "fN0_G": {
    "APPLE": 1,
    "GOOGLE": 2
  },
  "fN0_H": {
    "INACTIVE": 1,
    "ACTIVE_FINITE": 2,
    "ACTIVE_INFINITE": 3
  },
  "fN0_o": {
    "AVAILABLE": 1,
    "ALREADY_SUBSCRIBED": 2
  },
  "fN0_p": {
    "UNKNOWN": 0,
    "SOFTBANK_BUNDLE": 1,
    "YBB_BUNDLE": 2,
    "YAHOO_MOBILE_BUNDLE": 3,
    "PPCG_BUNDLE": 4,
    "ENJOY_BUNDLE": 5,
    "YAHOO_TRIAL_BUNDLE": 6,
    "YAHOO_APPLE": 7,
    "YAHOO_GOOGLE": 8,
    "LINE_APPLE": 9,
    "LINE_GOOGLE": 10,
    "YAHOO_WALLET": 11
  },
  "fN0_q": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "INTERNAL_SERVER_ERROR": 16644,
    "AUTHENTICATION_FAILED": 16645
  },
  "g80_EnumC24993a": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "INVALID_CONTEXT": 2,
    "TOO_MANY_REQUESTS": 3
  },
  "h80_EnumC25645e": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "NOT_FOUND": 2,
    "RETRY_LATER": 3,
    "INVALID_CONTEXT": 100,
    "NOT_SUPPORTED": 101
  },
  "I80_EnumC26392b": {
    "UNKNOWN": 0,
    "SKIP": 1,
    "PASSWORD": 2,
    "EMAIL_BASED": 4,
    "NONE": 11
  },
  "I80_EnumC26394c": {
    "PHONE_NUMBER": 0,
    "APPLE": 1,
    "GOOGLE": 2
  },
  "I80_EnumC26408j": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "NOT_FOUND": 3,
    "RETRY_LATER": 4,
    "HUMAN_VERIFICATION_REQUIRED": 5,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101
  },
  "I80_EnumC26425y": {
    "UNKNOWN": 0,
    "SMS": 1,
    "IVR": 2
  },
  "j80_EnumC27228a": {
    "AUTHENTICATION_FAILED": 1,
    "INVALID_STATE": 2,
    "NOT_AUTHORIZED_DEVICE": 3,
    "MUST_REFRESH_V3_TOKEN": 4
  },
  "jO0_EnumC27533B": {
    "PAYMENT_APPLE": 1,
    "PAYMENT_GOOGLE": 2
  },
  "jO0_EnumC27535b": {
    "ILLEGAL_ARGUMENT": 0,
    "AUTHENTICATION_FAILED": 1,
    "INTERNAL_ERROR": 20,
    "MESSAGE_DEFINED_ERROR": 29,
    "MAINTENANCE_ERROR": 33
  },
  "jO0_EnumC27559z": {
    "PAYMENT_PG_NONE": 0,
    "PAYMENT_PG_AU": 1,
    "PAYMENT_PG_AL": 2
  },
  "jf_EnumC27712a": {
    "NONE": 1,
    "DOES_NOT_RESPOND": 2,
    "RESPOND_MANUALLY": 3,
    "RESPOND_AUTOMATICALLY": 4
  },
  "jf_EnumC27717f": {
    "UNKNOWN": 0,
    "BAD_REQUEST": 1,
    "NOT_FOUND": 2,
    "FORBIDDEN": 3,
    "INTERNAL_SERVER_ERROR": 4
  },
  "kf_EnumC28766a": {
    "ILLEGAL_ARGUMENT": 0,
    "INTERNAL_ERROR": 1,
    "UNAUTHORIZED": 2
  },
  "kf_o": {
    "ANDROID": 0,
    "IOS": 1
  },
  "kf_p": {
    "RICHMENU": 0,
    "TALK_ROOM": 1
  },
  "kf_r": {
    "WEB": 0,
    "POSTBACK": 1,
    "SEND_MESSAGE": 2
  },
  "kf_u": {
    "CLICK": 0,
    "IMPRESSION": 1
  },
  "kf_x": {
    "UNKNOWN": 0,
    "PROFILE": 1,
    "TALK_LIST": 2,
    "OA_CALL": 3
  },
  "n80_o": {
    "INTERNAL_ERROR": 0,
    "INVALID_CONTEXT": 100,
    "FIDO_UNKNOWN_CREDENTIAL_ID": 200,
    "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR": 201,
    "FIDO_UNACCEPTABLE_CONTENT": 202,
    "FIDO_INVALID_REQUEST": 203
  },
  "o80_e": {
    "INTERNAL_ERROR": 0,
    "VERIFICATION_FAILED": 1,
    "LOGIN_NOT_ALLOWED": 2,
    "EXTERNAL_SERVICE_UNAVAILABLE": 3,
    "RETRY_LATER": 4,
    "NOT_SUPPORTED": 100,
    "ILLEGAL_ARGUMENT": 101,
    "INVALID_CONTEXT": 102,
    "FORBIDDEN": 103,
    "FIDO_UNKNOWN_CREDENTIAL_ID": 200,
    "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR": 201,
    "FIDO_UNACCEPTABLE_CONTENT": 202,
    "FIDO_INVALID_REQUEST": 203
  },
  "og_E": {
    "RUNNING": 1,
    "CLOSING": 2,
    "CLOSED": 3,
    "SUSPEND": 4
  },
  "og_EnumC32661b": {
    "INACTIVE": 0,
    "ACTIVE": 1
  },
  "og_EnumC32663d": {
    "PREMIUM": 0,
    "VERIFIED": 1,
    "UNVERIFIED": 2
  },
  "og_EnumC32671l": {
    "ILLEGAL_ARGUMENT": 0,
    "AUTHENTICATION_FAILED": 1,
    "INVALID_STATE": 3,
    "NOT_FOUND": 5,
    "INTERNAL_ERROR": 20,
    "MAINTENANCE_ERROR": 33
  },
  "og_G": {
    "FREE": 0,
    "MONTHLY": 1,
    "PER_PAYMENT": 2
  },
  "og_I": {
    "OK": 0,
    "REACHED_TIER_LIMIT": 1,
    "REACHED_MEMBER_LIMIT": 2,
    "ALREADY_JOINED": 3,
    "NOT_SUPPORTED_LINE_VERSION": 4,
    "BOT_USER_REGION_IS_NOT_MATCH": 5
  },
  "q80_EnumC33651c": {
    "INTERNAL_ERROR": 0,
    "ILLEGAL_ARGUMENT": 1,
    "VERIFICATION_FAILED": 2,
    "NOT_ALLOWED_QR_CODE_LOGIN": 3,
    "VERIFICATION_NOTICE_FAILED": 4,
    "RETRY_LATER": 5,
    "INVALID_CONTEXT": 100,
    "APP_UPGRADE_REQUIRED": 101
  },
  "qm_EnumC34112e": {
    "BUTTON": 1,
    "ENTRY_SELECTED": 2,
    "BROADCAST_ENTER": 3,
    "BROADCAST_LEAVE": 4,
    "BROADCAST_STAY": 5
  },
  "qm_s": {
    "ILLEGAL_ARGUMENT": 0,
    "NOT_FOUND": 5,
    "INTERNAL_ERROR": 20
  },
  "r80_EnumC34361a": {
    "PERSONAL_ACCOUNT": 1,
    "CURRENT_ACCOUNT": 2
  },
  "r80_EnumC34362b": {
    "BANK_ALL": 1,
    "BANK_DEPOSIT": 2,
    "BANK_WITHDRAWAL": 3
  },
  "r80_EnumC34365e": {
    "BANK": 1,
    "ATM": 2,
    "CONVENIENCE_STORE": 3,
    "DEBIT_CARD": 4,
    "E_CHANNEL": 5,
    "VIRTUAL_BANK_ACCOUNT": 6,
    "AUTO": 7,
    "CVS_LAWSON": 8,
    "SEVEN_BANK_DEPOSIT": 9,
    "CODE_DEPOSIT": 10
  },
  "r80_EnumC34367g": {
    "AVAILABLE": 0,
    "DIFFERENT_REGION": 1,
    "UNSUPPORTED_DEVICE": 2,
    "PHONE_NUMBER_UNREGISTERED": 3,
    "UNAVAILABLE_FROM_LINE_PAY": 4,
    "INVALID_USER": 5
  },
  "r80_EnumC34368h": {
    "CHARGE": 1,
    "WITHDRAW": 2
  },
  "r80_EnumC34370j": {
    "UNKNOWN": 0,
    "VISA": 1,
    "MASTER": 2,
    "AMEX": 3,
    "DINERS": 4,
    "JCB": 5
  },
  "r80_EnumC34371k": {
    "NULL": 0,
    "ATM": 1,
    "CONVENIENCE_STORE": 2
  },
  "r80_EnumC34372l": {
    "SCALE2": 1,
    "SCALE3": 2,
    "HDPI": 3,
    "XHDPI": 4
  },
  "r80_EnumC34374n": {
    "SUCCESS": 0,
    "GENERAL_USER_ERROR": 1000,
    "ACCOUNT_NOT_EXISTS": 1101,
    "ACCOUNT_INVALID_STATUS": 1102,
    "ACCOUNT_ALREADY_EXISTS": 1103,
    "MERCHANT_NOT_EXISTS": 1104,
    "MERCHANT_INVALID_STATUS": 1105,
    "AGREEMENT_REQUIRED": 1107,
    "BLACKLISTED": 1108,
    "WRONG_PASSWORD": 1109,
    "INVALID_CREDIT_CARD": 1110,
    "LIMIT_EXCEEDED": 1111,
    "CANNOT_PROCEED": 1115,
    "TOO_WEAK_PASSWORD": 1120,
    "CANNOT_CREATE_ACCOUNT": 1125,
    "TEMPORARY_PASSWORD_ERROR": 1130,
    "MISSING_PARAMETERS": 1140,
    "NO_VALID_MYCODE_ACCOUNT": 1141,
    "INSUFFICIENT_BALANCE": 1142,
    "TRANSACTION_NOT_FOUND": 1150,
    "TRANSACTION_FINISHED": 1152,
    "PAYMENT_AMOUNT_WRONG": 1153,
    "BALANCE_ACCOUNT_NOT_EXISTS": 1157,
    "DUPLICATED_CITIZEN_ID": 1158,
    "PAYMENT_REQUEST_NOT_FOUND": 1159,
    "AUTH_FAILED": 1169,
    "PASSWORD_SETTING_REQUIRED": 1171,
    "TRANSACTION_ALREADY_PROCESSED": 1172,
    "CURRENCY_NOT_SUPPORTED": 1178,
    "PAYMENT_NOT_AVAILABLE": 1180,
    "TRANSFER_REQUEST_NOT_FOUND": 1181,
    "INVALID_PAYMENT_AMOUNT": 1183,
    "INSUFFICIENT_PAYMENT_AMOUNT": 1184,
    "EXTERNAL_SYSTEM_MAINTENANCE": 1185,
    "EXTERNAL_SYSTEM_INOPERATIONAL": 1186,
    "SESSION_EXPIRED": 1192,
    "UPGRADE_REQUIRED": 1195,
    "REQUEST_TOKEN_EXPIRED": 1196,
    "OPERATION_FINISHED": 1198,
    "EXTERNAL_SYSTEM_ERROR": 1199,
    "PARTIAL_AMOUNT_APPROVED": 1299,
    "PINCODE_AUTH_REQUIRED": 1600,
    "ADDITIONAL_AUTH_REQUIRED": 1601,
    "NOT_BOUND": 1603,
    "OTP_USER_REGISTRATION_ERROR": 1610,
    "OTP_CARD_REGISTRATION_ERROR": 1611,
    "NO_AUTH_METHOD": 1612,
    "GENERAL_USER_ERROR_RESTART": 1696,
    "GENERAL_USER_ERROR_REFRESH": 1697,
    "GENERAL_USER_ERROR_CLOSE": 1698,
    "INTERNAL_SERVER_ERROR": 9000,
    "INTERNAL_SYSTEM_MAINTENANCE": 9999,
    "UNKNOWN_ERROR": 10000
  },
  "r80_EnumC34376p": {
    "TRANSFER": 1,
    "TRANSFER_REQUEST": 2,
    "DUTCH": 3,
    "INVITATION": 4
  },
  "r80_EnumC34377q": {
    "NULL": 0,
    "UNIDEN": 1,
    "WAIT": 2,
    "IDENTIFIED": 3,
    "CHECKING": 4
  },
  "r80_EnumC34378s": {
    "UNKNOWN": 0,
    "MORE_TAB": 1,
    "CHAT_ROOM_PLUS_MENU": 2,
    "TRANSFER": 3,
    "PAYMENT": 4,
    "LINECARD": 5,
    "INVITATION": 6
  },
  "r80_e0": {
    "NONE": 0,
    "ONE_TIME_PAYMENT_AGREEMENT": 1,
    "SIMPLE_JOINING_AGREEMENT": 2,
    "LINE_CARD_CASH_AGREEMENT": 3,
    "LINE_CARD_MONEY_AGREEMENT": 4,
    "JOINING_WITH_LINE_CARD_AGREEMENT": 5,
    "LINE_CARD_AGREEMENT": 6
  },
  "r80_g0": {
    "NULL": 0,
    "ATM": 1,
    "CONVENIENCE_STORE": 2,
    "ALL": 3
  },
  "r80_h0": {
    "READY": 1,
    "COMPLETE": 2,
    "WAIT": 3,
    "CANCEL": 4,
    "FAIL": 5,
    "EXPIRE": 6,
    "ALL": 7
  },
  "r80_i0": {
    "TRANSFER_ACCEPTABLE": 1,
    "REMOVE_INVOICE": 2,
    "INVOICE_CODE": 3,
    "SHOW_ALWAYS_INVOICE": 4
  },
  "r80_m0": {
    "OK": 1,
    "NOT_ALIVE_USER": 2,
    "NEED_BALANCE_DISCLAIMER": 3,
    "ECONTEXT_CHARGING_IN_PROGRESS": 4,
    "TRANSFER_IN_PROGRESS": 6,
    "OK_REMAINING_BALANCE": 7,
    "ADVERSE_BALANCE": 8,
    "CONFIRM_REQUIRED": 9
  },
  "r80_n0": {
    "LINE": 1,
    "LINEPAY": 2
  },
  "r80_r": {
    "CITIZEN_ID": 1,
    "PASSPORT": 2,
    "WORK_PERMIT": 3,
    "ALIEN_CARD": 4
  },
  "t80_h": {
    "CLIENT": 1,
    "SERVER": 2
  },
  "t80_i": {
    "APP_INSTANCE_LOCAL": 1,
    "APP_TYPE_LOCAL": 2,
    "GLOBAL": 3
  },
  "t80_n": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "TOO_LARGE_VALUE": 16644,
    "CLOCK_DRIFT_DETECTED": 16645,
    "UNSUPPORTED_APPLICATION_TYPE": 16646,
    "DUPLICATED_ENTRY": 16647,
    "AUTHENTICATION_FAILED": 16897,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_IN_MAINTENANCE_MODE": 20738,
    "SERVICE_UNAVAILABLE": 20739
  },
  "t80_r": {
    "USER_ACTION": 1,
    "DATA_OUTDATED": 2,
    "APP_MIGRATION": 3,
    "OTHER": 100
  },
  "vh_EnumC37632c": {
    "ACTIVE": 1,
    "INACTIVE": 2
  },
  "vh_m": {
    "SAFE": 1,
    "NOT_SAFE": 2
  },
  "wm_EnumC38497a": {
    "UNKNOWN": 0,
    "BOT_NOT_FOUND": 1,
    "BOT_NOT_AVAILABLE": 2,
    "NOT_A_MEMBER": 3,
    "SQUARECHAT_NOT_FOUND": 4,
    "FORBIDDEN": 5,
    "ILLEGAL_ARGUMENT": 400,
    "AUTHENTICATION_FAILED": 401,
    "INTERNAL_ERROR": 500
  },
  "zR0_EnumC40578c": {
    "FOREGROUND": 0,
    "BACKGROUND": 1
  },
  "zR0_EnumC40579d": {
    "STICKER": 1,
    "THEME": 2,
    "STICON": 3
  },
  "zR0_h": {
    "NORMAL": 0,
    "BIG": 1
  },
  "zR0_j": {
    "UNKNOWN": 0,
    "NONE": 1,
    "ILLEGAL_ARGUMENT": 16641,
    "NOT_FOUND": 16642,
    "NOT_AVAILABLE": 16643,
    "AUTHENTICATION_FAILED": 16897,
    "INTERNAL_SERVER_ERROR": 20737,
    "SERVICE_UNAVAILABLE": 20739
  },
  "zf_EnumC40713a": {
    "PERSONAL": 1,
    "ROOM": 2,
    "GROUP": 3,
    "SQUARE_CHAT": 4
  },
  "zf_EnumC40715c": {
    "REGULAR": 1,
    "PRIORITY": 2,
    "MORE": 3
  },
  "zf_EnumC40716d": {
    "INVALID_REQUEST": 1,
    "UNAUTHORIZED": 2,
    "SERVER_ERROR": 100
  }
};
export type AR0_g = 16641 | "ILLEGAL_ARGUMENT"
  | 16642 | "MAJOR_VERSION_NOT_SUPPORTED"
  | 16897 | "AUTHENTICATION_FAILED"
  | 20737 | "INTERNAL_SERVER_ERROR"
  | 20739 | "SERVICE_UNAVAILABLE"
  ;

export type AR0_q = 0 | "NOT_PURCHASED"
  | 1 | "SUBSCRIPTION"
  ;

export type AccountMigrationPincodeType = 0 | "NOT_APPLICABLE"
  | 1 | "NOT_SET"
  | 2 | "SET"
  | 3 | "NEED_ENFORCED_INPUT"
  ;

export type ApplicationType = 16 | "IOS"
  | 17 | "IOS_RC"
  | 18 | "IOS_BETA"
  | 19 | "IOS_ALPHA"
  | 32 | "ANDROID"
  | 33 | "ANDROID_RC"
  | 34 | "ANDROID_BETA"
  | 35 | "ANDROID_ALPHA"
  | 48 | "WAP"
  | 49 | "WAP_RC"
  | 50 | "WAP_BETA"
  | 51 | "WAP_ALPHA"
  | 64 | "BOT"
  | 65 | "BOT_RC"
  | 66 | "BOT_BETA"
  | 67 | "BOT_ALPHA"
  | 80 | "WEB"
  | 81 | "WEB_RC"
  | 82 | "WEB_BETA"
  | 83 | "WEB_ALPHA"
  | 96 | "DESKTOPWIN"
  | 97 | "DESKTOPWIN_RC"
  | 98 | "DESKTOPWIN_BETA"
  | 99 | "DESKTOPWIN_ALPHA"
  | 112 | "DESKTOPMAC"
  | 113 | "DESKTOPMAC_RC"
  | 114 | "DESKTOPMAC_BETA"
  | 115 | "DESKTOPMAC_ALPHA"
  | 128 | "CHANNELGW"
  | 129 | "CHANNELGW_RC"
  | 130 | "CHANNELGW_BETA"
  | 131 | "CHANNELGW_ALPHA"
  | 144 | "CHANNELCP"
  | 145 | "CHANNELCP_RC"
  | 146 | "CHANNELCP_BETA"
  | 147 | "CHANNELCP_ALPHA"
  | 160 | "WINPHONE"
  | 161 | "WINPHONE_RC"
  | 162 | "WINPHONE_BETA"
  | 163 | "WINPHONE_ALPHA"
  | 176 | "BLACKBERRY"
  | 177 | "BLACKBERRY_RC"
  | 178 | "BLACKBERRY_BETA"
  | 179 | "BLACKBERRY_ALPHA"
  | 192 | "WINMETRO"
  | 193 | "WINMETRO_RC"
  | 194 | "WINMETRO_BETA"
  | 195 | "WINMETRO_ALPHA"
  | 200 | "S40"
  | 209 | "S40_RC"
  | 210 | "S40_BETA"
  | 211 | "S40_ALPHA"
  | 224 | "CHRONO"
  | 225 | "CHRONO_RC"
  | 226 | "CHRONO_BETA"
  | 227 | "CHRONO_ALPHA"
  | 256 | "TIZEN"
  | 257 | "TIZEN_RC"
  | 258 | "TIZEN_BETA"
  | 259 | "TIZEN_ALPHA"
  | 272 | "VIRTUAL"
  | 288 | "FIREFOXOS"
  | 289 | "FIREFOXOS_RC"
  | 290 | "FIREFOXOS_BETA"
  | 291 | "FIREFOXOS_ALPHA"
  | 304 | "IOSIPAD"
  | 305 | "IOSIPAD_RC"
  | 306 | "IOSIPAD_BETA"
  | 307 | "IOSIPAD_ALPHA"
  | 320 | "BIZIOS"
  | 321 | "BIZIOS_RC"
  | 322 | "BIZIOS_BETA"
  | 323 | "BIZIOS_ALPHA"
  | 336 | "BIZANDROID"
  | 337 | "BIZANDROID_RC"
  | 338 | "BIZANDROID_BETA"
  | 339 | "BIZANDROID_ALPHA"
  | 352 | "BIZBOT"
  | 353 | "BIZBOT_RC"
  | 354 | "BIZBOT_BETA"
  | 355 | "BIZBOT_ALPHA"
  | 368 | "CHROMEOS"
  | 369 | "CHROMEOS_RC"
  | 370 | "CHROMEOS_BETA"
  | 371 | "CHROMEOS_ALPHA"
  | 384 | "ANDROIDLITE"
  | 385 | "ANDROIDLITE_RC"
  | 386 | "ANDROIDLITE_BETA"
  | 387 | "ANDROIDLITE_ALPHA"
  | 400 | "WIN10"
  | 401 | "WIN10_RC"
  | 402 | "WIN10_BETA"
  | 403 | "WIN10_ALPHA"
  | 416 | "BIZWEB"
  | 417 | "BIZWEB_RC"
  | 418 | "BIZWEB_BETA"
  | 419 | "BIZWEB_ALPHA"
  | 432 | "DUMMYPRIMARY"
  | 433 | "DUMMYPRIMARY_RC"
  | 434 | "DUMMYPRIMARY_BETA"
  | 435 | "DUMMYPRIMARY_ALPHA"
  | 448 | "SQUARE"
  | 449 | "SQUARE_RC"
  | 450 | "SQUARE_BETA"
  | 451 | "SQUARE_ALPHA"
  | 464 | "INTERNAL"
  | 465 | "INTERNAL_RC"
  | 466 | "INTERNAL_BETA"
  | 467 | "INTERNAL_ALPHA"
  | 480 | "CLOVAFRIENDS"
  | 481 | "CLOVAFRIENDS_RC"
  | 482 | "CLOVAFRIENDS_BETA"
  | 483 | "CLOVAFRIENDS_ALPHA"
  | 496 | "WATCHOS"
  | 497 | "WATCHOS_RC"
  | 498 | "WATCHOS_BETA"
  | 499 | "WATCHOS_ALPHA"
  | 512 | "OPENCHAT_PLUG"
  | 513 | "OPENCHAT_PLUG_RC"
  | 514 | "OPENCHAT_PLUG_BETA"
  | 515 | "OPENCHAT_PLUG_ALPHA"
  | 528 | "ANDROIDSECONDARY"
  | 529 | "ANDROIDSECONDARY_RC"
  | 530 | "ANDROIDSECONDARY_BETA"
  | 531 | "ANDROIDSECONDARY_ALPHA"
  | 544 | "WEAROS"
  | 545 | "WEAROS_RC"
  | 546 | "WEAROS_BETA"
  | 547 | "WEAROS_ALPHA"
  ;

export type BotType = 0 | "RESERVED"
  | 1 | "OFFICIAL"
  | 2 | "LINE_AT_0"
  | 3 | "LINE_AT"
  ;

export type CarrierCode = 0 | "NOT_SPECIFIED"
  | 1 | "JP_DOCOMO"
  | 2 | "JP_AU"
  | 3 | "JP_SOFTBANK"
  | 4 | "JP_DOCOMO_LINE"
  | 5 | "JP_SOFTBANK_LINE"
  | 6 | "JP_AU_LINE"
  | 7 | "JP_RAKUTEN"
  | 8 | "JP_MVNO"
  | 9 | "JP_USER_SELECTED_LINE"
  | 17 | "KR_SKT"
  | 18 | "KR_KT"
  | 19 | "KR_LGT"
  ;

export type ChannelErrorCode = 0 | "ILLEGAL_ARGUMENT"
  | 1 | "INTERNAL_ERROR"
  | 2 | "CONNECTION_ERROR"
  | 3 | "AUTHENTICATIONI_FAILED"
  | 4 | "NEED_PERMISSION_APPROVAL"
  | 5 | "COIN_NOT_USABLE"
  | 6 | "WEBVIEW_NOT_ALLOWED"
  | 7 | "NOT_AVAILABLE_API"
  ;

export type ContactAttribute = 1 | "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL"
  | 2 | "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL"
  | 16 | "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME"
  | 32 | "CONTACT_ATTRIBUTE_CAPABLE_BUDDY"
  ;

export type ContactSetting = 1 | "CONTACT_SETTING_NOTIFICATION_DISABLE"
  | 2 | "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
  | 4 | "CONTACT_SETTING_CONTACT_HIDE"
  | 8 | "CONTACT_SETTING_FAVORITE"
  | 16 | "CONTACT_SETTING_DELETE"
  | 32 | "CONTACT_SETTING_FRIEND_RINGTONE"
  | 64 | "CONTACT_SETTING_FRIEND_RINGBACK_TONE"
  ;

export type ContactStatus = 0 | "UNSPECIFIED"
  | 1 | "FRIEND"
  | 2 | "FRIEND_BLOCKED"
  | 3 | "RECOMMEND"
  | 4 | "RECOMMEND_BLOCKED"
  | 5 | "DELETED"
  | 6 | "DELETED_BLOCKED"
  ;

export type ContactType = 0 | "MID"
  | 1 | "PHONE"
  | 2 | "EMAIL"
  | 3 | "USERID"
  | 4 | "PROXIMITY"
  | 5 | "GROUP"
  | 6 | "USER"
  | 7 | "QRCODE"
  | 8 | "PROMOTION_BOT"
  | 9 | "CONTACT_MESSAGE"
  | 10 | "FRIEND_REQUEST"
  | 11 | "BEACON"
  | 128 | "REPAIR"
  | 2305 | "FACEBOOK"
  | 2306 | "SINA"
  | 2307 | "RENREN"
  | 2308 | "FEIXIN"
  | 2309 | "BBM"
  ;

export type ContentType = 0 | "NONE"
  | 1 | "IMAGE"
  | 2 | "VIDEO"
  | 3 | "AUDIO"
  | 4 | "HTML"
  | 5 | "PDF"
  | 6 | "CALL"
  | 7 | "STICKER"
  | 8 | "PRESENCE"
  | 9 | "GIFT"
  | 10 | "GROUPBOARD"
  | 11 | "APPLINK"
  | 12 | "LINK"
  | 13 | "CONTACT"
  | 14 | "FILE"
  | 15 | "LOCATION"
  | 16 | "POSTNOTIFICATION"
  | 17 | "RICH"
  | 18 | "CHATEVENT"
  | 19 | "MUSIC"
  | 20 | "PAYMENT"
  | 21 | "EXTIMAGE"
  | 22 | "FLEX"
  ;

export type Eg_EnumC8927a = 1 | "NEW"
  | 2 | "UPDATE"
  | 3 | "EVENT"
  ;

export type EmailConfirmationStatus = 0 | "NOT_SPECIFIED"
  | 1 | "NOT_YET"
  | 3 | "DONE"
  | 4 | "NEED_ENFORCED_INPUT"
  ;

export type ErrorCode = 0 | "ILLEGAL_ARGUMENT"
  | 1 | "AUTHENTICATION_FAILED"
  | 2 | "DB_FAILED"
  | 3 | "INVALID_STATE"
  | 4 | "EXCESSIVE_ACCESS"
  | 5 | "NOT_FOUND"
  | 6 | "INVALID_LENGTH"
  | 7 | "NOT_AVAILABLE_USER"
  | 8 | "NOT_AUTHORIZED_DEVICE"
  | 9 | "INVALID_MID"
  | 10 | "NOT_A_MEMBER"
  | 11 | "INCOMPATIBLE_APP_VERSION"
  | 12 | "NOT_READY"
  | 13 | "NOT_AVAILABLE_SESSION"
  | 14 | "NOT_AUTHORIZED_SESSION"
  | 15 | "SYSTEM_ERROR"
  | 16 | "NO_AVAILABLE_VERIFICATION_METHOD"
  | 17 | "NOT_AUTHENTICATED"
  | 18 | "INVALID_IDENTITY_CREDENTIAL"
  | 19 | "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
  | 20 | "INTERNAL_ERROR"
  | 21 | "NO_SUCH_IDENTITY_IDENFIER"
  | 22 | "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
  | 23 | "ILLEGAL_IDENTITY_CREDENTIAL"
  | 24 | "UNKNOWN_CHANNEL"
  | 25 | "NO_SUCH_MESSAGE_BOX"
  | 26 | "NOT_AVAILABLE_MESSAGE_BOX"
  | 27 | "CHANNEL_DOES_NOT_MATCH"
  | 28 | "NOT_YOUR_MESSAGE"
  | 29 | "MESSAGE_DEFINED_ERROR"
  | 30 | "USER_CANNOT_ACCEPT_PRESENTS"
  | 32 | "USER_NOT_STICKER_OWNER"
  | 33 | "MAINTENANCE_ERROR"
  | 34 | "ACCOUNT_NOT_MATCHED"
  | 35 | "ABUSE_BLOCK"
  | 36 | "NOT_FRIEND"
  | 37 | "NOT_ALLOWED_CALL"
  | 38 | "BLOCK_FRIEND"
  | 39 | "INCOMPATIBLE_VOIP_VERSION"
  | 40 | "INVALID_SNS_ACCESS_TOKEN"
  | 41 | "EXTERNAL_SERVICE_NOT_AVAILABLE"
  | 42 | "NOT_ALLOWED_ADD_CONTACT"
  | 43 | "NOT_CERTIFICATED"
  | 44 | "NOT_ALLOWED_SECONDARY_DEVICE"
  | 45 | "INVALID_PIN_CODE"
  | 47 | "EXCEED_FILE_MAX_SIZE"
  | 48 | "EXCEED_DAILY_QUOTA"
  | 49 | "NOT_SUPPORT_SEND_FILE"
  | 50 | "MUST_UPGRADE"
  | 51 | "NOT_AVAILABLE_PIN_CODE_SESSION"
  | 52 | "EXPIRED_REVISION"
  | 54 | "NOT_YET_PHONE_NUMBER"
  | 55 | "BAD_CALL_NUMBER"
  | 56 | "UNAVAILABLE_CALL_NUMBER"
  | 57 | "NOT_SUPPORT_CALL_SERVICE"
  | 58 | "CONGESTION_CONTROL"
  | 59 | "NO_BALANCE"
  | 60 | "NOT_PERMITTED_CALLER_ID"
  | 61 | "NO_CALLER_ID_LIMIT_EXCEEDED"
  | 62 | "CALLER_ID_VERIFICATION_REQUIRED"
  | 63 | "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  | 64 | "MESSAGE_NOT_FOUND"
  | 65 | "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
  | 66 | "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
  | 67 | "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
  | 69 | "INVALID_PASSWORD_FORMAT"
  | 70 | "FEATURE_RESTRICTED"
  | 71 | "MESSAGE_NOT_DESTRUCTIBLE"
  | 72 | "PAID_CALL_REDEEM_FAILED"
  | 73 | "PREVENTED_JOIN_BY_TICKET"
  | 75 | "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT"
  | 76 | "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
  | 77 | "SECURITY_CENTER_NOT_VERIFIED"
  | 78 | "SECURITY_CENTER_BLOCKED_BY_SETTING"
  | 79 | "SECURITY_CENTER_BLOCKED"
  | 80 | "TALK_PROXY_EXCEPTION"
  | 81 | "E2EE_INVALID_PROTOCOL"
  | 82 | "E2EE_RETRY_ENCRYPT"
  | 83 | "E2EE_UPDATE_SENDER_KEY"
  | 84 | "E2EE_UPDATE_RECEIVER_KEY"
  | 85 | "E2EE_INVALID_ARGUMENT"
  | 86 | "E2EE_INVALID_VERSION"
  | 87 | "E2EE_SENDER_DISABLED"
  | 88 | "E2EE_RECEIVER_DISABLED"
  | 89 | "E2EE_SENDER_NOT_ALLOWED"
  | 90 | "E2EE_RECEIVER_NOT_ALLOWED"
  | 91 | "E2EE_RESEND_FAIL"
  | 92 | "E2EE_RESEND_OK"
  | 93 | "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
  | 94 | "E2EE_UPDATE_PRIMARY_DEVICE"
  | 95 | "SUCCESS"
  | 96 | "CANCEL"
  | 97 | "E2EE_PRIMARY_NOT_SUPPORT"
  | 98 | "E2EE_RETRY_PLAIN"
  | 99 | "E2EE_RECREATE_GROUP_KEY"
  | 100 | "E2EE_GROUP_TOO_MANY_MEMBERS"
  | 101 | "SERVER_BUSY"
  | 102 | "NOT_ALLOWED_ADD_FOLLOW"
  | 103 | "INCOMING_FRIEND_REQUEST_LIMIT"
  | 104 | "OUTGOING_FRIEND_REQUEST_LIMIT"
  | 105 | "OUTGOING_FRIEND_REQUEST_QUOTA"
  | 106 | "DUPLICATED"
  | 107 | "BANNED"
  | 108 | "NOT_AN_INVITEE"
  | 109 | "NOT_AN_OUTSIDER"
  | 111 | "EMPTY_GROUP"
  | 112 | "EXCEED_FOLLOW_LIMIT"
  | 113 | "UNSUPPORTED_ACCOUNT_TYPE"
  | 114 | "AGREEMENT_REQUIRED"
  | 115 | "SHOULD_RETRY"
  | 116 | "OVER_MAX_CHATS_PER_USER"
  | 117 | "NOT_AVAILABLE_API"
  | 118 | "INVALID_OTP"
  | 119 | "MUST_REFRESH_V3_TOKEN"
  | 120 | "ALREADY_EXPIRED"
  | 121 | "USER_NOT_STICON_OWNER"
  | 122 | "REFRESH_MEDIA_FLOW"
  | 123 | "EXCEED_FOLLOWER_LIMIT"
  | 124 | "INCOMPATIBLE_APP_TYPE"
  | 125 | "NOT_PREMIUM"
  ;

export type Fg_a = 0 | "INTERNAL_ERROR"
  | 1 | "ILLEGAL_ARGUMENT"
  | 2 | "VERIFICATION_FAILED"
  | 3 | "NOT_FOUND"
  | 4 | "RETRY_LATER"
  | 5 | "HUMAN_VERIFICATION_REQUIRED"
  | 6 | "NOT_ENABLED"
  | 100 | "INVALID_CONTEXT"
  | 101 | "APP_UPGRADE_REQUIRED"
  | 102 | "NO_CONTENT"
  ;

export type FriendRequestStatus = 0 | "NONE"
  | 1 | "AVAILABLE"
  | 2 | "ALREADY_REQUESTED"
  | 3 | "UNAVAILABLE"
  ;

export type IdentityProvider = 0 | "UNKNOWN"
  | 1 | "LINE"
  | 2 | "NAVER_KR"
  | 3 | "LINE_PHONE"
  ;

export type LN0_F0 = 0 | "UNKNOWN"
  | 1 | "INVALID_TARGET_USER"
  | 2 | "AGE_VALIDATION"
  | 3 | "TOO_MANY_FRIENDS"
  | 4 | "TOO_MANY_REQUESTS"
  | 5 | "MALFORMED_REQUEST"
  | 6 | "TRACKING_META_QRCODE_FAVORED"
  ;

export type LN0_X0 = 1 | "USER"
  | 2 | "BOT"
  ;

export type MIDType = 0 | "USER"
  | 1 | "ROOM"
  | 2 | "GROUP"
  | 3 | "SQUARE"
  | 4 | "SQUARE_CHAT"
  | 5 | "SQUARE_MEMBER"
  | 6 | "BOT"
  | 7 | "SQUARE_THREAD"
  ;

export type NZ0_B0 = 0 | "PAY"
  | 1 | "POI"
  | 2 | "FX"
  | 3 | "SEC"
  | 4 | "BIT"
  | 5 | "LIN"
  | 6 | "SCO"
  | 7 | "POC"
  ;

export type NZ0_C0 = 0 | "OK"
  | 1 | "MAINTENANCE"
  | 2 | "TPS_EXCEEDED"
  | 3 | "NOT_FOUND"
  | 4 | "BLOCKED"
  | 5 | "INTERNAL_ERROR"
  | 6 | "WALLET_CMS_MAINTENANCE"
  ;

export type NZ0_EnumC12154b1 = 0 | "NORMAL"
  | 1 | "CAMERA"
  ;

export type NZ0_EnumC12169g1 = 101 | "WALLET"
  | 201 | "ASSET"
  | 301 | "SHOPPING"
  ;

export type NZ0_EnumC12170h = 0 | "HIDE_BADGE"
  | 1 | "SHOW_BADGE"
  ;

export type NZ0_EnumC12188n = 0 | "OK"
  | 1 | "UNAVAILABLE"
  | 2 | "DUPLICATAE_REGISTRATION"
  | 3 | "INTERNAL_ERROR"
  ;

export type NZ0_EnumC12192o0 = 0 | "LV1"
  | 1 | "LV2"
  | 2 | "LV3"
  | 3 | "LV9"
  ;

export type NZ0_EnumC12193o1 = 400 | "INVALID_PARAMETER"
  | 401 | "AUTHENTICATION_FAILED"
  | 500 | "INTERNAL_SERVER_ERROR"
  | 503 | "SERVICE_IN_MAINTENANCE_MODE"
  ;

export type NZ0_EnumC12195p0 = 1 | "ALIVE"
  | 2 | "SUSPENDED"
  | 3 | "UNREGISTERED"
  ;

export type NZ0_EnumC12197q = 0 | "PREFIX"
  | 1 | "SUFFIX"
  ;

export type NZ0_EnumC12218x0 = 0 | "NO_CONTENT"
  | 1 | "OK"
  | 2 | "ERROR"
  ;

export type NZ0_I0 = 0 | "A"
  | 1 | "B"
  | 2 | "C"
  | 3 | "D"
  | 4 | "UNKNOWN"
  ;

export type NZ0_K0 = 0 | "POCKET_MONEY"
  | 1 | "REFINANCE"
  ;

export type NZ0_N0 = 0 | "COMPACT"
  | 1 | "EXPANDED"
  ;

export type NZ0_S0 = 0 | "CARD"
  | 1 | "ACTION"
  ;

export type NZ0_W0 = 0 | "OK"
  | 1 | "INTERNAL_ERROR"
  ;

export type NotificationStatus = 1 | "NOTIFICATION_ITEM_EXIST"
  | 2 | "TIMELINE_ITEM_EXIST"
  | 4 | "NOTE_GROUP_NEW_ITEM_EXIST"
  | 8 | "TIMELINE_BUDDYGROUP_CHANGED"
  | 16 | "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST"
  | 32 | "ALBUM_ITEM_EXIST"
  | 64 | "TIMELINE_ITEM_DELETED"
  | 128 | "OTOGROUP_ITEM_EXIST"
  | 256 | "GROUPHOME_NEW_ITEM_EXIST"
  | 512 | "GROUPHOME_HIDDEN_ITEM_CHANGED"
  | 1024 | "NOTIFICATION_ITEM_CHANGED"
  | 2048 | "BEAD_ITEM_HIDE"
  | 4096 | "BEAD_ITEM_SHOW"
  | 8192 | "LINE_TICKET_UPDATED"
  | 16384 | "TIMELINE_STORY_UPDATED"
  | 32768 | "SMARTCH_UPDATED"
  | 65536 | "AVATAR_UPDATED"
  | 131072 | "HOME_NOTIFICATION_ITEM_EXIST"
  | 262144 | "TIMELINE_REBOOT_COMPLETED"
  | 524288 | "TIMELINE_GUIDE_STORY_UPDATED"
  | 1048576 | "TIMELINE_F2F_COMPLETED"
  | 2097152 | "VOOM_LIVE_STATE_CHANGED"
  | 4194304 | "VOOM_ACTIVITY_REWARD_ITEM_EXIST"
  ;

export type NotificationType = 1 | "APPLE_APNS"
  | 2 | "GOOGLE_C2DM"
  | 3 | "NHN_NNI"
  | 4 | "SKT_AOM"
  | 5 | "MS_MPNS"
  | 6 | "RIM_BIS"
  | 7 | "GOOGLE_GCM"
  | 8 | "NOKIA_NNAPI"
  | 9 | "TIZEN"
  | 10 | "MOZILLA_SIMPLE"
  | 17 | "LINE_BOT"
  | 18 | "LINE_WAP"
  | 19 | "APPLE_APNS_VOIP"
  | 20 | "MS_WNS"
  | 21 | "GOOGLE_FCM"
  | 22 | "CLOVA"
  | 23 | "CLOVA_VOIP"
  | 24 | "HUAWEI_HCM"
  ;

export type Ob1_B0 = 0 | "FOREGROUND"
  | 1 | "BACKGROUND"
  ;

export type Ob1_C1 = 0 | "NORMAL"
  | 1 | "BIG"
  ;

export type Ob1_D0 = 0 | "PURCHASE_ONLY"
  | 1 | "PURCHASE_OR_SUBSCRIPTION"
  | 2 | "SUBSCRIPTION_ONLY"
  ;

export type Ob1_EnumC12607a1 = 1 | "DEFAULT"
  | 2 | "VIEW_VIDEO"
  ;

export type Ob1_EnumC12610b1 = 0 | "NONE"
  | 2 | "BUDDY"
  | 3 | "INSTALL"
  | 4 | "MISSION"
  | 5 | "MUSTBUY"
  ;

export type Ob1_EnumC12631i1 = 0 | "UNKNOWN"
  | 1 | "PRODUCT"
  | 2 | "USER"
  | 3 | "PREMIUM_USER"
  ;

export type Ob1_EnumC12638l = 0 | "VALID"
  | 1 | "INVALID"
  ;

export type Ob1_EnumC12641m = 1 | "PREMIUM"
  | 2 | "VERIFIED"
  | 3 | "UNVERIFIED"
  ;

export type Ob1_EnumC12652p1 = 0 | "UNKNOWN"
  | 1 | "NONE"
  | 16641 | "ILLEGAL_ARGUMENT"
  | 16642 | "NOT_FOUND"
  | 16643 | "NOT_AVAILABLE"
  | 16644 | "NOT_PAID_PRODUCT"
  | 16645 | "NOT_FREE_PRODUCT"
  | 16646 | "ALREADY_OWNED"
  | 16647 | "ERROR_WITH_CUSTOM_MESSAGE"
  | 16648 | "NOT_AVAILABLE_TO_RECIPIENT"
  | 16649 | "NOT_AVAILABLE_FOR_CHANNEL_ID"
  | 16650 | "NOT_SALE_FOR_COUNTRY"
  | 16651 | "NOT_SALES_PERIOD"
  | 16652 | "NOT_SALE_FOR_DEVICE"
  | 16653 | "NOT_SALE_FOR_VERSION"
  | 16654 | "ALREADY_EXPIRED"
  | 16655 | "LIMIT_EXCEEDED"
  | 16656 | "MISSING_CAPABILITY"
  | 16897 | "AUTHENTICATION_FAILED"
  | 17153 | "BALANCE_SHORTAGE"
  | 20737 | "INTERNAL_SERVER_ERROR"
  | 20738 | "SERVICE_IN_MAINTENANCE_MODE"
  | 20739 | "SERVICE_UNAVAILABLE"
  ;

export type Ob1_EnumC12656r0 = 0 | "OK"
  | 1 | "PRODUCT_UNSUPPORTED"
  | 2 | "TEXT_NOT_SPECIFIED"
  | 3 | "TEXT_STYLE_UNAVAILABLE"
  | 4 | "CHARACTER_COUNT_LIMIT_EXCEEDED"
  | 5 | "CONTAINS_INVALID_WORD"
  ;

export type Ob1_EnumC12664u = 0 | "UNKNOWN"
  | 1 | "NONE"
  | 16641 | "ILLEGAL_ARGUMENT"
  | 16642 | "NOT_FOUND"
  | 16643 | "NOT_AVAILABLE"
  | 16644 | "MAX_AMOUNT_OF_PRODUCTS_REACHED"
  | 16645 | "PRODUCT_IS_NOT_PREMIUM"
  | 16646 | "PRODUCT_IS_NOT_AVAILABLE_FOR_USER"
  | 16897 | "AUTHENTICATION_FAILED"
  | 20737 | "INTERNAL_SERVER_ERROR"
  | 20739 | "SERVICE_UNAVAILABLE"
  ;

export type Ob1_EnumC12666u1 = 0 | "POPULAR"
  | 1 | "NEW_RELEASE"
  | 2 | "EVENT"
  | 3 | "RECOMMENDED"
  | 4 | "POPULAR_WEEKLY"
  | 5 | "POPULAR_MONTHLY"
  | 6 | "POPULAR_RECENTLY_PUBLISHED"
  | 7 | "BUDDY"
  | 8 | "EXTRA_EVENT"
  | 9 | "BROWSING_HISTORY"
  | 10 | "POPULAR_TOTAL_SALES"
  | 11 | "NEW_SUBSCRIPTION"
  | 12 | "POPULAR_SUBSCRIPTION_30D"
  | 13 | "CPD_STICKER"
  | 14 | "POPULAR_WITH_FREE"
  ;

export type Ob1_F1 = 1 | "STATIC"
  | 2 | "ANIMATION"
  ;

export type Ob1_I = 0 | "STATIC"
  | 1 | "POPULAR"
  | 2 | "NEW_RELEASE"
  ;

export type Ob1_J0 = 0 | "ON_SALE"
  | 1 | "OUTDATED_VERSION"
  | 2 | "NOT_ON_SALE"
  ;

export type Ob1_J1 = 0 | "OK"
  | 1 | "INVALID_PARAMETER"
  | 2 | "NOT_FOUND"
  | 3 | "NOT_SUPPORTED"
  | 4 | "CONFLICT"
  | 5 | "NOT_ELIGIBLE"
  ;

export type Ob1_K1 = 0 | "GOOGLE"
  | 1 | "APPLE"
  | 2 | "WEBSTORE"
  | 3 | "LINEMO"
  | 4 | "LINE_MUSIC"
  | 5 | "LYP"
  | 6 | "TW_CHT"
  | 7 | "FREEMIUM"
  ;

export type Ob1_M1 = 0 | "OK"
  | 1 | "UNKNOWN"
  | 2 | "NOT_SUPPORTED"
  | 3 | "NO_SUBSCRIPTION"
  | 4 | "SUBSCRIPTION_EXISTS"
  | 5 | "NOT_AVAILABLE"
  | 6 | "CONFLICT"
  | 7 | "OUTDATED_VERSION"
  | 8 | "NO_STUDENT_INFORMATION"
  | 9 | "ACCOUNT_HOLD"
  | 10 | "RETRY_STATE"
  ;

export type Ob1_O0 = 1 | "STICKER"
  | 2 | "THEME"
  | 3 | "STICON"
  ;

export type Ob1_O1 = 0 | "AVAILABLE"
  | 1 | "DIFFERENT_STORE"
  | 2 | "NOT_STUDENT"
  | 3 | "ALREADY_PURCHASED"
  ;

export type Ob1_P1 = 1 | "GENERAL"
  | 2 | "STUDENT"
  ;

export type Ob1_Q1 = 1 | "BASIC"
  | 2 | "DELUXE"
  ;

export type Ob1_R1 = 1 | "MONTHLY"
  | 2 | "YEARLY"
  ;

export type Ob1_U1 = 0 | "OK"
  | 1 | "UNKNOWN"
  | 2 | "NO_SUBSCRIPTION"
  | 3 | "EXISTS"
  | 4 | "NOT_FOUND"
  | 5 | "EXCEEDS_LIMIT"
  | 6 | "NOT_AVAILABLE"
  ;

export type Ob1_V1 = 1 | "DATE_ASC"
  | 2 | "DATE_DESC"
  ;

export type Ob1_X1 = 0 | "GENERAL"
  | 1 | "CREATORS"
  | 2 | "STICON"
  ;

export type Ob1_a2 = 0 | "NOT_PURCHASED"
  | 1 | "SUBSCRIPTION"
  | 2 | "NOT_SUBSCRIBED"
  | 3 | "NOT_ACCEPTED"
  | 4 | "NOT_PURCHASED_U2I"
  | 5 | "BUDDY"
  ;

export type Ob1_c2 = 1 | "STATIC"
  | 2 | "ANIMATION"
  ;

export type OpType = 0 | "END_OF_OPERATION"
  | 1 | "UPDATE_PROFILE"
  | 2 | "NOTIFIED_UPDATE_PROFILE"
  | 3 | "REGISTER_USERID"
  | 4 | "ADD_CONTACT"
  | 5 | "NOTIFIED_ADD_CONTACT"
  | 6 | "BLOCK_CONTACT"
  | 7 | "UNBLOCK_CONTACT"
  | 8 | "NOTIFIED_RECOMMEND_CONTACT"
  | 9 | "CREATE_GROUP"
  | 10 | "UPDATE_GROUP"
  | 11 | "NOTIFIED_UPDATE_GROUP"
  | 12 | "INVITE_INTO_GROUP"
  | 13 | "NOTIFIED_INVITE_INTO_GROUP"
  | 14 | "LEAVE_GROUP"
  | 15 | "NOTIFIED_LEAVE_GROUP"
  | 16 | "ACCEPT_GROUP_INVITATION"
  | 17 | "NOTIFIED_ACCEPT_GROUP_INVITATION"
  | 18 | "KICKOUT_FROM_GROUP"
  | 19 | "NOTIFIED_KICKOUT_FROM_GROUP"
  | 20 | "CREATE_ROOM"
  | 21 | "INVITE_INTO_ROOM"
  | 22 | "NOTIFIED_INVITE_INTO_ROOM"
  | 23 | "LEAVE_ROOM"
  | 24 | "NOTIFIED_LEAVE_ROOM"
  | 25 | "SEND_MESSAGE"
  | 26 | "RECEIVE_MESSAGE"
  | 27 | "SEND_MESSAGE_RECEIPT"
  | 28 | "RECEIVE_MESSAGE_RECEIPT"
  | 29 | "SEND_CONTENT_RECEIPT"
  | 30 | "RECEIVE_ANNOUNCEMENT"
  | 31 | "CANCEL_INVITATION_GROUP"
  | 32 | "NOTIFIED_CANCEL_INVITATION_GROUP"
  | 33 | "NOTIFIED_UNREGISTER_USER"
  | 34 | "REJECT_GROUP_INVITATION"
  | 35 | "NOTIFIED_REJECT_GROUP_INVITATION"
  | 36 | "UPDATE_SETTINGS"
  | 37 | "NOTIFIED_REGISTER_USER"
  | 38 | "INVITE_VIA_EMAIL"
  | 39 | "NOTIFIED_REQUEST_RECOVERY"
  | 40 | "SEND_CHAT_CHECKED"
  | 41 | "SEND_CHAT_REMOVED"
  | 42 | "NOTIFIED_FORCE_SYNC"
  | 43 | "SEND_CONTENT"
  | 44 | "SEND_MESSAGE_MYHOME"
  | 45 | "NOTIFIED_UPDATE_CONTENT_PREVIEW"
  | 46 | "REMOVE_ALL_MESSAGES"
  | 47 | "NOTIFIED_UPDATE_PURCHASES"
  | 48 | "DUMMY"
  | 49 | "UPDATE_CONTACT"
  | 50 | "NOTIFIED_RECEIVED_CALL"
  | 51 | "CANCEL_CALL"
  | 52 | "NOTIFIED_REDIRECT"
  | 53 | "NOTIFIED_CHANNEL_SYNC"
  | 54 | "FAILED_SEND_MESSAGE"
  | 55 | "NOTIFIED_READ_MESSAGE"
  | 56 | "FAILED_EMAIL_CONFIRMATION"
  | 58 | "NOTIFIED_CHAT_CONTENT"
  | 59 | "NOTIFIED_PUSH_NOTICENTER_ITEM"
  | 60 | "NOTIFIED_JOIN_CHAT"
  | 61 | "NOTIFIED_LEAVE_CHAT"
  | 62 | "NOTIFIED_TYPING"
  | 63 | "FRIEND_REQUEST_ACCEPTED"
  | 64 | "DESTROY_MESSAGE"
  | 65 | "NOTIFIED_DESTROY_MESSAGE"
  | 66 | "UPDATE_PUBLICKEYCHAIN"
  | 67 | "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
  | 68 | "NOTIFIED_BLOCK_CONTACT"
  | 69 | "NOTIFIED_UNBLOCK_CONTACT"
  | 70 | "UPDATE_GROUPPREFERENCE"
  | 71 | "NOTIFIED_PAYMENT_EVENT"
  | 72 | "REGISTER_E2EE_PUBLICKEY"
  | 73 | "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
  | 74 | "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
  | 75 | "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
  | 76 | "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
  | 77 | "NOTIFIED_E2EE_KEY_UPDATE"
  | 78 | "NOTIFIED_BUDDY_UPDATE_PROFILE"
  | 79 | "NOTIFIED_UPDATE_LINEAT_TABS"
  | 80 | "UPDATE_ROOM"
  | 81 | "NOTIFIED_BEACON_DETECTED"
  | 82 | "UPDATE_EXTENDED_PROFILE"
  | 83 | "ADD_FOLLOW"
  | 84 | "NOTIFIED_ADD_FOLLOW"
  | 85 | "DELETE_FOLLOW"
  | 86 | "NOTIFIED_DELETE_FOLLOW"
  | 87 | "UPDATE_TIMELINE_SETTINGS"
  | 88 | "NOTIFIED_FRIEND_REQUEST"
  | 89 | "UPDATE_RINGBACK_TONE"
  | 90 | "NOTIFIED_POSTBACK"
  | 91 | "RECEIVE_READ_WATERMARK"
  | 92 | "NOTIFIED_MESSAGE_DELIVERED"
  | 93 | "NOTIFIED_UPDATE_CHAT_BAR"
  | 94 | "NOTIFIED_CHATAPP_INSTALLED"
  | 95 | "NOTIFIED_CHATAPP_UPDATED"
  | 96 | "NOTIFIED_CHATAPP_NEW_MARK"
  | 97 | "NOTIFIED_CHATAPP_DELETED"
  | 98 | "NOTIFIED_CHATAPP_SYNC"
  | 99 | "NOTIFIED_UPDATE_MESSAGE"
  | 100 | "UPDATE_CHATROOMBGM"
  | 101 | "NOTIFIED_UPDATE_CHATROOMBGM"
  | 102 | "UPDATE_RINGTONE"
  | 118 | "UPDATE_USER_SETTINGS"
  | 119 | "NOTIFIED_UPDATE_STATUS_BAR"
  | 120 | "CREATE_CHAT"
  | 121 | "UPDATE_CHAT"
  | 122 | "NOTIFIED_UPDATE_CHAT"
  | 123 | "INVITE_INTO_CHAT"
  | 124 | "NOTIFIED_INVITE_INTO_CHAT"
  | 125 | "CANCEL_CHAT_INVITATION"
  | 126 | "NOTIFIED_CANCEL_CHAT_INVITATION"
  | 127 | "DELETE_SELF_FROM_CHAT"
  | 128 | "NOTIFIED_DELETE_SELF_FROM_CHAT"
  | 129 | "ACCEPT_CHAT_INVITATION"
  | 130 | "NOTIFIED_ACCEPT_CHAT_INVITATION"
  | 131 | "REJECT_CHAT_INVITATION"
  | 132 | "DELETE_OTHER_FROM_CHAT"
  | 133 | "NOTIFIED_DELETE_OTHER_FROM_CHAT"
  | 134 | "NOTIFIED_CONTACT_CALENDAR_EVENT"
  | 135 | "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL"
  | 136 | "UPDATE_THINGS_OPERATIONS"
  | 137 | "SEND_CHAT_HIDDEN"
  | 138 | "CHAT_META_SYNC_ALL"
  | 139 | "SEND_REACTION"
  | 140 | "NOTIFIED_SEND_REACTION"
  | 141 | "NOTIFIED_UPDATE_PROFILE_CONTENT"
  | 142 | "FAILED_DELIVERY_MESSAGE"
  | 143 | "SEND_ENCRYPTED_E2EE_KEY_REQUESTED"
  | 144 | "CHANNEL_PAAK_AUTHENTICATION_REQUESTED"
  | 145 | "UPDATE_PIN_STATE"
  | 146 | "NOTIFIED_PREMIUMBACKUP_STATE_CHANGED"
  | 147 | "CREATE_MULTI_PROFILE"
  | 148 | "MULTI_PROFILE_STATUS_CHANGED"
  | 149 | "DELETE_MULTI_PROFILE"
  | 150 | "UPDATE_PROFILE_MAPPING"
  | 151 | "DELETE_PROFILE_MAPPING"
  | 152 | "NOTIFIED_DESTROY_NOTICENTER_PUSH"
  ;

export type P70_g = 1000 | "INVALID_REQUEST"
  | 1001 | "RETRY_REQUIRED"
  ;

export type PaidCallType = 0 | "OUT"
  | 1 | "IN"
  | 2 | "TOLLFREE"
  | 3 | "RECORD"
  | 4 | "AD"
  | 5 | "CS"
  | 6 | "OA"
  | 7 | "OAM"
  ;

export type PayloadType = 101 | "PAYLOAD_BUY"
  | 111 | "PAYLOAD_CS"
  | 121 | "PAYLOAD_BONUS"
  | 131 | "PAYLOAD_EVENT"
  | 141 | "PAYLOAD_POINT_AUTO_EXCHANGED"
  | 151 | "PAYLOAD_POINT_MANUAL_EXCHANGED"
  ;

export type Pb1_A0 = 0 | "NORMAL"
  | 1 | "VIDEOCAM"
  | 2 | "VOIP"
  | 3 | "RECORD"
  ;

export type Pb1_A3 = 0 | "UNKNOWN"
  | 1 | "BACKGROUND_NEW_KEY_CREATED"
  | 2 | "BACKGROUND_PERIODICAL_VERIFICATION"
  | 3 | "FOREGROUND_NEW_PIN_REGISTERED"
  | 4 | "FOREGROUND_VERIFICATION"
  ;

export type Pb1_B = 1 | "SIRI"
  | 2 | "GOOGLE_ASSISTANT"
  | 3 | "OS_SHARE"
  ;

export type Pb1_D0 = 0 | "RICH_MENU_ID"
  | 1 | "STATUS_BAR"
  | 2 | "BUDDY_CAUTION_NOTICE"
  ;

export type Pb1_D4 = 1 | "AUDIO"
  | 2 | "VIDEO"
  | 3 | "FACEPLAY"
  ;

export type Pb1_D6 = 0 | "GOOGLE"
  | 1 | "BAIDU"
  | 2 | "FOURSQUARE"
  | 3 | "YAHOOJAPAN"
  | 4 | "KINGWAY"
  ;

export type Pb1_E7 = 0 | "UNKNOWN"
  | 1 | "TALK"
  | 2 | "SQUARE"
  ;

export type Pb1_EnumC12917a6 = 0 | "UNKNOWN"
  | 1 | "APP_FOREGROUND"
  | 2 | "PERIODIC"
  | 3 | "MANUAL"
  ;

export type Pb1_EnumC12926b1 = 0 | "NOT_A_FRIEND"
  | 1 | "ALWAYS"
  ;

export type Pb1_EnumC12941c2 = 26 | "BLE_LCS_API_USABLE"
  | 27 | "PROHIBIT_MINIMIZE_CHANNEL_BROWSER"
  | 28 | "ALLOW_IOS_WEBKIT"
  | 38 | "PURCHASE_LCS_API_USABLE"
  | 48 | "ALLOW_ANDROID_ENABLE_ZOOM"
  ;

export type Pb1_EnumC12945c6 = 1 | "V1"
  | 2 | "V2"
  ;

export type Pb1_EnumC12970e3 = 1 | "USER_AGE_CHECKED"
  | 2 | "USER_APPROVAL_REQUIRED"
  ;

export type Pb1_EnumC12997g2 = 0 | "PROFILE"
  | 1 | "FRIENDS"
  | 2 | "GROUP"
  ;

export type Pb1_EnumC12998g3 = 0 | "UNKNOWN"
  | 1 | "WIFI"
  | 2 | "CELLULAR_NETWORK"
  ;

export type Pb1_EnumC13009h0 = 1 | "NORMAL"
  | 2 | "LOW_BATTERY"
  ;

export type Pb1_EnumC13010h1 = 1 | "NEW"
  | 2 | "PLANET"
  ;

export type Pb1_EnumC13015h6 = 0 | "FORWARD"
  | 1 | "AUTO_REPLY"
  | 2 | "SUBORDINATE"
  | 3 | "REPLY"
  ;

export type Pb1_EnumC13022i = 0 | "SKIP"
  | 1 | "PINCODE"
  | 2 | "SECURITY_CENTER"
  ;

export type Pb1_EnumC13029i6 = 0 | "ADD"
  | 1 | "REMOVE"
  | 2 | "MODIFY"
  ;

export type Pb1_EnumC13037j0 = 0 | "UNSPECIFIED"
  | 1 | "INACTIVE"
  | 2 | "ACTIVE"
  | 3 | "DELETED"
  ;

export type Pb1_EnumC13050k = 0 | "UNKNOWN"
  | 1 | "IOS_REDUCED_ACCURACY"
  | 2 | "IOS_FULL_ACCURACY"
  | 3 | "AOS_PRECISE_LOCATION"
  | 4 | "AOS_APPROXIMATE_LOCATION"
  ;

export type Pb1_EnumC13082m3 = 0 | "SHOW"
  | 1 | "HIDE"
  ;

export type Pb1_EnumC13093n0 = 0 | "NONE"
  | 1 | "TOP"
  ;

export type Pb1_EnumC13127p6 = 0 | "NORMAL"
  | 1 | "ALERT_DISABLED"
  | 2 | "ALWAYS"
  ;

export type Pb1_EnumC13128p7 = 0 | "UNKNOWN"
  | 1 | "DIRECT_INVITATION"
  | 2 | "DIRECT_CHAT"
  | 3 | "GROUP_INVITATION"
  | 4 | "GROUP_CHAT"
  | 5 | "ROOM_INVITATION"
  | 6 | "ROOM_CHAT"
  | 7 | "FRIEND_PROFILE"
  | 8 | "DIRECT_CHAT_SELECTED"
  | 9 | "GROUP_CHAT_SELECTED"
  | 10 | "ROOM_CHAT_SELECTED"
  | 11 | "DEPRECATED"
  ;

export type Pb1_EnumC13148r0 = 1 | "ALWAYS_HIDDEN"
  | 2 | "ALWAYS_SHOWN"
  | 3 | "SHOWN_BY_CONDITION"
  ;

export type Pb1_EnumC13151r3 = 0 | "ONEWAY"
  | 1 | "BOTH"
  | 2 | "NOT_REGISTERED"
  ;

export type Pb1_EnumC13162s0 = 1 | "NOT_SUSPICIOUS"
  | 2 | "SUSPICIOUS_00"
  | 3 | "SUSPICIOUS_01"
  ;

export type Pb1_EnumC13196u6 = 0 | "COIN"
  | 1 | "CREDIT"
  | 2 | "MONTHLY"
  | 3 | "OAM"
  ;

export type Pb1_EnumC13209v5 = 0 | "DUMMY"
  | 1 | "NOTICE"
  | 2 | "MORETAB"
  | 3 | "STICKERSHOP"
  | 4 | "CHANNEL"
  | 5 | "DENY_KEYWORD"
  | 6 | "CONNECTIONINFO"
  | 7 | "BUDDY"
  | 8 | "TIMELINEINFO"
  | 9 | "THEMESHOP"
  | 10 | "CALLRATE"
  | 11 | "CONFIGURATION"
  | 12 | "STICONSHOP"
  | 13 | "SUGGESTDICTIONARY"
  | 14 | "SUGGESTSETTINGS"
  | 15 | "USERSETTINGS"
  | 16 | "ANALYTICSINFO"
  | 17 | "SEARCHPOPULARKEYWORD"
  | 18 | "SEARCHNOTICE"
  | 19 | "TIMELINE"
  | 20 | "SEARCHPOPULARCATEGORY"
  | 21 | "EXTENDEDPROFILE"
  | 22 | "SEASONALMARKETING"
  | 23 | "NEWSTAB"
  | 24 | "SUGGESTDICTIONARYV2"
  | 25 | "CHATAPPSYNC"
  | 26 | "AGREEMENTS"
  | 27 | "INSTANTNEWS"
  | 28 | "EMOJI_MAPPING"
  | 29 | "SEARCHBARKEYWORDS"
  | 30 | "SHOPPING"
  | 31 | "CHAT_EFFECT_BACKGROUND"
  | 32 | "CHAT_EFFECT_KEYWORD"
  | 33 | "SEARCHINDEX"
  | 34 | "HUBTAB"
  | 35 | "PAY_RULE_UPDATED"
  | 36 | "SMARTCH"
  | 37 | "HOME_SERVICE_LIST"
  | 38 | "TIMELINESTORY"
  | 39 | "WALLET_TAB"
  | 40 | "POD_TAB"
  | 41 | "HOME_SAFETY_CHECK"
  | 42 | "HOME_SEASONAL_EFFECT"
  | 43 | "OPENCHAT_MAIN"
  | 44 | "CHAT_EFFECT_CONTENT_METADATA_TAG"
  | 45 | "VOOM_LIVE_STATE_CHANGED"
  | 46 | "PROFILE_STUDIO_N_BADGE"
  | 47 | "LYP_FONT"
  | 48 | "TIMELINESTORY_OA"
  | 49 | "TRAVEL"
  ;

export type Pb1_EnumC13221w3 = 0 | "UNKNOWN"
  | 1 | "EUROPEAN_ECONOMIC_AREA"
  ;

export type Pb1_EnumC13222w4 = 1 | "OBS_VIDEO"
  | 2 | "OBS_GENERAL"
  | 3 | "OBS_RINGBACK_TONE"
  ;

export type Pb1_EnumC13237x5 = 1 | "AUDIO"
  | 2 | "VIDEO"
  | 3 | "LIVE"
  | 4 | "PHOTOBOOTH"
  ;

export type Pb1_EnumC13238x6 = 0 | "NOT_SPECIFIED"
  | 1 | "VALID"
  | 2 | "VERIFICATION_REQUIRED"
  | 3 | "NOT_PERMITTED"
  | 4 | "LIMIT_EXCEEDED"
  | 5 | "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  ;

export type Pb1_EnumC13251y5 = 1 | "STANDARD"
  | 2 | "CONSTELLA"
  ;

export type Pb1_EnumC13252y6 = 0 | "ALL"
  | 1 | "PROFILE"
  | 2 | "SETTINGS"
  | 3 | "CONFIGURATIONS"
  | 4 | "CONTACT"
  | 5 | "GROUP"
  | 6 | "E2EE"
  | 7 | "MESSAGE"
  ;

export type Pb1_EnumC13260z0 = 0 | "ON_AIR"
  | 1 | "LIVE"
  | 2 | "GLP"
  ;

export type Pb1_EnumC13267z7 = 1 | "NOTIFICATION_SETTING"
  | 255 | "ALL"
  ;

export type Pb1_F0 = 0 | "NA"
  | 1 | "FRIEND_VIEW"
  | 2 | "OFFICIAL_ACCOUNT_VIEW"
  ;

export type Pb1_F4 = 1 | "INCOMING"
  | 2 | "OUTGOING"
  ;

export type Pb1_F5 = 0 | "UNKNOWN"
  | 1 | "SUCCESS"
  | 2 | "REQUIRE_SERVER_SIDE_EMAIL"
  | 3 | "REQUIRE_CLIENT_SIDE_EMAIL"
  ;

export type Pb1_F6 = 0 | "JBU"
  | 1 | "LIP"
  ;

export type Pb1_G3 = 1 | "PROMOTION_FRIENDS_INVITE"
  | 2 | "CAPABILITY_SERVER_SIDE_SMS"
  | 3 | "LINE_CLIENT_ANALYTICS_CONFIGURATION"
  ;

export type Pb1_G4 = 1 | "TIMELINE"
  | 2 | "NEARBY"
  | 3 | "SQUARE"
  ;

export type Pb1_G6 = 2 | "NICE"
  | 3 | "LOVE"
  | 4 | "FUN"
  | 5 | "AMAZING"
  | 6 | "SAD"
  | 7 | "OMG"
  ;

export type Pb1_H6 = 0 | "PUBLIC"
  | 1 | "PRIVATE"
  ;

export type Pb1_I6 = 0 | "NEVER_SHOW"
  | 1 | "ONE_WAY"
  | 2 | "MUTUAL"
  ;

export type Pb1_J4 = 0 | "OTHER"
  | 1 | "INITIALIZATION"
  | 2 | "PERIODIC_SYNC"
  | 3 | "MANUAL_SYNC"
  | 4 | "LOCAL_DB_CORRUPTED"
  ;

export type Pb1_K2 = 1 | "CHANNEL_INFO"
  | 2 | "CHANNEL_TOKEN"
  | 4 | "COMMON_DOMAIN"
  | 255 | "ALL"
  ;

export type Pb1_K6 = 1 | "EMAIL"
  | 2 | "DISPLAY_NAME"
  | 4 | "PHONETIC_NAME"
  | 8 | "PICTURE"
  | 16 | "STATUS_MESSAGE"
  | 32 | "ALLOW_SEARCH_BY_USERID"
  | 64 | "ALLOW_SEARCH_BY_EMAIL"
  | 128 | "BUDDY_STATUS"
  | 256 | "MUSIC_PROFILE"
  | 512 | "AVATAR_PROFILE"
  | 2147483647 | "ALL"
  ;

export type Pb1_L2 = 0 | "SYNC"
  | 1 | "REMOVE"
  | 2 | "REMOVE_ALL"
  ;

export type Pb1_L4 = 0 | "UNKNOWN"
  | 1 | "REVISION_GAP_TOO_LARGE_CLIENT"
  | 2 | "REVISION_GAP_TOO_LARGE_SERVER"
  | 3 | "OPERATION_EXPIRED"
  | 4 | "REVISION_HOLE"
  | 5 | "FORCE_TRIGGERED"
  ;

export type Pb1_M6 = 0 | "OWNER"
  | 1 | "FRIEND"
  ;

export type Pb1_N6 = 1 | "NFT"
  | 2 | "AVATAR"
  | 3 | "SNOW"
  | 4 | "ARCZ"
  | 5 | "FRENZ"
  ;

export type Pb1_O2 = 1 | "NAME"
  | 2 | "PICTURE_STATUS"
  | 4 | "PREVENTED_JOIN_BY_TICKET"
  | 8 | "NOTIFICATION_SETTING"
  | 16 | "INVITATION_TICKET"
  | 32 | "FAVORITE_TIMESTAMP"
  | 64 | "CHAT_TYPE"
  ;

export type Pb1_O6 = 1 | "DEFAULT"
  | 2 | "MULTI_PROFILE"
  ;

export type Pb1_P6 = 0 | "HIDDEN"
  | 1000 | "PUBLIC"
  ;

export type Pb1_Q2 = 0 | "BACKGROUND"
  | 1 | "KEYWORD"
  | 2 | "CONTENT_METADATA_TAG_BASED"
  ;

export type Pb1_R3 = 1 | "BEACON_AGREEMENT"
  | 2 | "BLUETOOTH"
  | 3 | "SHAKE_AGREEMENT"
  | 4 | "AUTO_SUGGEST"
  | 5 | "CHATROOM_CAPTURE"
  | 6 | "CHATROOM_MINIMIZEBROWSER"
  | 7 | "CHATROOM_MOBILESAFARI"
  | 8 | "VIDEO_HIGHTLIGHT_WIZARD"
  | 9 | "CHAT_FOLDER"
  | 10 | "BLUETOOTH_SCAN"
  | 11 | "AUTO_SUGGEST_FOLLOW_UP"
  ;

export type Pb1_S7 = 1 | "NONE"
  | 2 | "ALL"
  ;

export type Pb1_T3 = 1 | "LOCATION_OS"
  | 2 | "LOCATION_APP"
  | 3 | "VIDEO_AUTO_PLAY"
  | 4 | "HNI"
  | 5 | "AUTO_SUGGEST_LANG"
  | 6 | "CHAT_EFFECT_CACHED_CONTENT_LIST"
  | 7 | "IFA"
  | 8 | "ACCURACY_MODE"
  ;

export type Pb1_T7 = 0 | "SYNC"
  | 1 | "REPORT"
  ;

export type Pb1_V7 = 0 | "UNSPECIFIED"
  | 1 | "UNKNOWN"
  | 2 | "INITIALIZATION"
  | 3 | "OPERATION"
  | 4 | "FULL_SYNC"
  | 5 | "AUTO_REPAIR"
  | 6 | "MANUAL_REPAIR"
  | 7 | "INTERNAL"
  | 8 | "USER_INITIATED"
  ;

export type Pb1_W2 = 0 | "ANYONE_IN_CHAT"
  | 1 | "CREATOR_ONLY"
  | 2 | "NO_ONE"
  ;

export type Pb1_W3 = 0 | "ILLEGAL_ARGUMENT"
  | 1 | "AUTHENTICATION_FAILED"
  | 2 | "INTERNAL_ERROR"
  | 3 | "RESTORE_KEY_FIRST"
  | 4 | "NO_BACKUP"
  | 6 | "INVALID_PIN"
  | 7 | "PERMANENTLY_LOCKED"
  | 8 | "INVALID_PASSWORD"
  | 9 | "MASTER_KEY_CONFLICT"
  ;

export type Pb1_X1 = 0 | "MESSAGE"
  | 1 | "MESSAGE_NOTIFICATION"
  | 2 | "NOTIFICATION_CENTER"
  ;

export type Pb1_X2 = 0 | "MESSAGE"
  | 1 | "NOTE"
  | 2 | "CHANNEL"
  ;

export type Pb1_Z2 = 0 | "GROUP"
  | 1 | "ROOM"
  | 2 | "PEER"
  ;

export type Pb1_gd = 1 | "OVER"
  | 2 | "UNDER"
  | 3 | "UNDEFINED"
  ;

export type Pb1_od = 0 | "UNKNOWN"
  | 1 | "LOCATION"
  ;

export type PointErrorCode = 3001 | "REQUEST_DUPLICATION"
  | 3002 | "INVALID_PARAMETER"
  | 3003 | "NOT_ENOUGH_BALANCE"
  | 3004 | "AUTHENTICATION_FAIL"
  | 3005 | "API_ACCESS_FORBIDDEN"
  | 3006 | "MEMBER_ACCOUNT_NOT_FOUND"
  | 3007 | "SERVICE_ACCOUNT_NOT_FOUND"
  | 3008 | "TRANSACTION_NOT_FOUND"
  | 3009 | "ALREADY_REVERSED_TRANSACTION"
  | 3010 | "MESSAGE_NOT_READABLE"
  | 3011 | "HTTP_REQUEST_METHOD_NOT_SUPPORTED"
  | 3012 | "HTTP_MEDIA_TYPE_NOT_SUPPORTED"
  | 3013 | "NOT_ALLOWED_TO_DEPOSIT"
  | 3014 | "NOT_ALLOWED_TO_PAY"
  | 3015 | "TRANSACTION_ACCESS_FORBIDDEN"
  | 4001 | "INVALID_SERVICE_CONFIGURATION"
  | 5004 | "DCS_COMMUNICATION_FAIL"
  | 5007 | "UPDATE_BALANCE_FAIL"
  | 5888 | "SYSTEM_MAINTENANCE"
  | 5999 | "SYSTEM_ERROR"
  ;

export type Q70_q = 0 | "UNKNOWN"
  | 1 | "FACEBOOK"
  | 2 | "APPLE"
  | 3 | "GOOGLE"
  ;

export type Q70_r = 0 | "INTERNAL_ERROR"
  | 1 | "ILLEGAL_ARGUMENT"
  | 2 | "VERIFICATION_FAILED"
  | 4 | "RETRY_LATER"
  | 5 | "HUMAN_VERIFICATION_REQUIRED"
  | 101 | "APP_UPGRADE_REQUIRED"
  ;

export type Qj_EnumC13584a = 0 | "NOT_DETERMINED"
  | 1 | "RESTRICTED"
  | 2 | "DENIED"
  | 3 | "AUTHORIZED"
  ;

export type Qj_EnumC13585b = 1 | "WHITE"
  | 2 | "BLACK"
  ;

export type Qj_EnumC13588e = 1 | "LIGHT"
  | 2 | "DARK"
  ;

export type Qj_EnumC13592i = 0 | "ILLEGAL_ARGUMENT"
  | 1 | "INTERNAL_ERROR"
  | 2 | "CONNECTION_ERROR"
  | 3 | "AUTHENTICATION_FAILED"
  | 4 | "NEED_PERMISSION_APPROVAL"
  | 5 | "COIN_NOT_USABLE"
  | 6 | "WEBVIEW_NOT_ALLOWED"
  ;

export type Qj_EnumC13597n = 1 | "INVALID_REQUEST"
  | 2 | "UNAUTHORIZED"
  | 3 | "CONSENT_REQUIRED"
  | 4 | "VERSION_UPDATE_REQUIRED"
  | 5 | "COMPREHENSIVE_AGREEMENT_REQUIRED"
  | 6 | "SPLASH_SCREEN_REQUIRED"
  | 7 | "PERMANENT_LINK_INVALID_REQUEST"
  | 8 | "NO_DESTINATION_URL"
  | 9 | "SERVICE_ALREADY_TERMINATED"
  | 100 | "SERVER_ERROR"
  ;

export type Qj_EnumC13604v = 1 | "GEOLOCATION"
  | 2 | "ADVERTISING_ID"
  | 3 | "BLUETOOTH_LE"
  | 4 | "QR_CODE"
  | 5 | "ADVERTISING_SDK"
  | 6 | "ADD_TO_HOME"
  | 7 | "SHARE_TARGET_MESSAGE"
  | 8 | "VIDEO_AUTO_PLAY"
  | 9 | "PROFILE_PLUS"
  | 10 | "SUBWINDOW_OPEN"
  | 11 | "SUBWINDOW_COMMON_MODULE"
  | 12 | "NO_LIFF_REFERRER"
  | 13 | "SKIP_CHANNEL_VERIFICATION_SCREEN"
  | 14 | "PROVIDER_PAGE"
  | 15 | "BASIC_AUTH"
  | 16 | "SIRI_DONATION"
  ;

export type Qj_EnumC13605w = 1 | "ALLOW_DIRECT_LINK"
  | 2 | "ALLOW_DIRECT_LINK_V2"
  ;

export type Qj_EnumC13606x = 1 | "LIGHT"
  | 2 | "LIGHT_TRANSLUCENT"
  | 3 | "DARK_TRANSLUCENT"
  | 4 | "LIGHT_ICON"
  | 5 | "DARK_ICON"
  ;

export type Qj_a0 = 1 | "CONCAT"
  | 2 | "REPLACE"
  ;

export type Qj_e0 = 0 | "SUCCESS"
  | 1 | "FAILURE"
  | 2 | "CANCEL"
  ;

export type Qj_h0 = 1 | "RIGHT"
  | 2 | "LEFT"
  ;

export type Qj_i0 = 1 | "FULL"
  | 2 | "TALL"
  | 3 | "COMPACT"
  ;

export type R70_e = 0 | "INTERNAL_ERROR"
  | 1 | "ILLEGAL_ARGUMENT"
  | 2 | "VERIFICATION_FAILED"
  | 3 | "EXTERNAL_SERVICE_UNAVAILABLE"
  | 4 | "RETRY_LATER"
  | 100 | "INVALID_CONTEXT"
  | 101 | "NOT_SUPPORTED"
  | 102 | "FORBIDDEN"
  | 201 | "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR"
  ;

export type RegistrationType = 0 | "PHONE"
  | 1 | "EMAIL_WAP"
  | 2305 | "FACEBOOK"
  | 2306 | "SINA"
  | 2307 | "RENREN"
  | 2308 | "FEIXIN"
  | 2309 | "APPLE"
  | 2310 | "YAHOOJAPAN"
  | 2311 | "GOOGLE"
  ;

export type ReportType = 1 | "ADVERTISING"
  | 2 | "GENDER_HARASSMENT"
  | 3 | "HARASSMENT"
  | 4 | "OTHER"
  | 5 | "IRRELEVANT_CONTENT"
  | 6 | "IMPERSONATION"
  | 7 | "SCAM"
  ;

export type S70_a = 0 | "INTERNAL_ERROR"
  | 1 | "ILLEGAL_ARGUMENT"
  | 2 | "VERIFICATION_FAILED"
  | 3 | "RETRY_LATER"
  | 100 | "INVALID_CONTEXT"
  | 101 | "APP_UPGRADE_REQUIRED"
  ;

export type SettingsAttributeEx = 0 | "NOTIFICATION_ENABLE"
  | 1 | "NOTIFICATION_MUTE_EXPIRATION"
  | 2 | "NOTIFICATION_NEW_MESSAGE"
  | 3 | "NOTIFICATION_GROUP_INVITATION"
  | 4 | "NOTIFICATION_SHOW_MESSAGE"
  | 5 | "NOTIFICATION_INCOMING_CALL"
  | 6 | "PRIVACY_SYNC_CONTACTS"
  | 7 | "PRIVACY_SEARCH_BY_PHONE_NUMBER"
  | 8 | "NOTIFICATION_SOUND_MESSAGE"
  | 9 | "NOTIFICATION_SOUND_GROUP"
  | 10 | "CONTACT_MY_TICKET"
  | 11 | "IDENTITY_PROVIDER"
  | 12 | "IDENTITY_IDENTIFIER"
  | 13 | "PRIVACY_SEARCH_BY_USERID"
  | 14 | "PRIVACY_SEARCH_BY_EMAIL"
  | 15 | "PREFERENCE_LOCALE"
  | 16 | "NOTIFICATION_DISABLED_WITH_SUB"
  | 17 | "NOTIFICATION_PAYMENT"
  | 18 | "SECURITY_CENTER_SETTINGS"
  | 19 | "SNS_ACCOUNT"
  | 20 | "PHONE_REGISTRATION"
  | 21 | "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
  | 22 | "CUSTOM_MODE"
  | 23 | "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
  | 24 | "EMAIL_CONFIRMATION_STATUS"
  | 25 | "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
  | 26 | "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
  | 27 | "PRIVACY_AGREE_USE_PAIDCALL"
  | 28 | "ACCOUNT_MIGRATION_PINCODE"
  | 29 | "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
  | 30 | "PRIVACY_ALLOW_FRIEND_REQUEST"
  | 31 | "PWLESS_PRIMARY_CREDENTIAL_REGISTRATION"
  | 32 | "ALLOWED_TO_CONNECT_EAP_ACCOUNT"
  | 33 | "E2EE_ENABLE"
  | 34 | "HITOKOTO_BACKUP_REQUESTED"
  | 35 | "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME"
  | 36 | "CONTACT_ALLOW_FOLLOWING"
  | 37 | "PRIVACY_ALLOW_NEARBY"
  | 38 | "AGREEMENT_NEARBY"
  | 39 | "AGREEMENT_SQUARE"
  | 40 | "NOTIFICATION_MENTION"
  | 41 | "ALLOW_UNREGISTRATION_SECONDARY_DEVICE"
  | 42 | "AGREEMENT_BOT_USE"
  | 43 | "AGREEMENT_SHAKE_FUNCTION"
  | 44 | "AGREEMENT_MOBILE_CONTACT_NAME"
  | 45 | "NOTIFICATION_THUMBNAIL"
  | 46 | "AGREEMENT_SOUND_TO_TEXT"
  | 47 | "AGREEMENT_PRIVACY_POLICY_VERSION"
  | 48 | "AGREEMENT_AD_BY_WEB_ACCESS"
  | 49 | "AGREEMENT_PHONE_NUMBER_MATCHING"
  | 50 | "AGREEMENT_COMMUNICATION_INFO"
  | 51 | "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS"
  | 52 | "AGREEMENT_THINGS_WIRELESS_COMMUNICATION"
  | 53 | "AGREEMENT_GDPR"
  | 54 | "PRIVACY_STATUS_MESSAGE_HISTORY"
  | 55 | "AGREEMENT_PROVIDE_LOCATION"
  | 56 | "AGREEMENT_BEACON"
  | 57 | "PRIVACY_PROFILE_HISTORY"
  | 58 | "AGREEMENT_CONTENTS_SUGGEST"
  | 59 | "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION"
  | 60 | "PRIVACY_AGE_RESULT"
  | 61 | "PRIVACY_AGE_RESULT_RECEIVED"
  | 62 | "AGREEMENT_OCR_IMAGE_COLLECTION"
  | 63 | "PRIVACY_ALLOW_FOLLOW"
  | 64 | "PRIVACY_SHOW_FOLLOW_LIST"
  | 65 | "NOTIFICATION_BADGE_TALK_ONLY"
  | 66 | "AGREEMENT_ICNA"
  | 67 | "NOTIFICATION_REACTION"
  | 68 | "AGREEMENT_MID"
  | 69 | "HOME_NOTIFICATION_NEW_FRIEND"
  | 70 | "HOME_NOTIFICATION_FAVORITE_FRIEND_UPDATE"
  | 71 | "HOME_NOTIFICATION_GROUP_MEMBER_UPDATE"
  | 72 | "HOME_NOTIFICATION_BIRTHDAY"
  | 73 | "AGREEMENT_LINE_OUT_USE"
  | 74 | "AGREEMENT_LINE_OUT_PROVIDE_INFO"
  | 75 | "NOTIFICATION_SHOW_PROFILE_IMAGE"
  | 76 | "AGREEMENT_PDPA"
  | 77 | "AGREEMENT_LOCATION_VERSION"
  | 78 | "ALLOWED_TO_SHOW_ZHD_PAGE"
  | 79 | "AGREEMENT_SNOW_AI_AVATAR"
  | 80 | "EAP_ONLY_ACCOUNT_TARGET_COUNTRY"
  | 81 | "AGREEMENT_LYP_PREMIUM_ALBUM"
  | 82 | "AGREEMENT_LYP_PREMIUM_ALBUM_VERSION"
  | 83 | "AGREEMENT_ALBUM_USAGE_DATA"
  | 84 | "AGREEMENT_ALBUM_USAGE_DATA_VERSION"
  | 85 | "AGREEMENT_LYP_PREMIUM_BACKUP"
  | 86 | "AGREEMENT_LYP_PREMIUM_BACKUP_VERSION"
  | 87 | "AGREEMENT_OA_AI_ASSISTANT"
  | 88 | "AGREEMENT_OA_AI_ASSISTANT_VERSION"
  | 89 | "AGREEMENT_LYP_PREMIUM_MULTI_PROFILE"
  | 90 | "AGREEMENT_LYP_PREMIUM_MULTI_PROFILE_VERSION"
  ;

export type SnsIdType = 1 | "FACEBOOK"
  | 2 | "SINA"
  | 3 | "RENREN"
  | 4 | "FEIXIN"
  | 5 | "BBM"
  | 6 | "APPLE"
  | 7 | "YAHOOJAPAN"
  | 8 | "GOOGLE"
  ;

export type SpammerReason = 0 | "OTHER"
  | 1 | "ADVERTISING"
  | 2 | "GENDER_HARASSMENT"
  | 3 | "HARASSMENT"
  | 4 | "IMPERSONATION"
  | 5 | "SCAM"
  ;

export type SpotCategory = 0 | "UNKNOWN"
  | 1 | "GOURMET"
  | 2 | "BEAUTY"
  | 3 | "TRAVEL"
  | 4 | "SHOPPING"
  | 5 | "ENTERTAINMENT"
  | 6 | "SPORTS"
  | 7 | "TRANSPORT"
  | 8 | "LIFE"
  | 9 | "HOSPITAL"
  | 10 | "FINANCE"
  | 11 | "EDUCATION"
  | 12 | "OTHER"
  | 10000 | "ALL"
  ;

export type SquareAttribute = 1 | "NAME"
  | 2 | "WELCOME_MESSAGE"
  | 3 | "PROFILE_IMAGE"
  | 4 | "DESCRIPTION"
  | 6 | "SEARCHABLE"
  | 7 | "CATEGORY"
  | 8 | "INVITATION_URL"
  | 9 | "ABLE_TO_USE_INVITATION_URL"
  | 10 | "STATE"
  | 11 | "EMBLEMS"
  | 12 | "JOIN_METHOD"
  | 13 | "CHANNEL_ID"
  | 14 | "SVC_TAGS"
  ;

export type SquareAuthorityAttribute = 1 | "UPDATE_SQUARE_PROFILE"
  | 2 | "INVITE_NEW_MEMBER"
  | 3 | "APPROVE_JOIN_REQUEST"
  | 4 | "CREATE_POST"
  | 5 | "CREATE_OPEN_SQUARE_CHAT"
  | 6 | "DELETE_SQUARE_CHAT_OR_POST"
  | 7 | "REMOVE_SQUARE_MEMBER"
  | 8 | "GRANT_ROLE"
  | 9 | "ENABLE_INVITATION_TICKET"
  | 10 | "CREATE_CHAT_ANNOUNCEMENT"
  | 11 | "UPDATE_MAX_CHAT_MEMBER_COUNT"
  | 12 | "USE_READONLY_DEFAULT_CHAT"
  | 13 | "SEND_ALL_MENTION"
  ;

export type SquareChatType = 1 | "OPEN"
  | 2 | "SECRET"
  | 3 | "ONE_ON_ONE"
  | 4 | "SQUARE_DEFAULT"
  ;

export type SquareMemberAttribute = 1 | "DISPLAY_NAME"
  | 2 | "PROFILE_IMAGE"
  | 3 | "ABLE_TO_RECEIVE_MESSAGE"
  | 5 | "MEMBERSHIP_STATE"
  | 6 | "ROLE"
  | 7 | "PREFERENCE"
  ;

export type SquareMembershipState = 1 | "JOIN_REQUESTED"
  | 2 | "JOINED"
  | 3 | "REJECTED"
  | 4 | "LEFT"
  | 5 | "KICK_OUT"
  | 6 | "BANNED"
  | 7 | "DELETED"
  | 8 | "JOIN_REQUEST_WITHDREW"
  ;

export type StickerResourceType = 1 | "STATIC"
  | 2 | "ANIMATION"
  | 3 | "SOUND"
  | 4 | "ANIMATION_SOUND"
  | 5 | "POPUP"
  | 6 | "POPUP_SOUND"
  | 7 | "NAME_TEXT"
  | 8 | "PER_STICKER_TEXT"
  ;

export type SyncCategory = 0 | "PROFILE"
  | 1 | "SETTINGS"
  | 2 | "OPS"
  | 3 | "CONTACT"
  | 4 | "RECOMMEND"
  | 5 | "BLOCK"
  | 6 | "GROUP"
  | 7 | "ROOM"
  | 8 | "NOTIFICATION"
  | 9 | "ADDRESS_BOOK"
  ;

export type T70_C = 0 | "INITIAL_BACKUP_STATE_UNSPECIFIED"
  | 1 | "INITIAL_BACKUP_STATE_READY"
  | 2 | "INITIAL_BACKUP_STATE_MESSAGE_ONGOING"
  | 3 | "INITIAL_BACKUP_STATE_FINISHED"
  | 4 | "INITIAL_BACKUP_STATE_ABORTED"
  | 5 | "INITIAL_BACKUP_STATE_MEDIA_ONGOING"
  ;

export type T70_EnumC14390b = 0 | "UNKNOWN"
  | 1 | "PHONE_NUMBER"
  | 2 | "EMAIL"
  ;

export type T70_EnumC14392c = 0 | "UNKNOWN"
  | 1 | "SKIP"
  | 2 | "PASSWORD"
  | 3 | "WEB_BASED"
  | 4 | "EMAIL_BASED"
  | 11 | "NONE"
  ;

export type T70_EnumC14406j = 0 | "INTERNAL_ERROR"
  | 1 | "ILLEGAL_ARGUMENT"
  | 2 | "VERIFICATION_FAILED"
  | 3 | "NOT_FOUND"
  | 4 | "RETRY_LATER"
  | 5 | "HUMAN_VERIFICATION_REQUIRED"
  | 100 | "INVALID_CONTEXT"
  | 101 | "APP_UPGRADE_REQUIRED"
  ;

export type T70_K = 0 | "UNKNOWN"
  | 1 | "SMS"
  | 2 | "IVR"
  | 3 | "SMSPULL"
  ;

export type T70_L = 0 | "PREMIUM_TYPE_UNSPECIFIED"
  | 1 | "PREMIUM_TYPE_LYP"
  | 2 | "PREMIUM_TYPE_LINE"
  ;

export type T70_Z0 = 1 | "PHONE_VERIF"
  | 2 | "EAP_VERIF"
  ;

export type T70_e1 = 0 | "UNKNOWN"
  | 1 | "SKIP"
  | 2 | "WEB_BASED"
  ;

export type T70_j1 = 0 | "UNKNOWN"
  | 1 | "FACEBOOK"
  | 2 | "APPLE"
  | 3 | "GOOGLE"
  ;

export type U70_c = 0 | "INTERNAL_ERROR"
  | 1 | "FORBIDDEN"
  | 100 | "INVALID_CONTEXT"
  ;

export type Uf_EnumC14873o = 1 | "ANDROID"
  | 2 | "IOS"
  ;

export type VR0_l = 1 | "DEFAULT"
  | 2 | "UEN"
  ;

export type VerificationMethod = 0 | "NO_AVAILABLE"
  | 1 | "PIN_VIA_SMS"
  | 2 | "CALLERID_INDIGO"
  | 4 | "PIN_VIA_TTS"
  | 10 | "SKIP"
  ;

export type VerificationResult = 0 | "FAILED"
  | 1 | "OK_NOT_REGISTERED_YET"
  | 2 | "OK_REGISTERED_WITH_SAME_DEVICE"
  | 3 | "OK_REGISTERED_WITH_ANOTHER_DEVICE"
  ;

export type WR0_a = 1 | "FREE"
  | 2 | "PREMIUM"
  ;

export type a80_EnumC16644b = 0 | "UNKNOWN"
  | 1 | "FACEBOOK"
  | 2 | "APPLE"
  | 3 | "GOOGLE"
  ;

export type FetchDirection = 1 | "FORWARD"
  | 2 | "BACKWARD"
  ;

export type LiveTalkEventType = 1 | "NOTIFIED_UPDATE_LIVE_TALK_TITLE"
  | 2 | "NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT"
  | 3 | "NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE"
  | 4 | "NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK"
  | 5 | "NOTIFIED_UPDATE_SQUARE_MEMBER"
  ;

export type LiveTalkReportType = 1 | "ADVERTISING"
  | 2 | "GENDER_HARASSMENT"
  | 3 | "HARASSMENT"
  | 4 | "IRRELEVANT_CONTENT"
  | 5 | "OTHER"
  | 6 | "IMPERSONATION"
  | 7 | "SCAM"
  ;

export type MessageSummaryReportType = 1 | "LEGAL_VIOLATION"
  | 2 | "HARASSMENT"
  | 3 | "PERSONAL_IDENTIFIER"
  | 4 | "FALSE_INFORMATION"
  | 5 | "GENDER_HARASSMENT"
  | 6 | "OTHER"
  ;

export type NotificationPostType = 2 | "POST_MENTION"
  | 3 | "POST_LIKE"
  | 4 | "POST_COMMENT"
  | 5 | "POST_COMMENT_MENTION"
  | 6 | "POST_COMMENT_LIKE"
  | 7 | "POST_RELAY_JOIN"
  ;

export type SquareEventStatus = 1 | "NORMAL"
  | 2 | "ALERT_DISABLED"
  ;

export type SquareEventType = 0 | "RECEIVE_MESSAGE"
  | 1 | "SEND_MESSAGE"
  | 2 | "NOTIFIED_JOIN_SQUARE_CHAT"
  | 3 | "NOTIFIED_INVITE_INTO_SQUARE_CHAT"
  | 4 | "NOTIFIED_LEAVE_SQUARE_CHAT"
  | 5 | "NOTIFIED_DESTROY_MESSAGE"
  | 6 | "NOTIFIED_MARK_AS_READ"
  | 7 | "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE"
  | 8 | "NOTIFIED_UPDATE_SQUARE"
  | 9 | "NOTIFIED_UPDATE_SQUARE_STATUS"
  | 10 | "NOTIFIED_UPDATE_SQUARE_AUTHORITY"
  | 11 | "NOTIFIED_UPDATE_SQUARE_MEMBER"
  | 12 | "NOTIFIED_UPDATE_SQUARE_CHAT"
  | 13 | "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS"
  | 14 | "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER"
  | 15 | "NOTIFIED_CREATE_SQUARE_MEMBER"
  | 16 | "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER"
  | 17 | "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION"
  | 18 | "NOTIFIED_SHUTDOWN_SQUARE"
  | 19 | "NOTIFIED_KICKOUT_FROM_SQUARE"
  | 20 | "NOTIFIED_DELETE_SQUARE_CHAT"
  | 21 | "NOTIFICATION_JOIN_REQUEST"
  | 22 | "NOTIFICATION_JOINED"
  | 23 | "NOTIFICATION_PROMOTED_COADMIN"
  | 24 | "NOTIFICATION_PROMOTED_ADMIN"
  | 25 | "NOTIFICATION_DEMOTED_MEMBER"
  | 26 | "NOTIFICATION_KICKED_OUT"
  | 27 | "NOTIFICATION_SQUARE_DELETE"
  | 28 | "NOTIFICATION_SQUARE_CHAT_DELETE"
  | 29 | "NOTIFICATION_MESSAGE"
  | 30 | "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME"
  | 31 | "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE"
  | 32 | "NOTIFIED_UPDATE_SQUARE_FEATURE_SET"
  | 33 | "NOTIFIED_ADD_BOT"
  | 34 | "NOTIFIED_REMOVE_BOT"
  | 36 | "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS"
  | 37 | "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT"
  | 38 | "NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT"
  | 39 | "NOTIFICATION_POST_ANNOUNCEMENT"
  | 40 | "NOTIFICATION_POST"
  | 41 | "MUTATE_MESSAGE"
  | 42 | "NOTIFICATION_NEW_CHAT_MEMBER"
  | 43 | "NOTIFIED_UPDATE_READONLY_CHAT"
  | 46 | "NOTIFIED_UPDATE_MESSAGE_STATUS"
  | 47 | "NOTIFICATION_MESSAGE_REACTION"
  | 48 | "NOTIFIED_CHAT_POPUP"
  | 49 | "NOTIFIED_SYSTEM_MESSAGE"
  | 50 | "NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET"
  | 51 | "NOTIFIED_UPDATE_LIVE_TALK"
  | 52 | "NOTIFICATION_LIVE_TALK"
  | 53 | "NOTIFIED_UPDATE_LIVE_TALK_INFO"
  | 54 | "NOTIFICATION_THREAD_MESSAGE"
  | 55 | "NOTIFICATION_THREAD_MESSAGE_REACTION"
  | 56 | "NOTIFIED_UPDATE_THREAD"
  | 57 | "NOTIFIED_UPDATE_THREAD_STATUS"
  | 58 | "NOTIFIED_UPDATE_THREAD_MEMBER"
  | 59 | "NOTIFIED_UPDATE_THREAD_ROOT_MESSAGE"
  | 60 | "NOTIFIED_UPDATE_THREAD_ROOT_MESSAGE_STATUS"
  ;

export type AdScreen = 1 | "CHATROOM"
  | 2 | "THREAD_SPACE"
  | 3 | "YOUR_THREADS"
  | 4 | "NOTE_LIST"
  | 5 | "NOTE_END"
  | 6 | "WEB_MAIN"
  | 7 | "WEB_SEARCH_RESULT"
  ;

export type BooleanState = 0 | "NONE"
  | 1 | "OFF"
  | 2 | "ON"
  ;

export type ChatroomPopupType = 1 | "IMG_TEXT"
  | 2 | "TEXT_ONLY"
  | 3 | "IMG_ONLY"
  ;

export type ContentsAttribute = 1 | "NONE"
  | 2 | "CONTENTS_HIDDEN"
  ;

export type FetchType = 1 | "DEFAULT"
  | 2 | "PREFETCH_BY_SERVER"
  | 3 | "PREFETCH_BY_CLIENT"
  ;

export type LiveTalkAttribute = 1 | "TITLE"
  | 2 | "ALLOW_REQUEST_TO_SPEAK"
  ;

export type LiveTalkRole = 1 | "HOST"
  | 2 | "CO_HOST"
  | 3 | "GUEST"
  ;

export type LiveTalkSpeakerSetting = 1 | "APPROVAL"
  | 2 | "ALL"
  ;

export type LiveTalkType = 1 | "PUBLIC"
  | 2 | "PRIVATE"
  ;

export type MessageReactionType = 0 | "ALL"
  | 1 | "UNDO"
  | 2 | "NICE"
  | 3 | "LOVE"
  | 4 | "FUN"
  | 5 | "AMAZING"
  | 6 | "SAD"
  | 7 | "OMG"
  ;

export type NotifiedMessageType = 1 | "MENTION"
  | 2 | "REPLY"
  ;

export type PopupAttribute = 1 | "NAME"
  | 2 | "ACTIVATED"
  | 3 | "STARTS_AT"
  | 4 | "ENDS_AT"
  | 5 | "CONTENT"
  ;

export type PopupType = 1 | "MAIN"
  | 2 | "CHATROOM"
  ;

export type SquareChatAttribute = 2 | "NAME"
  | 3 | "SQUARE_CHAT_IMAGE"
  | 4 | "STATE"
  | 5 | "TYPE"
  | 6 | "MAX_MEMBER_COUNT"
  | 7 | "MESSAGE_VISIBILITY"
  | 8 | "ABLE_TO_SEARCH_MESSAGE"
  ;

export type SquareChatFeatureControlState = 1 | "DISABLED"
  | 2 | "ENABLED"
  ;

export type SquareChatMemberAttribute = 4 | "MEMBERSHIP_STATE"
  | 6 | "NOTIFICATION_MESSAGE"
  | 7 | "NOTIFICATION_NEW_MEMBER"
  | 8 | "LEFT_BY_KICK_MESSAGE_LOCAL_ID"
  | 9 | "MESSAGE_LOCAL_ID_WHEN_BLOCK"
  ;

export type SquareChatMembershipState = 1 | "JOINED"
  | 2 | "LEFT"
  ;

export type SquareChatState = 0 | "ALIVE"
  | 1 | "DELETED"
  | 2 | "SUSPENDED"
  ;

export type SquareEmblem = 1 | "SUPER"
  | 2 | "OFFICIAL"
  ;

export type SquareErrorCode = 0 | "UNKNOWN"
  | 400 | "ILLEGAL_ARGUMENT"
  | 401 | "AUTHENTICATION_FAILURE"
  | 403 | "FORBIDDEN"
  | 404 | "NOT_FOUND"
  | 409 | "REVISION_MISMATCH"
  | 410 | "PRECONDITION_FAILED"
  | 500 | "INTERNAL_ERROR"
  | 501 | "NOT_IMPLEMENTED"
  | 503 | "TRY_AGAIN_LATER"
  | 505 | "MAINTENANCE"
  | 506 | "NO_PRESENCE_EXISTS"
  ;

export type SquareFeatureControlState = 1 | "DISABLED"
  | 2 | "ENABLED"
  ;

export type SquareFeatureSetAttribute = 1 | "CREATING_SECRET_SQUARE_CHAT"
  | 2 | "INVITING_INTO_OPEN_SQUARE_CHAT"
  | 3 | "CREATING_SQUARE_CHAT"
  | 4 | "READONLY_DEFAULT_CHAT"
  | 5 | "SHOWING_ADVERTISEMENT"
  | 6 | "DELEGATE_JOIN_TO_PLUG"
  | 7 | "DELEGATE_KICK_OUT_TO_PLUG"
  | 8 | "DISABLE_UPDATE_JOIN_METHOD"
  | 9 | "DISABLE_TRANSFER_ADMIN"
  | 10 | "CREATING_LIVE_TALK"
  | 11 | "DISABLE_UPDATE_SEARCHABLE"
  | 12 | "SUMMARIZING_MESSAGES"
  | 13 | "CREATING_SQUARE_THREAD"
  | 14 | "ENABLE_SQUARE_THREAD"
  | 15 | "DISABLE_CHANGE_ROLE_CO_ADMIN"
  ;

export type SquareJoinMethodType = 0 | "NONE"
  | 1 | "APPROVAL"
  | 2 | "CODE"
  ;

export type SquareMemberRelationState = 1 | "NONE"
  | 2 | "BLOCKED"
  ;

export type SquareMemberRole = 1 | "ADMIN"
  | 2 | "CO_ADMIN"
  | 10 | "MEMBER"
  ;

export type SquareMessageState = 1 | "SENT"
  | 2 | "DELETED"
  | 3 | "FORBIDDEN"
  | 4 | "UNSENT"
  ;

export type SquareMetadataAttribute = 1 | "EXCLUDED"
  | 2 | "NO_AD"
  ;

export type SquarePreferenceAttribute = 1 | "FAVORITE"
  | 2 | "NOTI_FOR_NEW_JOIN_REQUEST"
  ;

export type SquareProviderType = 1 | "UNKNOWN"
  | 2 | "YOUTUBE"
  | 3 | "OA_FANSPACE"
  ;

export type SquareState = 0 | "ALIVE"
  | 1 | "DELETED"
  | 2 | "SUSPENDED"
  ;

export type SquareThreadAttribute = 1 | "STATE"
  | 2 | "EXPIRES_AT"
  | 3 | "READ_ONLY_AT"
  ;

export type SquareThreadMembershipState = 1 | "JOINED"
  | 2 | "LEFT"
  ;

export type SquareThreadState = 1 | "ALIVE"
  | 2 | "DELETED"
  ;

export type SquareType = 0 | "CLOSED"
  | 1 | "OPEN"
  ;

export type TargetChatType = 0 | "ALL"
  | 1 | "MIDS"
  | 2 | "CATEGORIES"
  | 3 | "CHANNEL_ID"
  ;

export type TargetUserType = 0 | "ALL"
  | 1 | "MIDS"
  ;

export type do0_EnumC23139B = 1 | "CLOUD"
  | 2 | "BLE"
  | 3 | "BEACON"
  ;

export type do0_EnumC23147e = 0 | "SUCCESS"
  | 1 | "UNKNOWN_ERROR"
  | 2 | "BLUETOOTH_NOT_AVAILABLE"
  | 3 | "CONNECTION_TIMEOUT"
  | 4 | "CONNECTION_ERROR"
  | 5 | "CONNECTION_IN_PROGRESS"
  ;

export type do0_EnumC23148f = 0 | "ONETIME"
  | 1 | "AUTOMATIC"
  | 2 | "BEACON"
  ;

export type do0_G = 0 | "SUCCESS"
  | 1 | "UNKNOWN_ERROR"
  | 2 | "GATT_ERROR"
  | 3 | "GATT_OPERATION_NOT_SUPPORTED"
  | 4 | "GATT_SERVICE_NOT_FOUND"
  | 5 | "GATT_CHARACTERISTIC_NOT_FOUND"
  | 6 | "GATT_CONNECTION_CLOSED"
  | 7 | "CONNECTION_INVALID"
  ;

export type do0_M = 0 | "INTERNAL_SERVER_ERROR"
  | 1 | "UNAUTHORIZED"
  | 2 | "INVALID_REQUEST"
  | 3 | "INVALID_STATE"
  | 4096 | "DEVICE_LIMIT_EXCEEDED"
  | 4097 | "UNSUPPORTED_REGION"
  ;

export type fN0_EnumC24466B = 0 | "LINE_PREMIUM"
  | 1 | "LYP_PREMIUM"
  ;

export type fN0_EnumC24467C = 1 | "LINE"
  | 2 | "YAHOO_JAPAN"
  ;

export type fN0_EnumC24469a = 1 | "OK"
  | 2 | "NOT_SUPPORTED"
  | 3 | "UNDEFINED"
  | 4 | "NOT_ENOUGH_TICKETS"
  | 5 | "NOT_FRIENDS"
  | 6 | "NO_AGREEMENT"
  ;

export type fN0_F = 1 | "OK"
  | 2 | "NOT_SUPPORTED"
  | 3 | "UNDEFINED"
  | 4 | "CONFLICT"
  | 5 | "NOT_AVAILABLE"
  | 6 | "INVALID_INVITATION"
  | 7 | "IN_PAYMENT_FAILURE_STATE"
  ;

export type fN0_G = 1 | "APPLE"
  | 2 | "GOOGLE"
  ;

export type fN0_H = 1 | "INACTIVE"
  | 2 | "ACTIVE_FINITE"
  | 3 | "ACTIVE_INFINITE"
  ;

export type fN0_o = 1 | "AVAILABLE"
  | 2 | "ALREADY_SUBSCRIBED"
  ;

export type fN0_p = 0 | "UNKNOWN"
  | 1 | "SOFTBANK_BUNDLE"
  | 2 | "YBB_BUNDLE"
  | 3 | "YAHOO_MOBILE_BUNDLE"
  | 4 | "PPCG_BUNDLE"
  | 5 | "ENJOY_BUNDLE"
  | 6 | "YAHOO_TRIAL_BUNDLE"
  | 7 | "YAHOO_APPLE"
  | 8 | "YAHOO_GOOGLE"
  | 9 | "LINE_APPLE"
  | 10 | "LINE_GOOGLE"
  | 11 | "YAHOO_WALLET"
  ;

export type fN0_q = 0 | "UNKNOWN"
  | 1 | "NONE"
  | 16641 | "ILLEGAL_ARGUMENT"
  | 16642 | "NOT_FOUND"
  | 16643 | "NOT_AVAILABLE"
  | 16644 | "INTERNAL_SERVER_ERROR"
  | 16645 | "AUTHENTICATION_FAILED"
  ;

export type g80_EnumC24993a = 0 | "INTERNAL_ERROR"
  | 1 | "ILLEGAL_ARGUMENT"
  | 2 | "INVALID_CONTEXT"
  | 3 | "TOO_MANY_REQUESTS"
  ;

export type h80_EnumC25645e = 0 | "INTERNAL_ERROR"
  | 1 | "ILLEGAL_ARGUMENT"
  | 2 | "NOT_FOUND"
  | 3 | "RETRY_LATER"
  | 100 | "INVALID_CONTEXT"
  | 101 | "NOT_SUPPORTED"
  ;

export type I80_EnumC26392b = 0 | "UNKNOWN"
  | 1 | "SKIP"
  | 2 | "PASSWORD"
  | 4 | "EMAIL_BASED"
  | 11 | "NONE"
  ;

export type I80_EnumC26394c = 0 | "PHONE_NUMBER"
  | 1 | "APPLE"
  | 2 | "GOOGLE"
  ;

export type I80_EnumC26408j = 0 | "INTERNAL_ERROR"
  | 1 | "ILLEGAL_ARGUMENT"
  | 2 | "VERIFICATION_FAILED"
  | 3 | "NOT_FOUND"
  | 4 | "RETRY_LATER"
  | 5 | "HUMAN_VERIFICATION_REQUIRED"
  | 100 | "INVALID_CONTEXT"
  | 101 | "APP_UPGRADE_REQUIRED"
  ;

export type I80_EnumC26425y = 0 | "UNKNOWN"
  | 1 | "SMS"
  | 2 | "IVR"
  ;

export type j80_EnumC27228a = 1 | "AUTHENTICATION_FAILED"
  | 2 | "INVALID_STATE"
  | 3 | "NOT_AUTHORIZED_DEVICE"
  | 4 | "MUST_REFRESH_V3_TOKEN"
  ;

export type jO0_EnumC27533B = 1 | "PAYMENT_APPLE"
  | 2 | "PAYMENT_GOOGLE"
  ;

export type jO0_EnumC27535b = 0 | "ILLEGAL_ARGUMENT"
  | 1 | "AUTHENTICATION_FAILED"
  | 20 | "INTERNAL_ERROR"
  | 29 | "MESSAGE_DEFINED_ERROR"
  | 33 | "MAINTENANCE_ERROR"
  ;

export type jO0_EnumC27559z = 0 | "PAYMENT_PG_NONE"
  | 1 | "PAYMENT_PG_AU"
  | 2 | "PAYMENT_PG_AL"
  ;

export type jf_EnumC27712a = 1 | "NONE"
  | 2 | "DOES_NOT_RESPOND"
  | 3 | "RESPOND_MANUALLY"
  | 4 | "RESPOND_AUTOMATICALLY"
  ;

export type jf_EnumC27717f = 0 | "UNKNOWN"
  | 1 | "BAD_REQUEST"
  | 2 | "NOT_FOUND"
  | 3 | "FORBIDDEN"
  | 4 | "INTERNAL_SERVER_ERROR"
  ;

export type kf_EnumC28766a = 0 | "ILLEGAL_ARGUMENT"
  | 1 | "INTERNAL_ERROR"
  | 2 | "UNAUTHORIZED"
  ;

export type kf_o = 0 | "ANDROID"
  | 1 | "IOS"
  ;

export type kf_p = 0 | "RICHMENU"
  | 1 | "TALK_ROOM"
  ;

export type kf_r = 0 | "WEB"
  | 1 | "POSTBACK"
  | 2 | "SEND_MESSAGE"
  ;

export type kf_u = 0 | "CLICK"
  | 1 | "IMPRESSION"
  ;

export type kf_x = 0 | "UNKNOWN"
  | 1 | "PROFILE"
  | 2 | "TALK_LIST"
  | 3 | "OA_CALL"
  ;

export type n80_o = 0 | "INTERNAL_ERROR"
  | 100 | "INVALID_CONTEXT"
  | 200 | "FIDO_UNKNOWN_CREDENTIAL_ID"
  | 201 | "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR"
  | 202 | "FIDO_UNACCEPTABLE_CONTENT"
  | 203 | "FIDO_INVALID_REQUEST"
  ;

export type o80_e = 0 | "INTERNAL_ERROR"
  | 1 | "VERIFICATION_FAILED"
  | 2 | "LOGIN_NOT_ALLOWED"
  | 3 | "EXTERNAL_SERVICE_UNAVAILABLE"
  | 4 | "RETRY_LATER"
  | 100 | "NOT_SUPPORTED"
  | 101 | "ILLEGAL_ARGUMENT"
  | 102 | "INVALID_CONTEXT"
  | 103 | "FORBIDDEN"
  | 200 | "FIDO_UNKNOWN_CREDENTIAL_ID"
  | 201 | "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR"
  | 202 | "FIDO_UNACCEPTABLE_CONTENT"
  | 203 | "FIDO_INVALID_REQUEST"
  ;

export type og_E = 1 | "RUNNING"
  | 2 | "CLOSING"
  | 3 | "CLOSED"
  | 4 | "SUSPEND"
  ;

export type og_EnumC32661b = 0 | "INACTIVE"
  | 1 | "ACTIVE"
  ;

export type og_EnumC32663d = 0 | "PREMIUM"
  | 1 | "VERIFIED"
  | 2 | "UNVERIFIED"
  ;

export type og_EnumC32671l = 0 | "ILLEGAL_ARGUMENT"
  | 1 | "AUTHENTICATION_FAILED"
  | 3 | "INVALID_STATE"
  | 5 | "NOT_FOUND"
  | 20 | "INTERNAL_ERROR"
  | 33 | "MAINTENANCE_ERROR"
  ;

export type og_G = 0 | "FREE"
  | 1 | "MONTHLY"
  | 2 | "PER_PAYMENT"
  ;

export type og_I = 0 | "OK"
  | 1 | "REACHED_TIER_LIMIT"
  | 2 | "REACHED_MEMBER_LIMIT"
  | 3 | "ALREADY_JOINED"
  | 4 | "NOT_SUPPORTED_LINE_VERSION"
  | 5 | "BOT_USER_REGION_IS_NOT_MATCH"
  ;

export type q80_EnumC33651c = 0 | "INTERNAL_ERROR"
  | 1 | "ILLEGAL_ARGUMENT"
  | 2 | "VERIFICATION_FAILED"
  | 3 | "NOT_ALLOWED_QR_CODE_LOGIN"
  | 4 | "VERIFICATION_NOTICE_FAILED"
  | 5 | "RETRY_LATER"
  | 100 | "INVALID_CONTEXT"
  | 101 | "APP_UPGRADE_REQUIRED"
  ;

export type qm_EnumC34112e = 1 | "BUTTON"
  | 2 | "ENTRY_SELECTED"
  | 3 | "BROADCAST_ENTER"
  | 4 | "BROADCAST_LEAVE"
  | 5 | "BROADCAST_STAY"
  ;

export type qm_s = 0 | "ILLEGAL_ARGUMENT"
  | 5 | "NOT_FOUND"
  | 20 | "INTERNAL_ERROR"
  ;

export type r80_EnumC34361a = 1 | "PERSONAL_ACCOUNT"
  | 2 | "CURRENT_ACCOUNT"
  ;

export type r80_EnumC34362b = 1 | "BANK_ALL"
  | 2 | "BANK_DEPOSIT"
  | 3 | "BANK_WITHDRAWAL"
  ;

export type r80_EnumC34365e = 1 | "BANK"
  | 2 | "ATM"
  | 3 | "CONVENIENCE_STORE"
  | 4 | "DEBIT_CARD"
  | 5 | "E_CHANNEL"
  | 6 | "VIRTUAL_BANK_ACCOUNT"
  | 7 | "AUTO"
  | 8 | "CVS_LAWSON"
  | 9 | "SEVEN_BANK_DEPOSIT"
  | 10 | "CODE_DEPOSIT"
  ;

export type r80_EnumC34367g = 0 | "AVAILABLE"
  | 1 | "DIFFERENT_REGION"
  | 2 | "UNSUPPORTED_DEVICE"
  | 3 | "PHONE_NUMBER_UNREGISTERED"
  | 4 | "UNAVAILABLE_FROM_LINE_PAY"
  | 5 | "INVALID_USER"
  ;

export type r80_EnumC34368h = 1 | "CHARGE"
  | 2 | "WITHDRAW"
  ;

export type r80_EnumC34370j = 0 | "UNKNOWN"
  | 1 | "VISA"
  | 2 | "MASTER"
  | 3 | "AMEX"
  | 4 | "DINERS"
  | 5 | "JCB"
  ;

export type r80_EnumC34371k = 0 | "NULL"
  | 1 | "ATM"
  | 2 | "CONVENIENCE_STORE"
  ;

export type r80_EnumC34372l = 1 | "SCALE2"
  | 2 | "SCALE3"
  | 3 | "HDPI"
  | 4 | "XHDPI"
  ;

export type r80_EnumC34374n = 0 | "SUCCESS"
  | 1000 | "GENERAL_USER_ERROR"
  | 1101 | "ACCOUNT_NOT_EXISTS"
  | 1102 | "ACCOUNT_INVALID_STATUS"
  | 1103 | "ACCOUNT_ALREADY_EXISTS"
  | 1104 | "MERCHANT_NOT_EXISTS"
  | 1105 | "MERCHANT_INVALID_STATUS"
  | 1107 | "AGREEMENT_REQUIRED"
  | 1108 | "BLACKLISTED"
  | 1109 | "WRONG_PASSWORD"
  | 1110 | "INVALID_CREDIT_CARD"
  | 1111 | "LIMIT_EXCEEDED"
  | 1115 | "CANNOT_PROCEED"
  | 1120 | "TOO_WEAK_PASSWORD"
  | 1125 | "CANNOT_CREATE_ACCOUNT"
  | 1130 | "TEMPORARY_PASSWORD_ERROR"
  | 1140 | "MISSING_PARAMETERS"
  | 1141 | "NO_VALID_MYCODE_ACCOUNT"
  | 1142 | "INSUFFICIENT_BALANCE"
  | 1150 | "TRANSACTION_NOT_FOUND"
  | 1152 | "TRANSACTION_FINISHED"
  | 1153 | "PAYMENT_AMOUNT_WRONG"
  | 1157 | "BALANCE_ACCOUNT_NOT_EXISTS"
  | 1158 | "DUPLICATED_CITIZEN_ID"
  | 1159 | "PAYMENT_REQUEST_NOT_FOUND"
  | 1169 | "AUTH_FAILED"
  | 1171 | "PASSWORD_SETTING_REQUIRED"
  | 1172 | "TRANSACTION_ALREADY_PROCESSED"
  | 1178 | "CURRENCY_NOT_SUPPORTED"
  | 1180 | "PAYMENT_NOT_AVAILABLE"
  | 1181 | "TRANSFER_REQUEST_NOT_FOUND"
  | 1183 | "INVALID_PAYMENT_AMOUNT"
  | 1184 | "INSUFFICIENT_PAYMENT_AMOUNT"
  | 1185 | "EXTERNAL_SYSTEM_MAINTENANCE"
  | 1186 | "EXTERNAL_SYSTEM_INOPERATIONAL"
  | 1192 | "SESSION_EXPIRED"
  | 1195 | "UPGRADE_REQUIRED"
  | 1196 | "REQUEST_TOKEN_EXPIRED"
  | 1198 | "OPERATION_FINISHED"
  | 1199 | "EXTERNAL_SYSTEM_ERROR"
  | 1299 | "PARTIAL_AMOUNT_APPROVED"
  | 1600 | "PINCODE_AUTH_REQUIRED"
  | 1601 | "ADDITIONAL_AUTH_REQUIRED"
  | 1603 | "NOT_BOUND"
  | 1610 | "OTP_USER_REGISTRATION_ERROR"
  | 1611 | "OTP_CARD_REGISTRATION_ERROR"
  | 1612 | "NO_AUTH_METHOD"
  | 1696 | "GENERAL_USER_ERROR_RESTART"
  | 1697 | "GENERAL_USER_ERROR_REFRESH"
  | 1698 | "GENERAL_USER_ERROR_CLOSE"
  | 9000 | "INTERNAL_SERVER_ERROR"
  | 9999 | "INTERNAL_SYSTEM_MAINTENANCE"
  | 10000 | "UNKNOWN_ERROR"
  ;

export type r80_EnumC34376p = 1 | "TRANSFER"
  | 2 | "TRANSFER_REQUEST"
  | 3 | "DUTCH"
  | 4 | "INVITATION"
  ;

export type r80_EnumC34377q = 0 | "NULL"
  | 1 | "UNIDEN"
  | 2 | "WAIT"
  | 3 | "IDENTIFIED"
  | 4 | "CHECKING"
  ;

export type r80_EnumC34378s = 0 | "UNKNOWN"
  | 1 | "MORE_TAB"
  | 2 | "CHAT_ROOM_PLUS_MENU"
  | 3 | "TRANSFER"
  | 4 | "PAYMENT"
  | 5 | "LINECARD"
  | 6 | "INVITATION"
  ;

export type r80_e0 = 0 | "NONE"
  | 1 | "ONE_TIME_PAYMENT_AGREEMENT"
  | 2 | "SIMPLE_JOINING_AGREEMENT"
  | 3 | "LINE_CARD_CASH_AGREEMENT"
  | 4 | "LINE_CARD_MONEY_AGREEMENT"
  | 5 | "JOINING_WITH_LINE_CARD_AGREEMENT"
  | 6 | "LINE_CARD_AGREEMENT"
  ;

export type r80_g0 = 0 | "NULL"
  | 1 | "ATM"
  | 2 | "CONVENIENCE_STORE"
  | 3 | "ALL"
  ;

export type r80_h0 = 1 | "READY"
  | 2 | "COMPLETE"
  | 3 | "WAIT"
  | 4 | "CANCEL"
  | 5 | "FAIL"
  | 6 | "EXPIRE"
  | 7 | "ALL"
  ;

export type r80_i0 = 1 | "TRANSFER_ACCEPTABLE"
  | 2 | "REMOVE_INVOICE"
  | 3 | "INVOICE_CODE"
  | 4 | "SHOW_ALWAYS_INVOICE"
  ;

export type r80_m0 = 1 | "OK"
  | 2 | "NOT_ALIVE_USER"
  | 3 | "NEED_BALANCE_DISCLAIMER"
  | 4 | "ECONTEXT_CHARGING_IN_PROGRESS"
  | 6 | "TRANSFER_IN_PROGRESS"
  | 7 | "OK_REMAINING_BALANCE"
  | 8 | "ADVERSE_BALANCE"
  | 9 | "CONFIRM_REQUIRED"
  ;

export type r80_n0 = 1 | "LINE"
  | 2 | "LINEPAY"
  ;

export type r80_r = 1 | "CITIZEN_ID"
  | 2 | "PASSPORT"
  | 3 | "WORK_PERMIT"
  | 4 | "ALIEN_CARD"
  ;

export type t80_h = 1 | "CLIENT"
  | 2 | "SERVER"
  ;

export type t80_i = 1 | "APP_INSTANCE_LOCAL"
  | 2 | "APP_TYPE_LOCAL"
  | 3 | "GLOBAL"
  ;

export type t80_n = 0 | "UNKNOWN"
  | 1 | "NONE"
  | 16641 | "ILLEGAL_ARGUMENT"
  | 16642 | "NOT_FOUND"
  | 16643 | "NOT_AVAILABLE"
  | 16644 | "TOO_LARGE_VALUE"
  | 16645 | "CLOCK_DRIFT_DETECTED"
  | 16646 | "UNSUPPORTED_APPLICATION_TYPE"
  | 16647 | "DUPLICATED_ENTRY"
  | 16897 | "AUTHENTICATION_FAILED"
  | 20737 | "INTERNAL_SERVER_ERROR"
  | 20738 | "SERVICE_IN_MAINTENANCE_MODE"
  | 20739 | "SERVICE_UNAVAILABLE"
  ;

export type t80_r = 1 | "USER_ACTION"
  | 2 | "DATA_OUTDATED"
  | 3 | "APP_MIGRATION"
  | 100 | "OTHER"
  ;

export type vh_EnumC37632c = 1 | "ACTIVE"
  | 2 | "INACTIVE"
  ;

export type vh_m = 1 | "SAFE"
  | 2 | "NOT_SAFE"
  ;

export type wm_EnumC38497a = 0 | "UNKNOWN"
  | 1 | "BOT_NOT_FOUND"
  | 2 | "BOT_NOT_AVAILABLE"
  | 3 | "NOT_A_MEMBER"
  | 4 | "SQUARECHAT_NOT_FOUND"
  | 5 | "FORBIDDEN"
  | 400 | "ILLEGAL_ARGUMENT"
  | 401 | "AUTHENTICATION_FAILED"
  | 500 | "INTERNAL_ERROR"
  ;

export type zR0_EnumC40578c = 0 | "FOREGROUND"
  | 1 | "BACKGROUND"
  ;

export type zR0_EnumC40579d = 1 | "STICKER"
  | 2 | "THEME"
  | 3 | "STICON"
  ;

export type zR0_h = 0 | "NORMAL"
  | 1 | "BIG"
  ;

export type zR0_j = 0 | "UNKNOWN"
  | 1 | "NONE"
  | 16641 | "ILLEGAL_ARGUMENT"
  | 16642 | "NOT_FOUND"
  | 16643 | "NOT_AVAILABLE"
  | 16897 | "AUTHENTICATION_FAILED"
  | 20737 | "INTERNAL_SERVER_ERROR"
  | 20739 | "SERVICE_UNAVAILABLE"
  ;

export type zf_EnumC40713a = 1 | "PERSONAL"
  | 2 | "ROOM"
  | 3 | "GROUP"
  | 4 | "SQUARE_CHAT"
  ;

export type zf_EnumC40715c = 1 | "REGULAR"
  | 2 | "PRIORITY"
  | 3 | "MORE"
  ;

export type zf_EnumC40716d = 1 | "INVALID_REQUEST"
  | 2 | "UNAUTHORIZED"
  | 100 | "SERVER_ERROR"
  ;

export interface AccessTokenRefreshException {
  errorCode: P70_g;
  reasonCode: Int64;
}

export interface AccountEapConnectException {
  code: Q70_r;
  alertMessage: string;
  webAuthDetails: WebAuthDetails;
}

export interface I80_C26390a {
  code: I80_EnumC26408j;
  alertMessage: string;
  webAuthDetails: I80_K0;
}

export interface AuthException {
  code: T70_EnumC14406j;
  alertMessage: string;
  webAuthDetails: WebAuthDetails;
}

export interface BotException {
  errorCode: wm_EnumC38497a;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface BotExternalException {
  errorCode: kf_EnumC28766a;
  reason: string;
}

export interface ChannelException {
  code: ChannelErrorCode;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface ChannelPaakAuthnException {
  code: n80_o;
  errorMessage: string;
}

export interface ChatappException {
  code: zf_EnumC40716d;
  reason: string;
}

export interface CoinException {
  code: jO0_EnumC27535b;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface CollectionException {
  code: Ob1_EnumC12664u;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface E2EEKeyBackupException {
  code: Pb1_W3;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface ExcessiveRequestItemException {
  max_size: number;
  hint: string;
}

export interface HomeException {
  exceptionCode: Fg_a;
  message: string;
  retryTimeMillis: Int64;
}

export interface LFLPremiumException {
  code: AR0_g;
}

export interface LiffChannelException {
  code: Qj_EnumC13592i;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface LiffException {
  code: Qj_EnumC13597n;
  message: string;
  payload: Qj_C13599p;
}

export interface MembershipException {
  code: og_EnumC32671l;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface OaChatException {
  code: jf_EnumC27717f;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface PasswordUpdateException {
  errorCode: U70_c;
  errorMessage: string;
}

export interface PaymentException {
  errorCode: r80_EnumC34374n;
  debugReason: string;
  serverDefinedMessage: string;
  errorDetailMap: Record<string, string>;
}

export interface PointException {
  code: PointErrorCode;
  reason: string;
  extra: Record<string, string>;
}

export interface PremiumException {
  code: fN0_q;
  reason: string;
}

export interface PrimaryQrCodeMigrationException {
  code: h80_EnumC25645e;
  errorMessage: string;
}

export interface PwlessCredentialException {
  code: R70_e;
  alertMessage: string;
}

export interface RejectedException {
  rejectionReason: LN0_F0;
  hint: string;
}

export interface SeamlessLoginException {
  code: g80_EnumC24993a;
  errorMessage: string;
  errorTitle: string;
}

export interface SecondAuthFactorPinCodeException {
  code: S70_a;
  alertMessage: string;
}

export interface SecondaryPwlessLoginException {
  code: o80_e;
  alertMessage: string;
}

export interface SecondaryQrCodeException {
  code: q80_EnumC33651c;
  alertMessage: string;
}

export interface ServerFailureException {
  hint: string;
}

export interface SettingsException {
  code: t80_n;
  reason: string;
  parameters: Record<string, string>;
}

export interface ShopException {
  code: Ob1_EnumC12652p1;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface SquareException {
  errorCode: SquareErrorCode;
  errorExtraInfo: ErrorExtraInfo;
  reason: string;
}

export interface SuggestTrialException {
  code: zR0_j;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface TalkException {
  code: qm_s;
  reason: string;
  parameterMap: Record<string, string>;
}

export interface ThingsException {
  code: do0_M;
  reason: string;
}

export interface TokenAuthException {
  code: j80_EnumC27228a;
  reason: string;
}

export interface WalletException {
  code: NZ0_EnumC12193o1;
  reason: string;
  attributes: Record<string, string>;
}

export interface m80_C30146a {

}

export interface m80_b {

}

export interface AD {
  body: string;
  priority: Priority;
  lossUrl: string;
}

export interface AR0_o {
  sticker: Sticker;
}

export interface AbuseMessage {
  messageId: Int64;
  message: string;
  senderMid: string;
  contentType: ContentType;
  createdTime: Int64;
  metadata: Record<string, string>;
}

export interface AbuseReport {
  reportSource: Pb1_EnumC13128p7;
  applicationType: ApplicationType;
  spammerReasons: number[];
  abuseMessages: AbuseMessage[];
  metadata: Record<string, string>;
}

export interface AbuseReportLineMeeting {
  reporteeMid: string;
  spammerReasons: number[];
  evidenceIds: EvidenceId[];
  chatMid: string;
}

export interface AcceptChatInvitationByTicketRequest {
  reqSeq: number;
  chatMid: string;
  ticketId: string;
}

export interface AcceptChatInvitationRequest {
  reqSeq: number;
  chatMid: string;
}

export interface AcceptSpeakersRequest {
  squareChatMid: string;
  sessionId: string;
  targetMids: string[];
}

export interface AcceptToChangeRoleRequest {
  squareChatMid: string;
  sessionId: string;
  inviteRequestId: string;
}

export interface AcceptToListenRequest {
  squareChatMid: string;
  sessionId: string;
  inviteRequestId: string;
}

export interface AcceptToSpeakRequest {
  squareChatMid: string;
  sessionId: string;
  inviteRequestId: string;
}

export interface AccountIdentifier {
  type: T70_EnumC14390b;
  identifier: string;
  countryCode: string;
}

export interface AcquireLiveTalkRequest {
  squareChatMid: string;
  title: string;
  type: LiveTalkType;
  speakerSetting: LiveTalkSpeakerSetting;
}

export interface AcquireLiveTalkResponse {
  liveTalk: LiveTalk;
}

export interface AcquireOACallRouteRequest {
  searchId: string;
  fromEnvInfo: Record<string, string>;
  otp: string;
}

export interface AcquireOACallRouteResponse {
  oaCallRoute: Pb1_C13113o6;
}

export interface ActionButton {
  label: string;
}

export interface ActivateSubscriptionRequest {
  uniqueKey: string;
  activeStatus: og_EnumC32661b;
}

export interface AdRequest {
  headers: Record<string, string>;
  queryParams: Record<string, string>;
}

export interface AdTypeOptOutClickEventRequest {
  moduleAdId: string;
  targetId: string;
}

export interface AddFriendByMidRequest {
  reqSeq: number;
  userMid: string;
  tracking: AddFriendTracking;
}

export interface AddFriendTracking {
  reference: string;
  trackingMeta: LN0_C11274d;
}

export interface AddItemToCollectionRequest {
  collectionId: string;
  productType: Ob1_O0;
  productId: string;
  itemId: string;
}

export interface AddMetaByPhone {
  phone: string;
}

export interface AddMetaBySearchId {
  searchId: string;
}

export interface AddMetaByUserTicket {
  ticket: string;
}

export interface AddMetaChatNote {
  chatMid: string;
}

export interface AddMetaChatNoteMenu {
  chatMid: string;
}

export interface AddMetaGroupMemberList {
  chatMid: string;
}

export interface AddMetaGroupVideoCall {
  chatMid: string;
}

export interface AddMetaInvalid {
  hint: string;
}

export interface AddMetaMentionInChat {
  chatMid: string;
  messageId: string;
}

export interface AddMetaProfileUndefined {
  hint: string;
}

export interface AddMetaSearchIdInUnifiedSearch {
  searchId: string;
}

export interface AddMetaShareContact {
  messageId: string;
  chatMid: string;
  senderMid: string;
}

export interface AddMetaStrangerCall {
  messageId: string;
}

export interface AddMetaStrangerMessage {
  messageId: string;
  chatMid: string;
}

export interface AddOaFriendResponse {
  status: string;
}

export interface AddProductToSubscriptionSlotRequest {
  productType: Ob1_O0;
  productId: string;
  oldProductId: string;
  subscriptionService: any;
}

export interface AddProductToSubscriptionSlotResponse {
  result: Ob1_U1;
}

export interface AddThemeToSubscriptionSlotRequest {
  productId: string;
  currentlyAppliedProductId: string;
  subscriptionService: any;
}

export interface AddThemeToSubscriptionSlotResponse {
  result: Ob1_U1;
}

export interface AddToFollowBlacklistRequest {
  followMid: Pb1_A4;
}

export interface AgeCheckRequestResult {
  authUrl: string;
  sessionId: string;
}

export interface AgreeToTermsRequest {
  termsType: any;
  termsAgreement: TermsAgreement;
}

export interface AiQnABotTermsAgreement {
  termsVersion: number;
}

export interface AnalyticsInfo {
  gaSamplingRate: number;
  tmid: string;
}

export interface AnimationEffectContent {
  animationImageUrl: string;
}

export interface AnimationLayer {
  initialImage: RichImage;
  frontImage: RichImage;
  backgroundImage: RichImage;
}

export interface ApplicationVersionRange {
  lowerBound: string;
  lowerBoundInclusive: boolean;
  upperBound: string;
  upperBoundInclusive: boolean;
}

export interface ApprovalValue {
  message: string;
}

export interface ApproveSquareMembersRequest {
  squareMid: string;
  requestedMemberMids: string[];
}

export interface ApproveSquareMembersResponse {
  approvedMembers: SquareMember[];
  status: SquareStatus;
}

export interface ApprovedChannelInfo {
  channelInfo: ChannelInfo;
  approvedAt: Int64;
}

export interface ApprovedChannelInfos {
  approvedChannelInfos: ApprovedChannelInfo[];
  revision: Int64;
}

export interface AssetServiceInfo {
  status: NZ0_C0;
  myAssetServiceCode: NZ0_B0;
  name: string;
  signupText: string;
  iconUrl: string;
  landingUrl: string;
  currencyProperty: CurrencyProperty;
  balance: string;
  profit: string;
  maintenanceText: string;
  availableBalanceString: string;
  availableBalance: string;
}

export interface AuthPublicKeyCredential {
  id: string;
  type: string;
  response: AuthenticatorAssertionResponse;
  extensionResults: AuthenticationExtensionsClientOutputs;
}

export interface AuthSessionRequest {
  metaData: Record<string, string>;
}

export interface AuthenticateWithPaakRequest {
  sessionId: string;
  credential: AuthPublicKeyCredential;
}

export interface AuthenticationExtensionsClientInputs {
  lineAuthenSel: string[];
}

export interface AuthenticationExtensionsClientOutputs {
  lineAuthenSel: boolean;
}

export interface AuthenticatorAssertionResponse {
  clientDataJSON: string;
  authenticatorData: string;
  signature: string;
  userHandle: string;
}

export interface AuthenticatorAttestationResponse {
  clientDataJSON: string;
  attestationObject: string;
  transports: string[];
}

export interface AuthenticatorSelectionCriteria {
  authenticatorAttachment: string;
  requireResidentKey: boolean;
  userVerification: string;
}

export interface AutoSuggestionShowcaseRequest {
  productType: Ob1_O0;
  suggestionType: Ob1_a2;
}

export interface AutoSuggestionShowcaseResponse {
  productList: ProductSummaryForAutoSuggest[];
  totalSize: Int64;
}

export interface AvatarProfile {
  version: string;
  updatedMillis: Int64;
  thumbnail: string;
  usablePublicly: boolean;
}

export interface BadgeInfo {
  enabled: boolean;
  badgeRevision: Int64;
}

export interface Balance {
  currentPointsFixedPointDecimal: string;
}

export interface BalanceShortcut {
  osPayment: boolean;
  iconPosition: number;
  iconUrl: string;
  iconText: string;
  iconAltText: string;
  linkUrl: string;
  tsTargetId: string;
  iconType: NZ0_EnumC12154b1;
  iconUrlDarkMode: string;
  toolTip: Tooltip;
}

export interface BalanceShortcutInfo {
  balanceShortcuts: BalanceShortcut[];
  osPaymentFallbackShortcut: BalanceShortcut;
}

export interface BalanceShortcutInfoV4 {
  compactShortcuts: CompactShortcut[];
  balanceShortcuts: BalanceShortcut[];
  defaultExpand: boolean;
}

export interface BankBranchInfo {
  branchId: string;
  branchCode: string;
  name: string;
  name2: string;
}

export interface BannerRequest {
  test: boolean;
  trigger: Uf_C14856C;
  ad: AdRequest;
  content: ContentRequest;
}

export interface BannerResponse {
  rid: string;
  timestamp: Int64;
  minInterval: Int64;
  lang: string;
  trigger: Uf_C14856C;
  payloads: Uf_p[];
}

export interface Beacon {
  hardwareId: string;
}

export interface BeaconBackgroundNotification {
  actionInterval: Int64;
  actionAndConditions: qm_C34110c[];
  actionDelay: Int64;
}

export interface BeaconData {
  hwid: string;
  rssi: number;
  txPower: number;
  scannedTimestampMs: Int64;
}

export interface BeaconLayerInfoAndActions {
  pictureUrl: string;
  label: string;
  text: string;
  actions: string[];
  showOrConditions: qm_C34110c[];
  timeToHide: Int64;
}

export interface BeaconQueryResponse {
  deprecated_actionUrls: string[];
  cacheTtl: Int64;
  touchActions: BeaconTouchActions;
  layerInfoAndActions: BeaconLayerInfoAndActions;
  backgroundEnteringNotification: BeaconBackgroundNotification;
  backgroundLeavingNotification: BeaconBackgroundNotification;
  group: string;
  major: string;
  minor: string;
  effectiveRange: number;
  channelWhiteList: string[];
  actionId: Int64;
  stayReportInterval: Int64;
  leaveThresholdTime: Int64;
  touchThreshold: number;
  cutoffThreshold: number;
  dataUserBots: DataUserBot[];
  deviceId: string;
  deviceDisplayName: string;
  botMid: string;
  pop: boolean;
}

export interface BeaconTouchActions {
  actions: string[];
}

export interface BirthdayGiftAssociationVerifyRequest {
  associationToken: string;
}

export interface BirthdayGiftAssociationVerifyResponse {
  tokenStatus: Ob1_EnumC12638l;
  recipientUserMid: string;
}

export interface BleNotificationReceivedTrigger {
  serviceUuid: string;
  characteristicUuid: string;
}

export interface BleProduct {
  serviceUuid: string;
  psdiServiceUuid: string;
  psdiCharacteristicUuid: string;
  name: string;
  profileImageLocation: string;
  bondingRequired: boolean;
}

export interface Bot {
  mid: string;
  basicSearchId: string;
  region: string;
  displayName: string;
  pictureUrl: string;
  brandType: og_EnumC32663d;
}

export interface BotBlockDetail {
  deletedFromBlockList: boolean;
}

export interface BotFriendDetail {
  createdTime: Int64;
  favoriteTime: Int64;
  hidden: boolean;
}

export interface BotOaCallDetail {
  oaCallUrl: string;
}

export interface BotTalkroomAds {
  talkroomAdsEnabled: boolean;
  botTalkroomAdsInventoryKeys: BotTalkroomAdsInventoryKey[];
  displayTalkroomAdsToMembershipUser: boolean;
}

export interface BotTalkroomAdsInventoryKey {
  talkroomAdsPosition: Pb1_EnumC13093n0;
  talkroomAdsIosInventoryKey: string;
  talkroomAdsAndroidInventoryKey: string;
}

export interface BrowsingHistory {
  productSearchSummary: ProductSearchSummary;
  browsingTime: Int64;
}

export interface BuddyCautionNotice {
  type: Pb1_EnumC13162s0;
}

export interface BuddyCautionNoticeFromCMS {
  visibility: Pb1_EnumC13148r0;
}

export interface BuddyChatBar {
  barItems: Pb1_C13190u0[];
}

export interface BuddyDetail {
  mid: string;
  memberCount: Int64;
  onAir: boolean;
  businessAccount: boolean;
  addable: boolean;
  acceptableContentTypes: number[];
  capableMyhome: boolean;
  freePhoneCallable: boolean;
  phoneNumberToDial: string;
  needPermissionApproval: boolean;
  channelId: number;
  channelProviderName: string;
  iconType: number;
  botType: BotType;
  showRichMenu: boolean;
  richMenuRevision: Int64;
  onAirLabel: Pb1_EnumC13260z0;
  useTheme: boolean;
  themeId: string;
  useBar: boolean;
  barRevision: Int64;
  useBackground: boolean;
  backgroundId: string;
  statusBarEnabled: boolean;
  statusBarRevision: Int64;
  searchId: string;
  onAirVersion: number;
  blockable: boolean;
  botActiveStatus: Pb1_EnumC13037j0;
  membershipEnabled: boolean;
  legalCountryCode: string;
  botTalkroomAds: BotTalkroomAds;
  botOaCallDetail: BotOaCallDetail;
  aiChatBot: boolean;
  supportSpeechToText: boolean;
  voomEnabled: boolean;
  buddyCautionNoticeFromCMS: BuddyCautionNoticeFromCMS;
  region: string;
}

export interface BuddyDetailWithPersonal {
  buddyDetail: BuddyDetail;
  personalDetail: BuddyPersonalDetail;
}

export interface BuddyLive {
  mid: string;
  onLive: boolean;
  title: string;
  viewerCount: Int64;
  liveUrl: string;
}

export interface BuddyOnAir {
  mid: string;
  freshnessLifetime: Int64;
  onAirId: string;
  onAir: boolean;
  text: string;
  viewerCount: Int64;
  targetCount: Int64;
  livePlayTime: Int64;
  screenAspectRate: string;
  onAirType: Pb1_A0;
  onAirUrls: BuddyOnAirUrls;
  aspectRatioOfSource: string;
  useFadingOut: boolean;
  fadingOutIn: Int64;
  urlAfterFadingOut: string;
  labelAfterFadingOut: string;
  useLowerBanner: boolean;
  lowerBannerUrl: string;
  lowerBannerLabel: string;
}

export interface BuddyOnAirUrls {
  hls: Record<string, string>;
  smoothStreaming: Record<string, string>;
}

export interface BuddyPersonalDetail {
  richMenuId: string;
  statusBarRevision: Int64;
  buddyCautionNotice: BuddyCautionNotice;
}

export interface BuddyRichMenuChatBarItem {
  label: string;
  body: string;
  selected: boolean;
}

export interface BuddySearchResult {
  mid: string;
  displayName: string;
  pictureStatus: string;
  picturePath: string;
  statusMessage: string;
  businessAccount: boolean;
  iconType: number;
  botType: BotType;
}

export interface BuddyStatusBar {
  label: string;
  displayType: Pb1_EnumC12926b1;
  title: string;
  iconUrl: string;
  linkUrl: string;
}

export interface BuddyWebChatBarItem {
  label: string;
  url: string;
}

export interface BuddyWidget {
  icon: string;
  label: string;
  url: string;
}

export interface BuddyWidgetListCharBarItem {
  label: string;
  widgets: BuddyWidget[];
  selected: boolean;
}

export interface BulkFollowRequest {
  followTargetMids: string[];
  unfollowTargetMids: string[];
  hasNext: boolean;
}

export interface BulkGetRequest {
  requests: GetRequest[];
}

export interface BulkGetResponse {
  values: Record<string, t80_g>;
}

export interface BulkSetRequest {
  requests: SetRequest[];
}

export interface BulkSetResponse {
  values: Record<string, t80_l>;
}

export interface Button {
  content: ButtonContent;
  style: ButtonStyle;
}

export interface ButtonStyle {
  textColorHexCode: string;
  bgColor: ButtonBGColor;
}

export interface BuyMustbuyRequest {
  productType: Ob1_O0;
  productId: string;
  serialNumber: string;
}

export interface CallHost {
  host: string;
  port: number;
  zone: string;
}

export interface CallRoute {
  fromToken: string;
  callFlowType: Pb1_EnumC13010h1;
  voipAddress: string;
  voipUdpPort: number;
  voipTcpPort: number;
  fromZone: string;
  toZone: string;
  fakeCall: boolean;
  ringbackTone: string;
  toMid: string;
  tunneling: string;
  commParam: string;
  stid: string;
  encFromMid: string;
  encToMid: string;
  switchableToVideo: boolean;
  voipAddress6: string;
  w2pGw: string;
  drCall: boolean;
  stnpk: string;
}

export interface Callback {
  impEventUrl: string;
  clickEventUrl: string;
  muteEventUrl: string;
  upvoteEventUrl: string;
  downvoteEventUrl: string;
  bounceEventUrl: string;
  undeliveredEventUrl: string;
}

export interface CampaignContent {
  iconUrl: string;
  iconAltText: string;
  iconDisplayRule: IconDisplayRule;
  animationEffectContent: AnimationEffectContent;
}

export interface CampaignProperty {
  id: string;
  name: string;
  type: string;
  headerContent: HeaderContent;
  campaignContent: CampaignContent;
}

export interface CanCreateCombinationStickerRequest {
  packageIds: string[];
}

export interface CanCreateCombinationStickerResponse {
  canCreate: boolean;
  usablePackageIds: string[];
}

export interface CancelChatInvitationRequest {
  reqSeq: number;
  chatMid: string;
  targetUserMids: string[];
}

export interface CancelPaakAuthRequest {
  sessionId: string;
}

export interface CancelPaakAuthenticationRequest {
  authSessionId: string;
}

export interface CancelPinCodeRequest {
  authSessionId: string;
}

export interface CancelReactionRequest {
  reqSeq: number;
  messageId: Int64;
}

export interface CancelToSpeakRequest {
  squareChatMid: string;
  sessionId: string;
}

export interface Candidate {
  type: zR0_EnumC40579d;
  productId: string;
  itemId: string;
}

export interface Category {
  id: number;
  name: string;
}

export interface CategoryName {
  categoryId: number;
  names: Record<string, string>;
}

export interface ChangeSubscriptionRequest {
  billingItemId: string;
  subscriptionService: any;
  storeCode: Ob1_K1;
}

export interface ChangeSubscriptionResponse {
  result: Ob1_M1;
  orderId: string;
  confirmUrl: string;
}

export interface ChannelContext {
  channelName: string;
}

export interface ChannelDomain {
  host: string;
  removed: boolean;
}

export interface ChannelDomains {
  channelDomains: ChannelDomain[];
  revision: Int64;
}

export interface ChannelIdWithLastUpdated {
  channelId: string;
  lastUpdated: Int64;
}

export interface ChannelInfo {
  channelId: string;
  name: string;
  entryPageUrl: string;
  descriptionText: string;
  provider: ChannelProvider;
  publicType: Pb1_P6;
  iconImage: string;
  permissions: string[];
  iconThumbnailImage: string;
  channelConfigurations: number[];
  lcsAllApiUsable: boolean;
  allowedPermissions: Pb1_EnumC12997g2[];
  channelDomains: ChannelDomain[];
  updatedTimestamp: Int64;
  featureLicenses: Pb1_EnumC12941c2[];
}

export interface ChannelNotificationSetting {
  channelId: string;
  name: string;
  notificationReceivable: boolean;
  messageReceivable: boolean;
  showDefault: boolean;
}

export interface ChannelProvider {
  name: string;
  certified: boolean;
}

export interface ChannelSettings {
  unapprovedMessageReceivable: boolean;
}

export interface ChannelToken {
  token: string;
  obsToken: string;
  expiration: Int64;
  refreshToken: string;
  channelAccessToken: string;
}

export interface Chat {
  type: Pb1_Z2;
  chatMid: string;
  createdTime: Int64;
  notificationDisabled: boolean;
  favoriteTimestamp: Int64;
  chatName: string;
  picturePath: string;
  extra: Pb1_C13208v4;
}

export interface ChatEffectMeta {
  contentId: Int64;
  category: Pb1_Q2;
  name: string;
  defaultContent: ChatEffectMetaContent;
  optionalContents: Record<number, ChatEffectMetaContent>;
  keywords: string[];
  beginTimeMillis: Int64;
  endTimeMillis: Int64;
  createdTimeMillis: Int64;
  updatedTimeMillis: Int64;
  contentMetadataTag: string;
}

export interface ChatEffectMetaContent {
  url: string;
  checksum: string;
}

export interface ChatRoomAnnouncement {
  announcementSeq: Int64;
  type: Pb1_X2;
  contents: ChatRoomAnnouncementContents;
  creatorMid: string;
  createdTime: Int64;
  deletePermission: Pb1_W2;
}

export interface ChatRoomAnnouncementContentMetadata {
  replace: string;
  sticonOwnership: string;
  postNotificationMetadata: string;
}

export interface ChatRoomAnnouncementContents {
  displayFields: number;
  text: string;
  link: string;
  thumbnail: string;
  contentMetadata: ChatRoomAnnouncementContentMetadata;
}

export interface ChatRoomBGM {
  creatorMid: string;
  createdTime: Int64;
  chatRoomBGMInfo: string;
}

export interface Chatapp {
  chatappId: string;
  name: string;
  icon: string;
  url: string;
  availableChatTypes: number[];
}

export interface ChatroomPopup {
  imageObsHash: string;
  title: string;
  content: string;
  targetRoles: number[];
  button: Button;
  type: ChatroomPopupType;
  animatedImage: boolean;
  targetChatType: TargetChatType;
  targetChats: TargetChats;
  targetUserType: TargetUserType;
  targetUsers: TargetUsers;
}

export interface I80_C26396d {
  authSessionId: string;
}

export interface CheckEmailAssignedResponse {
  sameAccountFromPhone: boolean;
}

export interface CheckIfEncryptedE2EEKeyReceivedRequest {
  sessionId: string;
  secureChannelData: h80_t;
}

export interface CheckIfEncryptedE2EEKeyReceivedResponse {
  nonce: string;
  encryptedSecureChannelPayload: any;
  userProfile: any;
  appTypeDifferentFromPrevDevice: boolean;
  e2eeKeyBackupServiceConfig: boolean;
}

export interface I80_C26400f {
  authSessionId: string;
}

export interface I80_C26402g {
  verified: boolean;
}

export interface CheckIfPhonePinCodeMsgVerifiedRequest {
  authSessionId: string;
  userPhoneNumber: UserPhoneNumber;
}

export interface CheckIfPhonePinCodeMsgVerifiedResponse {
  accountExist: boolean;
  sameUdidFromAccount: boolean;
  allowedToRegister: boolean;
  userProfile: UserProfile;
}

export interface CheckJoinCodeRequest {
  squareMid: string;
  joinCode: string;
}

export interface CheckJoinCodeResponse {
  joinToken: string;
}

export interface CheckOperationResult {
  tradable: boolean;
  reason: string;
  detailMessage: string;
}

export interface CheckUserAgeAfterApprovalWithDocomoV2Request {
  accessToken: string;
  agprm: string;
}

export interface CheckUserAgeAfterApprovalWithDocomoV2Response {
  userAgeType: Pb1_gd;
}

export interface CheckUserAgeWithDocomoV2Request {
  authCode: string;
}

export interface CheckUserAgeWithDocomoV2Response {
  responseType: Pb1_EnumC12970e3;
  userAgeType: Pb1_gd;
  approvalRedirectUrl: string;
  accessToken: string;
}

export interface ClientNetworkStatus {
  networkType: Pb1_EnumC12998g3;
  wifiSignals: WifiSignal[];
}

export interface CodeValue {
  code: string;
}

export interface Coin {
  freeCoinBalance: number;
  payedCoinBalance: number;
  totalCoinBalance: number;
  rewardCoinBalance: number;
}

export interface CoinHistory {
  payDate: Int64;
  coinBalance: number;
  coin: number;
  price: string;
  title: string;
  refund: boolean;
  paySeq: string;
  currency: string;
  currencySign: string;
  displayPrice: string;
  payload: CoinPayLoad;
  channelId: string;
}

export interface CoinPayLoad {
  payCoin: number;
  freeCoin: number;
  type: PayloadType;
  rewardCoin: number;
}

export interface CoinProductItem {
  itemId: string;
  coin: number;
  freeCoin: number;
  currency: string;
  price: string;
  displayPrice: string;
  name: string;
  desc: string;
}

export interface CoinPurchaseReservation {
  productId: string;
  country: string;
  currency: string;
  price: string;
  appStoreCode: jO0_EnumC27533B;
  language: string;
  pgCode: jO0_EnumC27559z;
  redirectUrl: string;
}

export interface Collection {
  collectionId: string;
  items: CollectionItem[];
  productType: Ob1_O0;
  createdTimeMillis: Int64;
  updatedTimeMillis: Int64;
}

export interface CollectionItem {
  itemId: string;
  productId: string;
  displayData: Ob1_E;
  sortId: number;
}

export interface CombinationStickerMetadata {
  version: Int64;
  canvasWidth: number;
  canvasHeight: number;
  stickerLayouts: StickerLayout[];
}

export interface CombinationStickerStickerData {
  packageId: string;
  stickerId: string;
  version: Int64;
}

export interface CompactShortcut {
  iconPosition: number;
  iconUrl: string;
  iconAltText: string;
  iconType: NZ0_EnumC12154b1;
  linkUrl: string;
  tsTargetId: string;
}

export interface Configurations {
  revision: Int64;
  configMap: Record<string, string>;
}

export interface ConfigurationsParams {
  regionOfUsim: string;
  regionOfTelephone: string;
  regionOfLocale: string;
  carrier: string;
}

export interface ConnectDeviceOperation {
  connectionTimeoutMillis: Int64;
}

export interface ConnectEapAccountRequest {
  authSessionId: string;
}

export interface Contact {
  mid: string;
  createdTime: Int64;
  type: ContactType;
  status: ContactStatus;
  relation: Pb1_EnumC13151r3;
  displayName: string;
  phoneticName: string;
  pictureStatus: string;
  thumbnailUrl: string;
  statusMessage: string;
  displayNameOverridden: string;
  favoriteTime: Int64;
  capableVoiceCall: boolean;
  capableVideoCall: boolean;
  capableMyhome: boolean;
  capableBuddy: boolean;
  attributes: number;
  settings: Int64;
  picturePath: string;
  recommendParams: string;
  friendRequestStatus: FriendRequestStatus;
  musicProfile: string;
  videoProfile: string;
  statusMessageContentMetadata: Record<string, string>;
  avatarProfile: AvatarProfile;
  friendRingtone: string;
  friendRingbackTone: string;
  nftProfile: boolean;
  pictureSource: Pb1_N6;
  profileId: string;
}

export interface ContactCalendarEvent {
  id: string;
  state: Pb1_EnumC13082m3;
  year: number;
  month: number;
  day: number;
}

export interface ContactCalendarEvents {

}

export interface ContactModification {
  type: Pb1_EnumC13029i6;
  luid: string;
  phones: string[];
  emails: string[];
  userids: string[];
  mobileContactName: string;
  phoneticName: string;
}

export interface ContactRegistration {
  contact: Contact;
  luid: string;
  contactType: ContactType;
  contactKey: string;
}

export interface Content {
  title: string;
  desc: string;
  linkUrl: string;
  fallbackUrl: string;
  badge: Uf_C14864f;
  image: Image;
  button: ActionButton;
  callback: Callback;
  noBidCallback: NoBidCallback;
  ttl: Int64;
  muteSupported: boolean;
  voteSupported: boolean;
  priority: Priority;
}

export interface ContentRequest {
  os: Uf_EnumC14873o;
  appv: string;
  lineAcceptableLanguage: string;
  countryCode: string;
}

export interface CountryCode {
  code: string;
}

export interface CreateChatRequest {
  reqSeq: number;
  type: Pb1_Z2;
  name: string;
  targetUserMids: string[];
  picturePath: string;
}

export interface CreateChatResponse {
  chat: Chat;
}

export interface CreateCollectionForUserRequest {
  productType: Ob1_O0;
}

export interface CreateCollectionForUserResponse {
  collection: Collection;
}

export interface CreateCombinationStickerRequest {
  metadata: CombinationStickerMetadata;
  stickers: CombinationStickerStickerData[];
  idOfPreviousVersionOfCombinationSticker: string;
}

export interface CreateCombinationStickerResponse {
  id: string;
}

export interface CreateGroupCallUrlRequest {
  title: string;
}

export interface CreateGroupCallUrlResponse {
  url: GroupCallUrl;
}

export interface CreateMultiProfileRequest {
  displayName: string;
}

export interface CreateMultiProfileResponse {
  profileId: string;
}

export interface I80_C26406i {
  authSessionId: string;
}

export interface CreateSessionResponse {
  sessionId: string;
}

export interface CreateSquareChatAnnouncementRequest {
  reqSeq: number;
  squareChatMid: string;
  squareChatAnnouncement: SquareChatAnnouncement;
}

export interface CreateSquareChatAnnouncementResponse {
  announcement: SquareChatAnnouncement;
}

export interface CreateSquareChatRequest {
  reqSeq: number;
  squareChat: SquareChat;
  squareMemberMids: string[];
}

export interface CreateSquareChatResponse {
  squareChat: SquareChat;
  squareChatStatus: SquareChatStatus;
  squareChatMember: SquareChatMember;
  squareChatFeatureSet: SquareChatFeatureSet;
}

export interface CreateSquareRequest {
  reqSeq: number;
  square: Square;
  creator: SquareMember;
}

export interface CreateSquareResponse {
  square: Square;
  creator: SquareMember;
  authority: SquareAuthority;
  status: SquareStatus;
  featureSet: SquareFeatureSet;
  noteStatus: NoteStatus;
  squareChat: SquareChat;
  squareChatStatus: SquareChatStatus;
  squareChatMember: SquareChatMember;
  squareChatFeatureSet: SquareChatFeatureSet;
}

export interface CurrencyProperty {
  code: string;
  symbol: string;
  position: NZ0_EnumC12197q;
  scale: number;
}

export interface CustomBadgeLabel {
  text: string;
  backgroundColorCode: string;
}

export interface CustomColor {
  hexColorCode: string;
}

export interface DataRetention {
  productId: string;
  productRegion: string;
  productType: fN0_EnumC24466B;
  inDataRetention: boolean;
  dataRetentionEndTime: Int64;
}

export interface DataUserBot {
  mid: string;
  placeName: string;
}

export interface DeleteGroupCallUrlRequest {
  urlId: string;
}

export interface DeleteMultiProfileRequest {
  profileId: string;
}

export interface DeleteOtherFromChatRequest {
  reqSeq: number;
  chatMid: string;
  targetUserMids: string[];
}

export interface DeleteSafetyStatusRequest {
  disasterId: string;
}

export interface DeleteSelfFromChatRequest {
  reqSeq: number;
  chatMid: string;
  lastSeenMessageDeliveredTime: Int64;
  lastSeenMessageId: string;
  lastMessageDeliveredTime: Int64;
  lastMessageId: string;
}

export interface DeleteSquareChatAnnouncementRequest {
  squareChatMid: string;
  announcementSeq: Int64;
}

export interface DeleteSquareChatRequest {
  squareChatMid: string;
  revision: Int64;
}

export interface DeleteSquareRequest {
  mid: string;
  revision: Int64;
}

export interface DestinationLIFFRequest {
  originalUrl: string;
}

export interface DestinationLIFFResponse {
  destinationUrl: string;
}

export interface DestroyMessageRequest {
  squareChatMid: string;
  messageId: string;
  threadMid: string;
}

export interface DestroyMessagesRequest {
  squareChatMid: string;
  messageIds: string[];
  threadMid: string;
}

export interface DetermineMediaMessageFlowRequest {
  chatMid: string;
}

export interface DetermineMediaMessageFlowResponse {
  flowMap: Record<number, number>;
  cacheTtlMillis: Int64;
}

export interface Device {
  udid: string;
  deviceModel: string;
}

export interface DeviceInfo {
  deviceName: string;
  systemName: string;
  systemVersion: string;
  model: string;
  webViewVersion: string;
  carrierCode: CarrierCode;
  carrierName: string;
  applicationType: ApplicationType;
}

export interface DeviceLinkRequest {
  deviceId: string;
}

export interface DeviceLinkResponse {
  latestOffset: Int64;
}

export interface DeviceUnlinkRequest {
  deviceId: string;
}

export interface DisasterInfo {
  disasterId: string;
  title: string;
  region: string;
  disasterDescription: string;
  seeMoreUrl: string;
  status: vh_EnumC37632c;
  highImpact: boolean;
}

export interface DisconnectEapAccountRequest {
  eapType: Q70_q;
}

export interface DisplayMoney {
  amount: string;
  amountString: string;
  currency: string;
}

export interface E2EEKeyChain {
  keychain: Pb1_V3[];
}

export interface E2EEMessageInfo {
  contentType: ContentType;
  contentMetadata: Record<string, string>;
  chunks: string[];
}

export interface E2EEMetadata {
  e2EEPublicKeyId: Int64;
}

export interface E2EENegotiationResult {
  allowedTypes: number[];
  publicKey: Pb1_C13097n4;
  specVersion: number;
}

export interface EapLogin {
  type: a80_EnumC16644b;
  accessToken: string;
  countryCode: string;
}

export interface EditItemsInCollectionRequest {
  collectionId: string;
  items: CollectionItem[];
}

export interface EditorsPickBannerForClient {
  id: Int64;
  endPageBannerImageUrl: string;
  defaulteditorsPickShowcaseType: Ob1_I;
  showNewBadge: boolean;
  name: string;
  description: string;
}

export interface Eg_C8928b {

}

export interface Eh_C8933a {

}

export interface Eh_C8935c {

}

export interface EstablishE2EESessionRequest {
  clientPublicKey: string;
}

export interface EstablishE2EESessionResponse {
  sessionId: string;
  serverPublicKey: string;
  expireAt: Int64;
}

export interface EventButton {
  text: string;
  linkUrl: string;
}

export interface EvidenceId {
  spaceId: string;
  objectId: string;
}

export interface ExecuteOnetimeScenarioOperation {
  connectionId: string;
  scenario: Scenario;
}

export interface ExistPinCodeResponse {
  exists: boolean;
}

export interface ExtendedMessageBox {
  id: string;
  midType: MIDType;
  lastDeliveredMessageId: MessageBoxV2MessageId;
  lastSeenMessageId: Int64;
  unreadCount: Int64;
  lastMessages: Message[];
  lastRemovedMessageId: Int64;
  lastRemovedTime: Int64;
  hiddenAtMessageId: Int64;
}

export interface ExtendedProfile {
  birthday: ExtendedProfileBirthday;
}

export interface ExtendedProfileBirthday {
  year: string;
  yearPrivacyLevelType: Pb1_H6;
  yearEnabled: boolean;
  day: string;
  dayPrivacyLevelType: Pb1_H6;
  dayEnabled: boolean;
}

export interface FetchLiveTalkEventsRequest {
  squareChatMid: string;
  sessionId: string;
  syncToken: string;
  limit: number;
}

export interface FetchLiveTalkEventsResponse {
  events: LiveTalkEvent[];
  syncToken: string;
  hasMore: boolean;
}

export interface FetchMyEventsRequest {
  subscriptionId: Int64;
  syncToken: string;
  limit: number;
  continuationToken: string;
}

export interface FetchMyEventsResponse {
  subscription: SubscriptionState;
  events: SquareEvent[];
  syncToken: string;
  continuationToken: string;
}

export interface FetchOperationsRequest {
  deviceId: string;
  offsetFrom: Int64;
}

export interface FetchOperationsResponse {
  operations: ThingsOperation[];
  hasNext: boolean;
}

export interface FetchPhonePinCodeMsgRequest {
  authSessionId: string;
  userPhoneNumber: UserPhoneNumber;
}

export interface FetchPhonePinCodeMsgResponse {
  pinCodeMessage: string;
  destinationPhoneNumber: string;
}

export interface FetchSquareChatEventsRequest {
  subscriptionId: Int64;
  squareChatMid: string;
  syncToken: string;
  limit: number;
  direction: FetchDirection;
  inclusive: BooleanState;
  continuationToken: string;
  fetchType: FetchType;
  threadMid: string;
}

export interface FetchSquareChatEventsResponse {
  subscription: SubscriptionState;
  events: SquareEvent[];
  syncToken: string;
  continuationToken: string;
}

export interface FileMeta {
  url: string;
  hash: string;
}

export interface FindChatByTicketRequest {
  ticketId: string;
}

export interface FindChatByTicketResponse {
  chat: Chat;
}

export interface FindLiveTalkByInvitationTicketRequest {
  invitationTicket: string;
}

export interface FindLiveTalkByInvitationTicketResponse {
  chatInvitationTicket: string;
  liveTalk: LiveTalk;
  chat: SquareChat;
  squareMember: SquareMember;
  chatMembershipState: SquareChatMembershipState;
  squareAdultOnly: BooleanState;
}

export interface FindSquareByEmidRequest {
  emid: string;
}

export interface FindSquareByEmidResponse {
  square: Square;
  myMembership: SquareMember;
  squareAuthority: SquareAuthority;
  squareStatus: SquareStatus;
  squareFeatureSet: SquareFeatureSet;
  noteStatus: NoteStatus;
}

export interface FindSquareByInvitationTicketRequest {
  invitationTicket: string;
}

export interface FindSquareByInvitationTicketResponse {
  square: Square;
  myMembership: SquareMember;
  squareAuthority: SquareAuthority;
  squareStatus: SquareStatus;
  squareFeatureSet: SquareFeatureSet;
  noteStatus: NoteStatus;
  chat: SquareChat;
  chatStatus: SquareChatStatus;
}

export interface FindSquareByInvitationTicketV2Request {
  invitationTicket: string;
}

export interface FindSquareByInvitationTicketV2Response {
  square: Square;
  myMembership: SquareMember;
  squareAuthority: SquareAuthority;
  squareStatus: SquareStatus;
  squareFeatureSet: SquareFeatureSet;
  noteStatus: NoteStatus;
  chat: SquareChat;
  chatStatus: SquareChatStatusWithoutMessage;
}

export interface FollowBuddyDetail {
  iconType: number;
}

export interface FollowProfile {
  followMid: Pb1_A4;
  displayName: string;
  picturePath: string;
  following: boolean;
  allowFollow: boolean;
  followBuddyDetail: FollowBuddyDetail;
}

export interface FollowRequest {
  followMid: Pb1_A4;
}

export interface FontMeta {
  id: string;
  name: string;
  displayName: string;
  type: any;
  font: FileMeta;
  fontSubset: FileMeta;
  expiresAtMillis: Int64;
}

export interface ForceEndLiveTalkRequest {
  squareChatMid: string;
  sessionId: string;
}

export interface ForceSelectedSubTabInfo {
  subTabId: string;
  forceSelectedSubTabRevision: Int64;
  wrsDefaultTabModelId: string;
}

export interface FormattedPhoneNumbers {
  localFormatPhoneNumber: string;
  prettifiedFormatPhoneNumber: string;
}

export interface FriendRequest {
  eMid: string;
  mid: string;
  direction: Pb1_F4;
  method: Pb1_G4;
  param: string;
  timestamp: Int64;
  seqId: Int64;
  displayName: string;
  picturePath: string;
  pictureStatus: string;
}

export interface FriendRequestsInfo {
  totalIncomingCount: number;
  totalOutgoingCount: number;
  recentIncomings: FriendRequest[];
  recentOutgoings: FriendRequest[];
  totalIncomingLimit: number;
  totalOutgoingLimit: number;
}

export interface FullSyncResponse {
  reasons: number[];
  nextRevision: Int64;
}

export interface GattReadAction {
  serviceUuid: string;
  characteristicUuid: string;
}

export interface Geolocation {
  longitude: number;
  latitude: number;
  accuracy: GeolocationAccuracy;
  altitudeMeters: number;
  velocityMetersPerSecond: number;
  bearingDegrees: number;
  beaconData: BeaconData[];
}

export interface GeolocationAccuracy {
  radiusMeters: number;
  radiusConfidence: number;
  altitudeAccuracy: number;
  velocityAccuracy: number;
  bearingAccuracy: number;
  accuracyMode: Pb1_EnumC13050k;
}

export interface GetAccessTokenRequest {
  fontId: string;
}

export interface GetAccessTokenResponse {
  expiresAtMillis: Int64;
}

export interface I80_C26410k {
  authSessionId: string;
}

export interface GetAcctVerifMethodResponse {
  availableMethod: T70_EnumC14392c;
  sameAccountFromAuthFactor: boolean;
}

export interface I80_C26412l {
  availableMethod: I80_EnumC26392b;
}

export interface GetAllChatMidsRequest {
  withMemberChats: boolean;
  withInvitedChats: boolean;
}

export interface GetAllChatMidsResponse {
  memberChatMids: string[];
  invitedChatMids: string[];
}

export interface GetAllowedRegistrationMethodResponse {
  registrationMethod: T70_Z0;
}

export interface GetAssertionChallengeResponse {
  sessionId: string;
  challenge: string;
}

export interface GetAttestationChallengeResponse {
  sessionId: string;
  challenge: string;
}

export interface GetBalanceResponse {
  balance: Balance;
}

export interface GetBalanceSummaryResponseV2 {
  payInfo: LinePayInfo;
  payPromotions: LinePayPromotion[];
  pointInfo: LinePointInfo;
  balanceShortcutInfo: BalanceShortcutInfo;
}

export interface GetBalanceSummaryV4WithPayV3Response {
  payInfo: LinePayInfoV3;
  payPromotions: LinePayPromotion[];
  balanceShortcutInfo: BalanceShortcutInfoV4;
  pointInfo: LinePointInfo;
}

export interface GetBirthdayEffectResponse {
  effect: HomeEffect;
}

export interface GetBleDeviceRequest {
  serviceUuid: string;
  psdi: string;
}

export interface GetBuddyChatBarRequest {
  buddyMid: string;
  chatBarRevision: Int64;
  richMenuId: string;
}

export interface GetBuddyLiveRequest {
  mid: string;
}

export interface GetBuddyLiveResponse {
  info: BuddyLive;
  refreshedIn: Int64;
}

export interface GetBuddyStatusBarV2Request {
  botMid: string;
  revision: Int64;
}

export interface GetCallStatusRequest {
  basicSearchId: string;
  otp: string;
}

export interface GetCallStatusResponse {
  isInsideBusinessHours: boolean;
  displayName: string;
  isCallSettingEnabled: boolean;
  isExpiredOtp: boolean;
  requireOtpInCallUrl: boolean;
}

export interface GetCampaignRequest {
  campaignType: string;
}

export interface GetCampaignResponse {
  campaignStatus: NZ0_EnumC12188n;
  campaignProperty: CampaignProperty;
  intervalDateTimeMillis: Int64;
}

export interface GetChallengeForPaakAuthRequest {
  sessionId: string;
}

export interface GetChallengeForPaakAuthResponse {
  options: any;
}

export interface GetChallengeForPrimaryRegRequest {
  sessionId: string;
}

export interface GetChallengeForPrimaryRegResponse {
  options: PublicKeyCredentialCreationOptions;
}

export interface GetChannelContextRequest {
  authSessionId: string;
}

export interface GetChannelContextResponse {
  channelContext: any;
}

export interface GetChatappRequest {
  chatappId: string;
  language: string;
}

export interface GetChatappResponse {
  app: Chatapp;
}

export interface GetChatsRequest {
  chatMids: string[];
  withMembers: boolean;
  withInvitees: boolean;
}

export interface GetChatsResponse {
  chats: Chat[];
}

export interface GetCoinHistoryRequest {
  appStoreCode: jO0_EnumC27533B;
  country: string;
  language: string;
  searchEndDate: string;
  offset: number;
  limit: number;
}

export interface GetCoinHistoryResponse {
  histories: CoinHistory[];
  balance: Coin;
  offset: number;
  hasNext: boolean;
}

export interface GetCoinProductsRequest {
  appStoreCode: jO0_EnumC27533B;
  country: string;
  language: string;
  pgCode: jO0_EnumC27559z;
}

export interface GetCoinProductsResponse {
  items: CoinProductItem[];
}

export interface GetContactCalendarEventResponse {
  targetUserMid: string;
  userType: LN0_X0;
  ContactCalendarEvents: ContactCalendarEvents;
  snapshotTimeMillis: Int64;
}

export interface GetContactCalendarEventTarget {
  targetUserMid: string;
}

export interface GetContactCalendarEventsRequest {
  targetUsers: GetContactCalendarEventTarget[];
  syncReason: Pb1_V7;
  requiredContactCalendarEvents: any[];
}

export interface GetContactCalendarEventsResponse {
  responses: GetContactCalendarEventResponse[];
}

export interface GetContactV3Response {
  targetUserMid: string;
  userType: LN0_X0;
  targetProfileDetail: TargetProfileDetail;
  friendDetail: LN0_Z;
  blockDetail: LN0_V;
  recommendationDetail: LN0_y0;
  notificationSettingEntry: NotificationSettingEntry;
}

export interface GetContactV3Target {
  targetUserMid: string;
}

export interface GetContactsV3Request {
  targetUsers: GetContactV3Target[];
  syncReason: Pb1_V7;
  checkUserStatusStrictly: boolean;
}

export interface GetContactsV3Response {
  responses: GetContactV3Response[];
}

export interface I80_C26413m {
  authSessionId: string;
  simCard: I80_B0;
}

export interface I80_C26414n {
  countryCode: string;
  countryInEEA: boolean;
  countrySetOfEEA: string[];
}

export interface GetCountryInfoResponse {
  countryCode: string;
  countryInEEA: boolean;
  countrySetOfEEA: string[];
}

export interface GetDisasterCasesResponse {
  disasters: DisasterInfo[];
  messageTemplate: string[];
  ttlInMillis: Int64;
}

export interface GetE2EEKeyBackupCertificatesResponse {
  urlHashList: string[];
}

export interface GetE2EEKeyBackupInfoResponse {
  blobHeaderHash: string;
  blobPayloadHash: string;
  missingKeyIds: number[];
  startTimeMillis: Int64;
  endTimeMillis: Int64;
}

export interface GetExchangeKeyRequest {
  sessionId: string;
}

export interface GetExchangeKeyResponse {
  exchangeKey: Record<string, string>;
}

export interface GetFollowBlacklistRequest {
  cursor: string;
}

export interface GetFollowBlacklistResponse {
  profiles: FollowProfile[];
  cursor: string;
}

export interface GetFollowersRequest {
  followMid: Pb1_A4;
  cursor: string;
}

export interface GetFollowersResponse {
  profiles: FollowProfile[];
  cursor: string;
  followingCount: Int64;
  followerCount: Int64;
}

export interface GetFollowingsRequest {
  followMid: Pb1_A4;
  cursor: string;
}

export interface GetFollowingsResponse {
  profiles: FollowProfile[];
  cursor: string;
  followingCount: Int64;
  followerCount: Int64;
}

export interface GetFontMetasRequest {
  requestCause: VR0_l;
}

export interface GetFontMetasResponse {
  fontMetas: FontMeta[];
  ttlInSeconds: number;
}

export interface GetFriendDetailResponse {
  targetUserMid: string;
  friendDetail: LN0_Z;
}

export interface GetFriendDetailTarget {
  targetUserMid: string;
}

export interface GetFriendDetailsRequest {
  targetUsers: GetFriendDetailTarget[];
  syncReason: Pb1_V7;
}

export interface GetFriendDetailsResponse {
  responses: GetFriendDetailResponse[];
}

export interface GetGnbBadgeStatusRequest {
  uenRevision: string;
}

export interface GetGnbBadgeStatusResponse {
  uenRevision: string;
  badgeStatus: NZ0_EnumC12170h;
}

export interface GetGoogleAdOptionsRequest {
  squareMid: string;
  chatMid: string;
  adScreen: AdScreen;
}

export interface GetGoogleAdOptionsResponse {
  showAd: boolean;
  contentUrls: string[];
  clientCacheTtlSeconds: number;
}

export interface GetGroupCallUrlInfoRequest {
  urlId: string;
}

export interface GetGroupCallUrlInfoResponse {
  title: string;
  createdTimeMillis: Int64;
}

export interface GetGroupCallUrlsResponse {
  urls: GroupCallUrl[];
}

export interface GetHomeFlexContentRequest {
  supportedFlexVersion: number;
}

export interface GetHomeFlexContentResponse {
  placements: HomeTabPlacement[];
  expireTimeMillis: Int64;
  gnbBadgeId: string;
  gnbBadgeExpireTimeMillis: Int64;
}

export interface GetHomeServiceListResponse {
  services: HomeService[];
  fixedServiceIds: number[];
  pinnedServiceCandidateIds: number[];
  categories: HomeCategory[];
  fixedServiceIdsV3: number[];
  specificServiceId: number;
}

export interface GetHomeServicesRequest {
  ids: number[];
}

export interface GetHomeServicesResponse {
  services: HomeService[];
}

export interface GetIncentiveStatusResponse {
  paypayPoint: number;
  incentiveCode: string;
  subscribedFromViral: boolean;
}

export interface GetInvitationTicketUrlRequest {
  mid: string;
}

export interface GetInvitationTicketUrlResponse {
  invitationURL: string;
}

export interface GetJoinableSquareChatsRequest {
  squareMid: string;
  continuationToken: string;
  limit: number;
}

export interface GetJoinableSquareChatsResponse {
  squareChats: SquareChat[];
  continuationToken: string;
  totalSquareChatCount: number;
  squareChatStatuses: Record<string, SquareChatStatus>;
}

export interface GetJoinedMembershipByBotMidRequest {
  botMid: string;
}

export interface GetJoinedMembershipRequest {
  uniqueKey: string;
}

export interface GetJoinedSquareChatsRequest {
  continuationToken: string;
  limit: number;
}

export interface GetJoinedSquareChatsResponse {
  chats: SquareChat[];
  chatMembers: Record<string, SquareChatMember>;
  statuses: Record<string, SquareChatStatus>;
  continuationToken: string;
}

export interface GetJoinedSquaresRequest {
  continuationToken: string;
  limit: number;
}

export interface GetJoinedSquaresResponse {
  squares: Square[];
  members: Record<string, SquareMember>;
  authorities: Record<string, SquareAuthority>;
  statuses: Record<string, SquareStatus>;
  continuationToken: string;
  noteStatuses: Record<string, NoteStatus>;
}

export interface GetKeyBackupCertificatesV2Response {
  urlHashList: string[];
}

export interface GetLFLSuggestionResponse {
  majorVersion: string;
  minorVersion: string;
  clusterLink: string;
}

export interface GetLiveTalkInfoForNonMemberRequest {
  squareChatMid: string;
  sessionId: string;
  speakers: string[];
}

export interface GetLiveTalkInfoForNonMemberResponse {
  chatName: string;
  chatImageObsHash: string;
  liveTalk: LiveTalk;
  speakers: LiveTalkSpeaker[];
  chatInvitationTicket: string;
}

export interface GetLiveTalkInvitationUrlRequest {
  squareChatMid: string;
  sessionId: string;
}

export interface GetLiveTalkInvitationUrlResponse {
  invitationUrl: string;
}

export interface GetLiveTalkSpeakersForNonMemberRequest {
  squareChatMid: string;
  sessionId: string;
  speakers: string[];
}

export interface GetLiveTalkSpeakersForNonMemberResponse {
  speakers: LiveTalkSpeaker[];
}

export interface GetLoginActorContextRequest {
  sessionId: string;
}

export interface GetLoginActorContextResponse {
  applicationType: string;
  ipAddress: string;
  location: string;
}

export interface GetMappedProfileIdsRequest {
  targetUserMids: string[];
}

export interface GetMappedProfileIdsResponse {
  mappings: Record<string, string>;
}

export interface I80_C26415o {
  authSessionId: string;
}

export interface I80_C26416p {
  maskedEmail: string;
}

export interface GetMaskedEmailResponse {
  maskedEmail: string;
}

export interface GetMessageReactionsRequest {
  squareChatMid: string;
  messageId: string;
  type: MessageReactionType;
  continuationToken: string;
  limit: number;
  threadMid: string;
}

export interface GetMessageReactionsResponse {
  reactions: SquareMessageReaction[];
  status: SquareMessageReactionStatus;
  continuationToken: string;
}

export interface GetModuleLayoutV4Request {
  etag: string;
}

export interface GetModulesRequestV2 {
  etag: string;
  deviceAdId: string;
}

export interface GetModulesRequestV3 {
  etag: string;
  tabIdentifier: NZ0_EnumC12169g1;
  deviceAdId: string;
  agreedWithTargetingAdByMid: boolean;
}

export interface GetModulesV4WithStatusRequest {
  etag: string;
  subTabId: string;
  deviceAdId: string;
  agreedWithTargetingAdByMid: boolean;
  deviceId: string;
}

export interface GetMusicSubscriptionStatusResponse {
  validUntil: Int64;
  expired: boolean;
  isStickersPremiumEnabled: boolean;
}

export interface GetMyAssetInformationV2Request {
  refresh: boolean;
}

export interface GetMyAssetInformationV2Response {
  headerInfo: HeaderInfo;
  assetServiceInfos: AssetServiceInfo[];
  serviceDisclaimerInfo: ServiceDisclaimerInfo;
  pointInfo: PointInfo;
  linkRewardInfo: LinkRewardInfo;
  pocketMoneyInfo: PocketMoneyInfo;
  scoreInfo: ScoreInfo;
  timestamp: Int64;
}

export interface GetMyChatappsRequest {
  language: string;
  continuationToken: string;
}

export interface GetMyChatappsResponse {
  apps: MyChatapp[];
  continuationToken: string;
}

export interface GetMyDashboardRequest {
  tabIdentifier: NZ0_EnumC12169g1;
}

export interface GetMyDashboardResponse {
  responseStatus: NZ0_W0;
  messages: MyDashboardItem[];
  cacheTimeSec: number;
  cautionText: string;
}

export interface GetNoteStatusRequest {
  squareMid: string;
}

export interface GetNoteStatusResponse {
  squareMid: string;
  status: NoteStatus;
}

export interface GetNotificationSettingsRequest {
  chatMids: string[];
  syncReason: Pb1_V7;
}

export interface GetNotificationSettingsResponse {
  notificationSettingEntries: Record<string, NotificationSettingEntry>;
}

export interface I80_C26417q {
  authSessionId: string;
}

export interface GetPasswordHashingParametersForPwdRegRequest {
  authSessionId: string;
}

export interface GetPasswordHashingParametersForPwdRegResponse {
  params: PasswordHashingParameters;
  passwordValidationRule: PasswordValidationRule[];
}

export interface I80_C26418r {
  params: PasswordHashingParameters;
  passwordValidationRule: PasswordValidationRule[];
}

export interface GetPasswordHashingParametersForPwdVerifRequest {
  authSessionId: string;
  accountIdentifier: AccountIdentifier;
}

export interface I80_C26419s {
  authSessionId: string;
}

export interface GetPasswordHashingParametersForPwdVerifResponse {
  isV1HashRequired: boolean;
  v1HashParams: V1PasswordHashingParameters;
  hashParams: PasswordHashingParameters;
}

export interface I80_C26420t {
  isV1HashRequired: boolean;
  v1HashParams: V1PasswordHashingParameters;
  hashParams: PasswordHashingParameters;
}

export interface GetPasswordHashingParametersRequest {
  sessionId: string;
}

export interface GetPasswordHashingParametersResponse {
  hmacKey: string;
  scryptParams: ScryptParams;
  passwordValidationRule: PasswordValidationRule[];
}

export interface GetPhoneVerifMethodForRegistrationRequest {
  authSessionId: string;
  device: Device;
  userPhoneNumber: UserPhoneNumber;
}

export interface GetPhoneVerifMethodForRegistrationResponse {
  availableMethods: number[];
  prettifiedPhoneNumber: string;
}

export interface GetPhoneVerifMethodV2Request {
  authSessionId: string;
  device: Device;
  userPhoneNumber: UserPhoneNumber;
}

export interface I80_C26421u {
  authSessionId: string;
  userPhoneNumber: UserPhoneNumber;
}

export interface I80_C26422v {
  availableMethods: number[];
  prettifiedPhoneNumber: string;
}

export interface GetPhoneVerifMethodV2Response {
  availableMethods: number[];
  prettifiedPhoneNumber: string;
}

export interface GetPhotoboothBalanceResponse {
  availableTickets: number;
  nextTicketAvailableAt: Int64;
}

export interface GetPopularKeywordsResponse {
  popularKeywords: PopularKeyword[];
  expiredAt: Int64;
}

export interface GetPredefinedScenarioSetsRequest {
  deviceIds: string[];
}

export interface GetPredefinedScenarioSetsResponse {
  scenarioSets: Record<string, ScenarioSet>;
}

export interface GetPremiumContextForMigResponse {
  isPremiumActive: boolean;
  isPremiumBackupActive: boolean;
  premiumType: T70_L;
  availablePremiumTypes: number[];
}

export interface GetPremiumDataRetentionResponse {
  dataRetentions: DataRetention[];
  noSyncUntil: Int64;
}

export interface GetPremiumStatusResponse {
  active: boolean;
  validUntil: Int64;
  updatedTime: Int64;
  freeTrialUsed: boolean;
  willExpire: boolean;
  newToYahooShopping: boolean;
  idLinked: boolean;
  onFreeTrial: boolean;
  duplicated: boolean;
  planType: fN0_p;
  noSyncUntil: Int64;
  productId: string;
  currency: string;
  price: string;
  status: fN0_H;
  invitedByFriend: boolean;
  canceledProviders: number[];
  nextPaymentTime: Int64;
}

export interface GetPreviousMessagesV2Request {
  messageBoxId: string;
  endMessageId: MessageBoxV2MessageId;
  messagesCount: number;
  withReadCount: boolean;
  receivedOnly: boolean;
}

export interface GetProductLatestVersionForUserRequest {
  productType: Ob1_O0;
  productId: string;
}

export interface GetProductLatestVersionForUserResponse {
  latestVersion: Int64;
  latestVersionString: string;
}

export interface GetProductRequest {
  productType: Ob1_O0;
  productId: string;
  carrierCode: string;
  saveBrowsingHistory: boolean;
}

export interface GetProductResponse {
  productDetail: ProductDetail;
}

export interface GetProfileRequest {
  profileId: string;
}

export interface GetProfileResponse {
  profile: Profile;
}

export interface GetProfilesRequest {
  syncReason: Pb1_V7;
}

export interface GetProfilesResponse {
  profiles: Profile[];
}

export interface GetPublishedMembershipsRequest {
  basicSearchId: string;
}

export interface GetQuickMenuResponse {
  pointInfo: QuickMenuPointInfo;
  couponInfo: QuickMenuCouponInfo;
  myCardInfo: QuickMenuMyCardInfo;
}

export interface GetRecommendationDetailResponse {
  targetUserMid: string;
  recommendationOrNot: LN0_y0;
}

export interface GetRecommendationDetailTarget {
  targetUserMid: string;
}

export interface GetRecommendationDetailsRequest {
  targetUsers: GetRecommendationDetailTarget[];
  syncReason: Pb1_V7;
}

export interface GetRecommendationDetailsResponse {
  responses: GetRecommendationDetailResponse[];
}

export interface GetRecommendationResponse {
  results: ProductSearchSummary[];
  continuationToken: string;
  totalSize: Int64;
}

export interface GetRepairElementsRequest {
  profile: boolean;
  settings: boolean;
  configurations: ConfigurationsParams;
  numLocalJoinedGroups: number;
  numLocalInvitedGroups: number;
  numLocalFriends: number;
  numLocalRecommendations: number;
  numLocalBlockedFriends: number;
  numLocalBlockedRecommendations: number;
  localGroupMembers: Record<string, RepairGroupMembers>;
  syncReason: Pb1_V7;
  localProfileMappings: Record<string, number>;
}

export interface GetRepairElementsResponse {
  profile: RepairTriggerProfileElement;
  settings: RepairTriggerSettingsElement;
  configurations: RepairTriggerConfigurationsElement;
  numJoinedGroups: RepairTriggerNumElement;
  numInvitedGroups: RepairTriggerNumElement;
  numFriends: RepairTriggerNumElement;
  numRecommendations: RepairTriggerNumElement;
  numBlockedFriends: RepairTriggerNumElement;
  numBlockedRecommendations: RepairTriggerNumElement;
  groupMembers: RepairTriggerGroupMembersElement;
  profileMappings: RepairTriggerProfileMappingListElement;
}

export interface GetRequest {
  keyName: string;
  ns: t80_h;
}

export interface GetResourceFileReponse {
  tagClusterFileResponse: GetTagClusterFileResponse;
}

export interface GetResourceFileRequest {
  tagClusterFileRequest: Ob1_C12642m0;
  staging: boolean;
}

export interface GetResponse {
  value: SettingValue;
}

export interface GetResponseStatusRequest {
  botMid: string;
}

export interface GetResponseStatusResponse {
  displayedResponseStatus: jf_EnumC27712a;
}

export interface GetSCCRequest {
  basicSearchId: string;
}

export interface I80_C26423w {
  authSessionId: string;
}

export interface I80_C26424x {
  encryptionKey: I80_y0;
}

export interface GetSeasonalEffectsResponse {
  effects: HomeEffect[];
}

export interface GetSecondAuthMethodResponse {
  secondAuthMethod: T70_e1;
}

export interface GetServiceShortcutMenuResponse {
  revision: string;
  refreshTimeSec: number;
  expandable: boolean;
  serviceShortcuts: ServiceShortcut[];
  menuDescription: string;
  numberOfItemsInRow: number;
}

export interface GetSessionContentBeforeMigCompletionResponse {
  appTypeDifferentFromPrevDevice: boolean;
  e2eeKeyBackupServiceConfig: boolean;
  e2eeKeyBackupPeriodServiceConfig: number;
}

export interface GetSmartChannelRecommendationsRequest {
  maxResults: number;
  placement: string;
  testMode: boolean;
}

export interface GetSmartChannelRecommendationsResponse {
  smartChannelRecommendations: SmartChannelRecommendation[];
  minInterval: number;
  requestId: string;
}

export interface GetSquareAuthoritiesRequest {
  squareMids: string[];
}

export interface GetSquareAuthoritiesResponse {
  authorities: Record<string, SquareAuthority>;
}

export interface GetSquareAuthorityRequest {
  squareMid: string;
}

export interface GetSquareAuthorityResponse {
  authority: SquareAuthority;
}

export interface GetSquareBotRequest {
  botMid: string;
}

export interface GetSquareBotResponse {
  squareBot: SquareBot;
}

export interface GetSquareCategoriesResponse {
  categoryList: Category[];
}

export interface GetSquareChatAnnouncementsRequest {
  squareChatMid: string;
}

export interface GetSquareChatAnnouncementsResponse {
  announcements: SquareChatAnnouncement[];
}

export interface GetSquareChatEmidRequest {
  squareChatMid: string;
}

export interface GetSquareChatEmidResponse {
  squareChatEmid: string;
}

export interface GetSquareChatFeatureSetRequest {
  squareChatMid: string;
}

export interface GetSquareChatFeatureSetResponse {
  squareChatFeatureSet: SquareChatFeatureSet;
}

export interface GetSquareChatMemberRequest {
  squareMemberMid: string;
  squareChatMid: string;
}

export interface GetSquareChatMemberResponse {
  squareChatMember: SquareChatMember;
}

export interface GetSquareChatMembersRequest {
  squareChatMid: string;
  continuationToken: string;
  limit: number;
}

export interface GetSquareChatMembersResponse {
  squareChatMembers: SquareMember[];
  continuationToken: string;
  contentsAttributes: Record<string, number>;
}

export interface GetSquareChatRequest {
  squareChatMid: string;
}

export interface GetSquareChatResponse {
  squareChat: SquareChat;
  squareChatMember: SquareChatMember;
  squareChatStatus: SquareChatStatus;
}

export interface GetSquareChatStatusRequest {
  squareChatMid: string;
}

export interface GetSquareChatStatusResponse {
  chatStatus: SquareChatStatus;
}

export interface GetSquareEmidRequest {
  squareMid: string;
}

export interface GetSquareEmidResponse {
  squareEmid: string;
}

export interface GetSquareFeatureSetRequest {
  squareMid: string;
}

export interface GetSquareFeatureSetResponse {
  squareFeatureSet: SquareFeatureSet;
}

export interface GetSquareInfoByChatMidRequest {
  squareChatMid: string;
}

export interface GetSquareInfoByChatMidResponse {
  defaultChatMid: string;
  squareName: string;
  squareDesc: string;
}

export interface GetSquareMemberRelationRequest {
  squareMid: string;
  targetSquareMemberMid: string;
}

export interface GetSquareMemberRelationResponse {
  squareMid: string;
  targetSquareMemberMid: string;
  relation: SquareMemberRelation;
}

export interface GetSquareMemberRelationsRequest {
  state: SquareMemberRelationState;
  continuationToken: string;
  limit: number;
}

export interface GetSquareMemberRelationsResponse {
  squareMembers: SquareMember[];
  relations: Record<string, SquareMemberRelation>;
  continuationToken: string;
}

export interface GetSquareMemberRequest {
  squareMemberMid: string;
}

export interface GetSquareMemberResponse {
  squareMember: SquareMember;
  relation: SquareMemberRelation;
  oneOnOneChatMid: string;
  contentsAttribute: ContentsAttribute;
}

export interface GetSquareMembersBySquareRequest {
  squareMid: string;
  squareMemberMids: string[];
}

export interface GetSquareMembersBySquareResponse {
  members: SquareMember[];
  contentsAttributes: Record<string, number>;
}

export interface GetSquareMembersRequest {
  mids: string[];
}

export interface GetSquareMembersResponse {
  members: Record<string, SquareMember>;
}

export interface GetSquareRequest {
  mid: string;
}

export interface GetSquareResponse {
  square: Square;
  myMembership: SquareMember;
  squareAuthority: SquareAuthority;
  squareStatus: SquareStatus;
  squareFeatureSet: SquareFeatureSet;
  noteStatus: NoteStatus;
  extraInfo: SquareExtraInfo;
}

export interface GetSquareStatusRequest {
  squareMid: string;
}

export interface GetSquareStatusResponse {
  squareStatus: SquareStatus;
}

export interface GetSquareThreadMidRequest {
  chatMid: string;
  messageId: string;
}

export interface GetSquareThreadMidResponse {
  threadMid: string;
}

export interface GetSquareThreadRequest {
  threadMid: string;
  includeRootMessage: boolean;
}

export interface GetSquareThreadResponse {
  squareThread: SquareThread;
  myThreadMember: SquareThreadMember;
  rootMessage: SquareMessage;
}

export interface GetStudentInformationResponse {
  studentInformation: StudentInformation;
  isValid: boolean;
}

export interface GetSubscriptionPlansRequest {
  subscriptionService: any;
  storeCode: Ob1_K1;
}

export interface GetSubscriptionPlansResponse {
  plans: SubscriptionPlan[];
}

export interface GetSubscriptionStatusRequest {
  includeOtherOwnedSubscriptions: boolean;
}

export interface GetSubscriptionStatusResponse {
  subscriptions: Record<number, SubscriptionStatus>;
  hasValidStudentInformation: boolean;
}

export interface GetSuggestDictionarySettingResponse {
  results: SuggestDictionarySetting[];
}

export interface GetSuggestResourcesV2Request {
  productType: Ob1_O0;
  productIds: string[];
}

export interface GetSuggestResourcesV2Response {
  suggestResources: Record<string, SuggestResource>;
}

export interface GetSuggestTrialRecommendationResponse {
  recommendations: SuggestTrialRecommendation[];
  expiresAt: Int64;
  recommendationGrouping: string;
}

export interface GetTagClusterFileResponse {
  path: string;
  updatedTimeMillis: Int64;
}

export interface GetTaiwanBankBalanceRequest {
  accessToken: string;
  authorizationCode: string;
  codeVerifier: string;
}

export interface GetTaiwanBankBalanceResponse {
  maintenaceText: string;
  lineBankPromotions: LineBankPromotion[];
  taiwanBankBalanceInfo: TaiwanBankBalanceInfo;
  lineBankShortcutInfo: LineBankShortcutInfo;
  loginParameters: TaiwanBankLoginParameters;
}

export interface GetTargetProfileResponse {
  targetUserMid: string;
  userType: LN0_X0;
  targetProfileDetail: TargetProfileDetail;
}

export interface GetTargetProfileTarget {
  targetUserMid: string;
}

export interface GetTargetProfilesRequest {
  targetUsers: GetTargetProfileTarget[];
  syncReason: Pb1_V7;
}

export interface GetTargetProfilesResponse {
  responses: GetTargetProfileResponse[];
}

export interface GetTargetingPopupResponse {
  targetingPopups: PopupProperty[];
  intervalTimeSec: number;
}

export interface GetThaiBankBalanceRequest {
  deviceId: string;
}

export interface GetThaiBankBalanceResponse {
  maintenaceText: string;
  thaiBankBalanceInfo: ThaiBankBalanceInfo;
  lineBankPromotions: LineBankPromotion[];
  lineBankShortcutInfo: LineBankShortcutInfo;
}

export interface GetTotalCoinBalanceRequest {
  appStoreCode: jO0_EnumC27533B;
}

export interface GetTotalCoinBalanceResponse {
  totalBalance: string;
  paidCoinBalance: string;
  freeCoinBalance: string;
  rewardCoinBalance: string;
  expectedAutoExchangedCoinBalance: string;
}

export interface GetUserCollectionsRequest {
  lastUpdatedTimeMillis: Int64;
  includeSummary: boolean;
  productType: Ob1_O0;
}

export interface GetUserCollectionsResponse {
  collections: Collection[];
  updated: boolean;
}

export interface GetUserProfileResponse {
  userProfile: UserProfile;
}

export interface GetUserSettingsRequest {
  requestedAttrs: any[];
}

export interface GetUserSettingsResponse {
  requestedAttrs: number[];
  userSettings: SquareUserSettings;
}

export interface GetUserVectorRequest {
  majorVersion: string;
}

export interface GetUserVectorResponse {
  userVector: number[];
  majorVersion: string;
  minorVersion: string;
}

export interface GetUsersMappedByProfileRequest {
  profileId: string;
  syncReason: Pb1_V7;
}

export interface GetUsersMappedByProfileResponse {
  mappedMids: string[];
}

export interface GlobalEvent {
  type: Pb1_EnumC13209v5;
  minDelayInMinutes: number;
  maxDelayInMinutes: number;
  createTimeMillis: Int64;
  maxDelayHardLimit: boolean;
}

export interface GroupCall {
  online: boolean;
  chatMid: string;
  hostMid: string;
  memberMids: string[];
  started: Int64;
  mediaType: Pb1_EnumC13237x5;
  protocol: Pb1_EnumC13251y5;
  maxAllowableMembers: number;
}

export interface GroupCallRoute {
  token: string;
  cscf: CallHost;
  mix: CallHost;
  hostMid: string;
  capabilities: string[];
  proto: Pb1_EnumC13251y5;
  voipAddress: string;
  voipUdpPort: number;
  voipTcpPort: number;
  fromZone: string;
  commParam: string;
  polarisAddress: string;
  polarisUdpPort: number;
  polarisZone: string;
  orionAddress: string;
  voipAddress6: string;
  stnpk: string;
}

export interface GroupCallUrl {
  urlId: string;
  title: string;
  createdTimeMillis: Int64;
}

export interface GroupExtra {
  creator: string;
  preventedJoinByTicket: boolean;
  invitationTicket: string;
  memberMids: Record<string, Int64>;
  inviteeMids: Record<string, Int64>;
  addFriendDisabled: boolean;
  ticketDisabled: boolean;
  autoName: boolean;
}

export interface HeaderContent {
  iconUrl: string;
  iconAltText: string;
  linkUrl: string;
  title: string;
  animationImageUrl: string;
  tooltipText: string;
}

export interface HeaderInfo {
  totalBalance: string;
  currencyProperty: CurrencyProperty;
}

export interface HideSquareMemberContentsRequest {
  squareMemberMid: string;
}

export interface HomeCategory {
  id: number;
  title: string;
  ids: number[];
}

export interface HomeEffect {
  id: string;
  resourceUrl: string;
  checksum: string;
  startDate: Int64;
  endDate: Int64;
}

export interface HomeService {
  id: number;
  title: string;
  serviceEntryUrl: string;
  storeUrl: string;
  iconUrl: string;
  pictogramIconUrl: string;
  badgeUpdatedTimeMillis: Int64;
  badgeType: Eg_EnumC8927a;
  serviceDescription: string;
  iconThemeDisabled: boolean;
}

export interface HomeTabPlacement {
  placementTemplateId: string;
  placementService: string;
  placementLogic: string;
  contents: string;
  crsPlacementImpressionTrackingUrl: string;
}

export interface Icon {
  darkModeUrl: string;
  lightModeUrl: string;
}

export interface IconDisplayRule {
  rule: string;
  offset: number;
}

export interface IdentifierConfirmationRequest {
  metaData: Record<string, string>;
  forceRegistration: boolean;
  verificationCode: string;
}

export interface IdentityCredentialRequest {
  metaData: Record<string, string>;
  identityProvider: IdentityProvider;
  cipherKeyId: string;
  cipherText: string;
  confirmationRequest: IdentifierConfirmationRequest;
}

export interface IdentityCredentialResponse {
  metaData: Record<string, string>;
  responseType: Pb1_F5;
  confirmationVerifier: string;
  timeoutInSeconds: Int64;
}

export interface Image {
  url: string;
  height: number;
  width: number;
}

export interface ImageTextProperty {
  status: Ob1_EnumC12656r0;
  plainText: string;
  nameTextMaxCharacterCount: number;
  encryptedText: string;
}

export interface InstantNews {
  newsId: Int64;
  newsService: string;
  ttlMillis: Int64;
  category: string;
  categoryBgColor: string;
  categoryColor: string;
  title: string;
  url: string;
  image: string;
}

export interface InviteFriendsRequest {
  campaignId: string;
  invitees: string[];
}

export interface InviteFriendsResponse {
  result: fN0_EnumC24469a;
}

export interface InviteIntoChatRequest {
  reqSeq: number;
  chatMid: string;
  targetUserMids: string[];
}

export interface InviteIntoSquareChatRequest {
  inviteeMids: string[];
  squareChatMid: string;
}

export interface InviteIntoSquareChatResponse {
  inviteeMids: string[];
}

export interface InviteToChangeRoleRequest {
  squareChatMid: string;
  sessionId: string;
  targetMid: string;
  targetRole: LiveTalkRole;
}

export interface InviteToListenRequest {
  squareChatMid: string;
  sessionId: string;
  targetMid: string;
}

export interface InviteToLiveTalkRequest {
  squareChatMid: string;
  sessionId: string;
  invitees: string[];
}

export interface InviteToSpeakRequest {
  squareChatMid: string;
  sessionId: string;
  targetMid: string;
}

export interface InviteToSpeakResponse {
  inviteRequestId: string;
}

export interface InviteToSquareRequest {
  squareMid: string;
  invitees: string[];
  squareChatMid: string;
}

export interface IpassTokenProperty {
  token: string;
  tokenIssuedTimestamp: string;
}

export interface IsProductForCollectionsRequest {
  productType: Ob1_O0;
  productId: string;
}

export interface IsProductForCollectionsResponse {
  isAvailable: boolean;
}

export interface IsStickerAvailableForCombinationStickerRequest {
  packageId: string;
}

export interface IsStickerAvailableForCombinationStickerResponse {
  availableForCombinationSticker: boolean;
}

export interface IssueBirthdayGiftTokenRequest {
  recipientUserMid: string;
}

export interface IssueBirthdayGiftTokenResponse {
  giftAssociationToken: string;
}

export interface IssueV3TokenForPrimaryRequest {
  udid: string;
  systemDisplayName: string;
  modelName: string;
}

export interface IssueV3TokenForPrimaryResponse {
  accessToken: string;
  refreshToken: string;
  durationUntilRefreshInSec: Int64;
  refreshApiRetryPolicy: RefreshApiRetryPolicy;
  loginSessionId: string;
  tokenIssueTimeEpochSec: Int64;
  mid: string;
}

export interface IssueWebAuthDetailsForSecondAuthResponse {
  webAuthDetails: WebAuthDetails;
}

export interface JoinChatByCallUrlRequest {
  urlId: string;
  reqSeq: number;
}

export interface JoinChatByCallUrlResponse {
  chat: Chat;
}

export interface JoinLiveTalkRequest {
  squareChatMid: string;
  sessionId: string;
  wantToSpeak: boolean;
  claimAdult: BooleanState;
}

export interface JoinLiveTalkResponse {
  hostMemberMid: string;
  memberSessionId: string;
  token: string;
  proto: string;
  voipAddress: string;
  voipAddress6: string;
  voipUdpPort: number;
  voipTcpPort: number;
  fromZone: string;
  commParam: string;
  orionAddress: string;
  polarisAddress: string;
  polarisZone: string;
  polarisUdpPort: number;
  speaker: boolean;
}

export interface JoinSquareChatRequest {
  squareChatMid: string;
}

export interface JoinSquareChatResponse {
  squareChat: SquareChat;
  squareChatStatus: SquareChatStatus;
  squareChatMember: SquareChatMember;
}

export interface JoinSquareRequest {
  squareMid: string;
  member: SquareMember;
  squareChatMid: string;
  joinValue: SquareJoinMethodValue;
  claimAdult: BooleanState;
}

export interface JoinSquareResponse {
  square: Square;
  squareAuthority: SquareAuthority;
  squareStatus: SquareStatus;
  squareMember: SquareMember;
  squareFeatureSet: SquareFeatureSet;
  noteStatus: NoteStatus;
  squareChat: SquareChat;
  squareChatStatus: SquareChatStatus;
  squareChatMember: SquareChatMember;
}

export interface JoinSquareThreadRequest {
  chatMid: string;
  threadMid: string;
}

export interface JoinSquareThreadResponse {
  threadMember: SquareThreadMember;
}

export interface JoinedMemberships {
  subscribing: MemberInfo[];
  expired: MemberInfo[];
}

export interface KickOutLiveTalkParticipantsRequest {
  squareChatMid: string;
  sessionId: string;
  target: LiveTalkKickOutTarget;
}

export interface KickoutFromGroupCallRequest {
  chatMid: string;
  targetMids: string[];
}

export interface LFLClusterV2 {
  majorVersion: string;
  minorVersion: string;
  tags: Tag[];
  products: Product[];
}

export interface LIFFMenuColor {
  iconColor: number;
  statusBarColor: Qj_EnumC13585b;
  titleTextColor: number;
  titleSubtextColor: number;
  titleButtonColor: number;
  titleBackgroundColor: number;
  progressBarColor: number;
  progressBackgroundColor: number;
  titleButtonAreaBackgroundColor: number;
  titleButtonAreaBorderColor: number;
}

export interface LIFFMenuColorSetting {
  lightModeColor: LIFFMenuColor;
  darkModeColor: LIFFMenuColor;
}

export interface LN0_A {

}

export interface LN0_A0 {

}

export interface LN0_B {

}

export interface LN0_B0 {

}

export interface LN0_C0 {

}

export interface LN0_C11270b {

}

export interface LN0_C11274d {
  invalid: AddMetaInvalid;
  byPhone: AddMetaByPhone;
  bySearchId: AddMetaBySearchId;
  byUserTicket: AddMetaByUserTicket;
  groupMemberList: AddMetaGroupMemberList;
  timelineCPF: LN0_P;
  smartChannelCPF: LN0_L;
  openchatCPF: LN0_G;
  beaconBanner: LN0_C11282h;
  friendRecommendation: LN0_C11300q;
  homeRecommendation: LN0_C11307u;
  shareContact: AddMetaShareContact;
  strangerMessage: AddMetaStrangerMessage;
  strangerCall: AddMetaStrangerCall;
  mentionInChat: AddMetaMentionInChat;
  timeline: LN0_O;
  unifiedSearch: LN0_Q;
  lineLab: LN0_C11313x;
  lineToCall: LN0_A;
  groupVideo: AddMetaGroupVideoCall;
  friendRequest: LN0_r;
  liveViewer: LN0_C11315y;
  lineThings: LN0_C11316z;
  mediaCapture: LN0_B;
  avatarOASetting: LN0_C11280g;
  urlScheme: LN0_T;
  addressBook: LN0_C11276e;
  unifiedSearchOATab: LN0_S;
  profileUndefined: AddMetaProfileUndefined;
  DEPRECATED_oaChatHeader: LN0_F;
  chatMenu: LN0_C11294n;
  chatHeader: LN0_C11290l;
  homeTabCPF: LN0_C11309v;
  chatList: LN0_C11292m;
  chatNote: AddMetaChatNote;
  chatNoteMenu: AddMetaChatNoteMenu;
  walletTabCPF: LN0_U;
  oaCall: LN0_E;
  searchIdInUnifiedSearch: AddMetaSearchIdInUnifiedSearch;
  newsDigestADCPF: LN0_D;
  albumCPF: LN0_C11278f;
  premiumAgreement: LN0_H;
}

export interface LN0_C11276e {

}

export interface LN0_C11278f {

}

export interface LN0_C11280g {

}

export interface LN0_C11282h {

}

export interface LN0_C11290l {

}

export interface LN0_C11292m {

}

export interface LN0_C11294n {

}

export interface LN0_C11300q {

}

export interface LN0_C11307u {

}

export interface LN0_C11308u0 {

}

export interface LN0_C11309v {

}

export interface LN0_C11310v0 {

}

export interface LN0_C11312w0 {

}

export interface LN0_C11313x {

}

export interface LN0_C11315y {

}

export interface LN0_C11316z {

}

export interface LN0_D {

}

export interface LN0_E {

}

export interface LN0_F {

}

export interface LN0_G {

}

export interface LN0_H {

}

export interface LN0_L {

}

export interface LN0_O {

}

export interface LN0_P {

}

export interface LN0_Q {

}

export interface LN0_S {

}

export interface LN0_T {

}

export interface LN0_U {

}

export interface LN0_V {
  user: UserBlockDetail;
  bot: BotBlockDetail;
  notBlocked: LN0_C11308u0;
}

export interface LN0_Z {
  user: UserFriendDetail;
  bot: BotFriendDetail;
  notFriend: LN0_C11310v0;
}

export interface LN0_r {

}

export interface LN0_y0 {
  recommendationDetail: RecommendationDetail;
  notRecommended: LN0_C11312w0;
}

export interface LN0_z0 {
  sharedChat: RecommendationReasonSharedChat;
  reverseFriendByUserId: LN0_C0;
  reverseFriendByQrCode: LN0_B0;
  reverseFriendByPhone: LN0_A0;
}

export interface LatestProductByAuthorItem {
  productId: string;
  displayName: string;
  version: Int64;
  newFlag: boolean;
  productResourceType: Ob1_I0;
  popupLayer: Ob1_B0;
}

export interface LatestProductsByAuthorRequest {
  productType: Ob1_O0;
  authorId: Int64;
  limit: number;
}

export interface LatestProductsByAuthorResponse {
  authorId: Int64;
  author: string;
  items: LatestProductByAuthorItem[];
}

export interface LeaveSquareChatRequest {
  squareChatMid: string;
  sayGoodbye: boolean;
  squareChatMemberRevision: Int64;
}

export interface LeaveSquareRequest {
  squareMid: string;
}

export interface LeaveSquareThreadRequest {
  chatMid: string;
  threadMid: string;
}

export interface LeaveSquareThreadResponse {
  threadMember: SquareThreadMember;
}

export interface LeftSquareMember {
  squareMemberMid: string;
  displayName: string;
  profileImageObsHash: string;
  updatedAt: Int64;
}

export interface LiffAdvertisingId {
  advertisingId: string;
  tracking: boolean;
  att: Qj_EnumC13584a;
  skAdNetwork: SKAdNetwork;
}

export interface LiffChatContext {
  chatMid: string;
}

export interface LiffDeviceSetting {
  videoAutoPlayAllowed: boolean;
  advertisingId: LiffAdvertisingId;
}

export interface LiffErrorConsentRequired {
  channelId: string;
  consentUrl: string;
}

export interface LiffErrorPermanentLinkInvalidRequest {
  liffId: string;
  fallbackUrl: string;
}

export interface LiffFIDOExternalService {
  rpId: string;
  rpApiBaseUrl: string;
}

export interface LiffSquareChatContext {
  squareChatMid: string;
}

export interface LiffView {
  type: string;
  url: string;
  titleTextColor: number;
  titleBackgroundColor: number;
  titleIconUrl: string;
  titleSubtextColor: number;
  titleButtonColor: number;
  progressBarColor: number;
  progressBackgroundColor: number;
  trustedDomain: boolean;
  suspendable: boolean;
  maxBrightness: boolean;
  titleButtonAreaBackgroundColor: number;
  titleButtonAreaBorderColor: number;
  suspendableV2: boolean;
  menuStyle: Qj_EnumC13606x;
  moduleMode: boolean;
  pinToHomeServiceId: number;
  menuColorSetting: LIFFMenuColorSetting;
  showPinInduction: boolean;
  appName: string;
  adaptableColorSchemes: number[];
  provider: Provider;
  basicAuthAllowed: boolean;
  siriDonationAllowed: boolean;
  transitionToNonLiffWithoutPopupAllowed: boolean;
  urlHistoryAllowed: boolean;
  shrinkHeaderDisabled: boolean;
  skipWebRTCPermissionPopupAllowed: boolean;
  useGmaSdkAllowed: boolean;
  useMinimizeButtonAllowed: boolean;
}

export interface LiffViewRequest {
  liffId: string;
  context: Qj_C13595l;
  lang: string;
  deviceSetting: LiffDeviceSetting;
  msit: string;
  subsequentLiff: boolean;
  domain: string;
}

export interface LiffViewResponse {
  view: LiffView;
  contextToken: string;
  accessToken: string;
  featureToken: string;
  features: number[];
  channelId: string;
  idToken: string;
  scopes: string[];
  launchOptions: number[];
  permanentLinkPattern: Qj_a0;
  subLiffView: SubLiffView;
  revisions: Record<number, number>;
  accessTokenExpiresIn: Int64;
  accessTokenExpiresInWithRoom: Int64;
  liffId: string;
  miniDomainAllowed: boolean;
  miniAppId: string;
  miniHistoryServiceId: number;
  addToHomeV2Allowed: boolean;
  addToHomeV2LineSchemeAllowed: boolean;
  fido: Qj_C13602t;
  omitLiffReferrer: boolean;
}

export interface LiffViewWithoutUserContextRequest {
  liffId: string;
}

export interface LiffWebLoginRequest {
  hookedFullUrl: string;
  sessionString: string;
  context: Qj_C13595l;
  deviceSetting: LiffDeviceSetting;
}

export interface LiffWebLoginResponse {
  returnUrl: string;
  sessionString: string;
  liffId: string;
}

export interface LineBankBalanceShortcut {
  iconPosition: number;
  iconUrl: string;
  iconText: string;
  iconAltText: string;
  iconType: NZ0_EnumC12154b1;
  linkUrl: string;
  tsTargetId: string;
  userGuidePopupInfo: ShortcutUserGuidePopupInfo;
}

export interface LineBankPromotion {
  mainText: string;
  linkUrl: string;
  tsTargetId: string;
}

export interface LineBankShortcutInfo {
  mainShortcuts: LineBankBalanceShortcut[];
  subShortcuts: LineBankBalanceShortcut[];
}

export interface LinePayInfo {
  balanceAmount: string;
  currencyProperty: CurrencyProperty;
  payMemberStatus: NZ0_EnumC12195p0;
  applicationUrl: string;
  chargeUrl: string;
  payMemberGrade: NZ0_EnumC12192o0;
  country: string;
  referenceNumber: string;
  ipassTokenProperty: IpassTokenProperty;
  iconUrl: string;
  iconAltText: string;
  iconLinkUrl: string;
  suspendedText: string;
  responseStatus: NZ0_W0;
}

export interface LinePayInfoV3 {
  availableBalance: string;
  availableBalanceString: string;
  currencyProperty: CurrencyProperty;
  payMemberStatus: NZ0_EnumC12195p0;
  payMemberGrade: NZ0_EnumC12192o0;
  country: string;
  applicationUrl: string;
  iconAltText: string;
  iconLinkUrl: string;
  suspendedText: string;
  responseStatus: NZ0_W0;
}

export interface LinePayPromotion {
  mainText: string;
  subText: string;
  buttonText: string;
  iconUrl: string;
  linkUrl: string;
  tsTargetId: string;
}

export interface LinePointInfo {
  balanceAmount: string;
  applicationUrl: string;
  iconUrl: string;
  displayText: string;
  responseStatus: NZ0_W0;
}

export interface LinkRewardInfo {
  assetServiceInfo: AssetServiceInfo;
  autoConversion: boolean;
  backgroundColorCode: string;
}

export interface LiveTalk {
  squareChatMid: string;
  sessionId: string;
  title: string;
  type: LiveTalkType;
  speakerSetting: LiveTalkSpeakerSetting;
  allowRequestToSpeak: boolean;
  hostMemberMid: string;
  announcement: string;
  participantCount: number;
  revision: Int64;
  startedAt: Int64;
}

export interface LiveTalkEvent {
  type: LiveTalkEventType;
  payload: LiveTalkEventPayload;
  revision: Int64;
}

export interface LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak {
  allowRequestToSpeak: boolean;
}

export interface LiveTalkEventNotifiedUpdateLiveTalkAnnouncement {
  announcement: string;
}

export interface LiveTalkEventNotifiedUpdateLiveTalkTitle {
  title: string;
}

export interface LiveTalkEventNotifiedUpdateSquareMember {
  squareMemberMid: string;
  displayName: string;
  profileImageObsHash: string;
  role: SquareMemberRole;
}

export interface LiveTalkEventNotifiedUpdateSquareMemberRole {
  squareMemberMid: string;
  role: SquareMemberRole;
}

export interface LiveTalkExtraInfo {
  saturnResponse: string;
}

export interface LiveTalkParticipant {
  mid: string;
}

export interface LiveTalkSpeaker {
  displayName: string;
  profileImageObsHash: string;
  role: SquareMemberRole;
}

export interface LiveTalkSubscriptionNotification {
  squareChatMid: string;
  sessionId: string;
}

export interface Locale {
  language: string;
  country: string;
}

export interface Location {
  title: string;
  address: string;
  latitude: number;
  longitude: number;
  phone: string;
  categoryId: string;
  provider: Pb1_D6;
  accuracy: GeolocationAccuracy;
  altitudeMeters: number;
}

export interface LocationDebugInfo {
  poiInfo: PoiInfo;
}

export interface LookupAvailableEapRequest {
  authSessionId: string;
}

export interface LookupAvailableEapResponse {
  availableEap: number[];
}

export interface LpPromotionProperty {
  landingPageUrl: string;
  label: string;
  buttonLabel: string;
}

export interface MainPopup {
  imageObsHash: string;
  button: Button;
}

export interface ManualRepairRequest {
  syncToken: string;
  limit: number;
  continuationToken: string;
}

export interface ManualRepairResponse {
  events: SquareEvent[];
  syncToken: string;
  continuationToken: string;
}

export interface MapProfileToUsersRequest {
  profileId: string;
  targetMids: string[];
}

export interface MapProfileToUsersResponse {
  mappedMids: string[];
}

export interface MarkAsReadRequest {
  squareChatMid: string;
  messageId: string;
  threadMid: string;
}

export interface MarkChatsAsReadRequest {
  chatMids: string[];
}

export interface MarkThreadsAsReadRequest {
  chatMid: string;
}

export interface MemberInfo {
  membership: Membership;
  memberNo: number;
  isJoining: boolean;
  isSubscribing: boolean;
  validUntil: Int64;
  billingItemName: string;
}

export interface Membership {
  membershipId: Int64;
  uniqueKey: string;
  title: string;
  membershipDescription: string;
  benefits: string;
  isInAppPurchase: boolean;
  paymentType: og_G;
  isPublished: boolean;
  isFullMember: boolean;
  price: string;
  currency: string;
  membershipStatus: og_E;
  bot: Bot;
  closeDate: Int64;
  membershipCardUrl: string;
  openchatUrl: string;
}

export interface MentionableBot {
  mid: string;
  displayName: string;
  profileImageObsHash: string;
  squareMid: string;
}

export interface MentionableSquareMember {
  mid: string;
  displayName: string;
  profileImageObsHash: string;
  role: SquareMemberRole;
  squareMid: string;
}

export interface Message {
  from: string;
  to: string;
  toType: MIDType;
  id: string;
  createdTime: Int64;
  deliveredTime: Int64;
  text: string;
  location: Location;
  hasContent: boolean;
  contentType: ContentType;
  contentPreview: string;
  contentMetadata: Record<string, string>;
  sessionId: number;
  chunks: string[];
  relatedMessageId: string;
  messageRelationType: Pb1_EnumC13015h6;
  readCount: number;
  relatedMessageServiceCode: Pb1_E7;
  appExtensionType: Pb1_B;
  reactions: Reaction[];
}

export interface MessageBoxList {
  messageBoxes: ExtendedMessageBox[];
  hasNext: boolean;
}

export interface MessageBoxListRequest {
  minChatId: string;
  maxChatId: string;
  activeOnly: boolean;
  messageBoxCountLimit: number;
  withUnreadCount: boolean;
  lastMessagesPerMessageBoxCount: number;
  unreadOnly: boolean;
}

export interface MessageBoxV2MessageId {
  deliveredTime: Int64;
  messageId: Int64;
}

export interface MessageSummary {
  summary: string[];
  keywords: string[];
  range: MessageSummaryRange;
  detailedSummary: string[];
}

export interface MessageSummaryContent {
  summary: string[];
  keywords: string[];
  range: MessageSummaryRange;
}

export interface MessageSummaryRange {
  from: Int64;
  to: Int64;
}

export interface MessageVisibility {
  showJoinMessage: boolean;
  showLeaveMessage: boolean;
  showKickoutMessage: boolean;
}

export interface MigratePrimaryUsingQrCodeRequest {
  sessionId: string;
  nonce: string;
  newDevice: any;
}

export interface MigratePrimaryUsingQrCodeResponse {
  mid: string;
  tokenV3IssueResult: TokenV3IssueResult;
  tokenV1IssueResult: TokenV1IssueResult;
  accountCountryCode: any;
  formattedPhoneNumbers: FormattedPhoneNumbers;
}

export interface MigratePrimaryWithTokenV3Response {
  authToken: string;
  tokenV3IssueResult: TokenV3IssueResult;
  countryCode: string;
  prettifiedFormatPhoneNumber: string;
  localFormatPhoneNumber: string;
  mid: string;
}

export interface ModuleResponse {
  moduleInstance: NZ0_C12206t0;
}

export interface ModuleWithStatusResponse {
  moduleInstance: NZ0_C12221y0;
}

export interface MyChatapp {
  app: Chatapp;
  category: zf_EnumC40715c;
  priority: Int64;
}

export interface MyDashboardItem {
  id: string;
  messageText: string;
  icon: MyDashboardMessageIcon;
  linkUrl: string;
  exposedAt: Int64;
  expiredAt: Int64;
  order: number;
  targetWrsModelId: string;
  templateId: string;
  fullMessageText: string;
  templateCautionText: string;
}

export interface MyDashboardMessageIcon {
  walletTabIconUrl: string;
  assetTabIconUrl: string;
  iconAltText: string;
}

export interface NZ0_C12150a0 {

}

export interface NZ0_C12152b {

}

export interface NZ0_C12155c {

}

export interface NZ0_C12206t0 {
  id: string;
  templateName: string;
  fields: Record<string, string>;
  elements: any[];
  etag: string;
  refreshTimeSec: number;
  name: string;
  recommendable: boolean;
  recommendedModelId: string;
  flexContent: string;
  categories: any[];
  headers: any[];
}

export interface NZ0_C12208u {

}

export interface NZ0_C12209u0 {
  fixedModules: NZ0_C12206t0[];
  etag: string;
  refreshTimeSec: number;
  recommendedModules: NZ0_C12206t0[];
}

export interface NZ0_C12212v0 {
  topTab: TopTab;
  subTabs: SubTab[];
  forceSelectedSubTabInfo: ForceSelectedSubTabInfo;
  refreshTimeSec: number;
  etag: string;
}

export interface NZ0_C12214w {

}

export interface NZ0_C12221y0 {
  status: NZ0_EnumC12218x0;
  id: string;
  templateName: string;
  etag: string;
  refreshTimeSec: number;
  name: string;
  recommendable: boolean;
  recommendedModelId: string;
  fields: Record<string, string>;
  elements: any[];
  categories: any[];
  headers: any[];
}

export interface NZ0_C12224z0 {
  etag: string;
  refreshTimeSec: number;
  fixedModules: NZ0_C12221y0[];
  recommendedModules: NZ0_C12221y0[];
}

export interface NZ0_D {
  moduleLayoutV4: NZ0_C12212v0;
  notModified: NZ0_G0;
  notFound: NZ0_F0;
}

export interface NZ0_E {
  id: string;
  etag: string;
  recommendedModelId: string;
  deviceAdId: string;
  agreedWithTargetingAdByMid: boolean;
  deviceId: string;
}

export interface NZ0_F {
  moduleResponse: ModuleResponse;
  notModified: NZ0_G0;
  notFound: NZ0_F0;
}

export interface NZ0_F0 {

}

export interface NZ0_G {
  id: string;
  etag: string;
  recommendedModelId: string;
  deviceAdId: string;
  agreedWithTargetingAdByMid: boolean;
  deviceId: string;
}

export interface NZ0_G0 {

}

export interface NZ0_H {
  moduleResponse: ModuleWithStatusResponse;
  notModified: NZ0_G0;
  notFound: NZ0_F0;
}

export interface NZ0_K {
  moduleAggregationResponse: NZ0_C12209u0;
  notModified: NZ0_G0;
}

export interface NZ0_M {
  moduleAggregationResponse: NZ0_C12224z0;
  notModified: NZ0_G0;
}

export interface NZ0_S {

}

export interface NZ0_U {

}

export interface NearbyEntry {
  emid: string;
  distance: number;
  lastUpdatedInSec: number;
  property: Record<string, string>;
  profile: Profile;
}

export interface NoBidCallback {
  impEventUrl: string;
  vimpEventUrl: string;
  imp100pEventUrl: string;
}

export interface NoteStatus {
  noteCount: number;
  latestCreatedAt: Int64;
}

export interface NotificationSetting {
  mute: boolean;
}

export interface NotificationSettingEntry {
  notificationSetting: NotificationSetting;
}

export interface NotifyChatAdEntryRequest {
  chatMid: string;
  scenarioId: string;
  sdata: string;
}

export interface NotifyDeviceConnectionRequest {
  deviceId: string;
  connectionId: string;
  connectionType: do0_EnumC23148f;
  code: do0_EnumC23147e;
  errorReason: string;
  startTime: Int64;
  endTime: Int64;
}

export interface NotifyDeviceConnectionResponse {
  latestOffset: Int64;
}

export interface NotifyDeviceDisconnectionRequest {
  deviceId: string;
  connectionId: string;
  disconnectedTime: Int64;
}

export interface NotifyOATalkroomEventsRequest {
  events: OATalkroomEvent[];
}

export interface NotifyScenarioExecutedRequest {
  scenarioResults: do0_F[];
}

export interface OATalkroomEvent {
  eventId: string;
  type: kf_p;
  context: OATalkroomEventContext;
  content: kf_m;
}

export interface OATalkroomEventContext {
  timestampMillis: Int64;
  botMid: string;
  userMid: string;
  os: kf_o;
  osVersion: string;
  appVersion: string;
  region: string;
}

export interface OaAddFriendArea {
  text: string;
}

export interface Ob1_C12606a0 {

}

export interface Ob1_C12608b {

}

export interface Ob1_C12618e0 {
  subscriptionService: any;
  continuationToken: string;
  limit: number;
  productType: Ob1_O0;
}

export interface Ob1_C12621f0 {
  history: SubscriptionSlotHistory[];
  continuationToken: string;
  totalSize: Int64;
}

export interface Ob1_C12630i0 {

}

export interface Ob1_C12637k1 {

}

export interface Ob1_C12642m0 {

}

export interface Ob1_C12649o1 {

}

export interface Ob1_C12660s1 {

}

export interface Ob1_E {
  stickerSummary: StickerDisplayData;
}

export interface Ob1_G {

}

export interface Ob1_H0 {
  lpPromotionProperty: LpPromotionProperty;
}

export interface Ob1_I0 {
  stickerResourceType: number;
  themeResourceType: number;
  sticonResourceType: number;
}

export interface Ob1_L {
  productTypes: Ob1_O0[];
  continuationToken: string;
  limit: number;
  shopFilter: ShopFilter;
}

export interface Ob1_M {
  browsingHistory: BrowsingHistory[];
  continuationToken: string;
  totalSize: number;
}

export interface Ob1_N {

}

export interface Ob1_P0 {
  stickerSummary: StickerSummary;
  themeSummary: ThemeSummary;
  sticonSummary: SticonSummary;
}

export interface Ob1_U {
  productType: Ob1_O0;
  continuationToken: string;
  limit: number;
  subscriptionService: any;
  sortType: Ob1_V1;
}

export interface Ob1_V {
  products: ProductSummary[];
  continuationToken: string;
  totalSize: Int64;
  maxSlotCount: number;
}

export interface Ob1_W {
  continuationToken: string;
  limit: number;
  productType: Ob1_O0;
  recommendationType: Ob1_EnumC12631i1;
  productId: string;
  subtypes: number[];
  shouldShuffle: boolean;
  includeStickerIds: boolean;
  shopFilter: ShopFilter;
}

export interface Ob1_W0 {
  promotionBuddyInfo: PromotionBuddyInfo;
  promotionInstallInfo: PromotionInstallInfo;
  promotionMissionInfo: PromotionMissionInfo;
}

export interface OkButton {
  text: string;
}

export interface OpenSessionRequest {
  metaData: Record<string, string>;
}

export interface OpenSessionResponse {
  authSessionId: string;
}

export interface OperationResponse {
  operations: Pb1_C13154r6[];
  hasMoreOps: boolean;
  globalEvents: TGlobalEvents;
  individualEvents: TIndividualEvents;
}

export interface OrderInfo {
  productId: string;
  orderId: string;
  confirmUrl: string;
  bot: Bot;
}

export interface P70_k {

}

export interface PaidCallDialing {
  type: PaidCallType;
  dialedNumber: string;
  serviceDomain: string;
  productType: Pb1_EnumC13196u6;
  productName: string;
  multipleProduct: boolean;
  callerIdStatus: Pb1_EnumC13238x6;
  balance: number;
  unit: string;
  rate: number;
  displayCode: string;
  calledNumber: string;
  calleeNationalNumber: string;
  calleeCallingCode: string;
  rateDivision: string;
  adMaxMin: number;
  adRemains: number;
  adSessionId: string;
}

export interface PaidCallResponse {
  host: CallHost;
  dialing: PaidCallDialing;
  token: string;
  spotItems: SpotItem[];
}

export interface PartialFullSyncResponse {
  targetCategories: Record<number, Int64>;
}

export interface PasswordHashingParameters {
  hmacKey: string;
  scryptParams: ScryptParams;
}

export interface PasswordValidationRule {
  type: any;
  pattern: string[];
  clientNoticeMessage: string;
}

export interface PaymentAuthenticationInfo {
  authToken: string;
  confirmMessage: string;
}

export interface PaymentEligibleFriendStatus {
  mid: string;
  status: r80_EnumC34367g;
}

export interface PaymentLineCardInfo {
  designCode: string;
  imageUrl: string;
}

export interface PaymentLineCardIssueForm {
  requiredTermsOfServiceBundle: r80_e0;
  availableLineCards: PaymentLineCardInfo[];
}

export interface PaymentRequiredAgreementsInfo {
  title: string;
  desc: string;
  linkName: string;
  linkUrl: string;
  newAgreements: string[];
}

export interface PaymentReservationResult {
  orderId: string;
  confirmUrl: string;
  extras: Record<string, string>;
}

export interface PaymentTradeInfo {
  chargeRequestId: string;
  chargeRequestType: r80_g0;
  chargeRequestYmdt: Int64;
  tradeNumber: string;
  agencyNo: string;
  confirmNo: string;
  expireYmd: Int64;
  moneyAmount: DisplayMoney;
  completeYmdt: Int64;
  paymentProcessCorp: string;
  status: r80_h0;
  helpUrl: string;
  guideMessage: string;
}

export interface Pb1_A4 {
  mid: string;
  eMid: string;
}

export interface Pb1_A6 {

}

export interface Pb1_B3 {

}

export interface Pb1_C12916a5 {
  wrappedNonce: string;
  kdfParameter1: string;
  kdfParameter2: string;
}

export interface Pb1_C12938c {
  message: AbuseReport;
  lineMeeting: AbuseReportLineMeeting;
}

export interface Pb1_C12946c7 {

}

export interface Pb1_C12953d0 {
  verifier: string;
  pinCode: string;
  errorCode: ErrorCode;
  publicKey: Pb1_C13097n4;
  encryptedKeyChain: string;
  hashKeyChain: string;
}

export interface Pb1_C12980f {

}

export interface Pb1_C12996g1 {

}

export interface Pb1_C13008h {

}

export interface Pb1_C13019ha {

}

export interface Pb1_C13042j5 {

}

export interface Pb1_C13070l5 {

}

export interface Pb1_C13097n4 {
  version: number;
  keyId: number;
  keyData: string;
  createdTime: Int64;
}

export interface Pb1_C13113o6 {
  callRoute: CallRoute;
  paidCallResponse: PaidCallResponse;
}

export interface Pb1_C13114o7 {

}

export interface Pb1_C13126p5 {

}

export interface Pb1_C13131pa {

}

export interface Pb1_C13150r2 {

}

export interface Pb1_C13154r6 {
  revision: Int64;
  createdTime: Int64;
  type: OpType;
  reqSeq: number;
  checksum: string;
  status: Pb1_EnumC13127p6;
  param1: string;
  param2: string;
  param3: string;
  message: Message;
}

export interface Pb1_C13155r7 {
  restoreClaim: string;
}

export interface Pb1_C13169s7 {
  recoveryKey: string;
  blobPayload: string;
}

export interface Pb1_C13183t7 {

}

export interface Pb1_C13190u0 {
  rich: BuddyRichMenuChatBarItem;
  widgetList: BuddyWidgetListCharBarItem;
  web: BuddyWebChatBarItem;
}

export interface Pb1_C13202uc {

}

export interface Pb1_C13208v4 {
  groupExtra: GroupExtra;
  peerExtra: Pb1_A6;
}

export interface Pb1_C13254y8 {

}

export interface Pb1_C13263z3 {
  blobHeader: string;
  blobPayload: string;
  reason: Pb1_A3;
}

export interface Pb1_Ca {

}

export interface Pb1_E3 {
  blobHeader: string;
  payloadDataList: Pb1_X5[];
}

export interface Pb1_Ea {

}

export interface Pb1_F3 {

}

export interface Pb1_H3 {

}

export interface Pb1_I3 {

}

export interface Pb1_Ia {

}

export interface Pb1_J5 {

}

export interface Pb1_K3 {

}

export interface Pb1_M3 {

}

export interface Pb1_O {

}

export interface Pb1_O3 {

}

export interface Pb1_P9 {

}

export interface Pb1_Q8 {

}

export interface Pb1_S5 {

}

export interface Pb1_Sb {
  reqSeq: number;
  encryptedKeyChain: string;
  hashKeyChain: string;
}

export interface Pb1_U1 {

}

export interface Pb1_U3 {
  keyVersion: number;
  groupKeyId: number;
  creator: string;
  creatorKeyId: number;
  receiver: string;
  receiverKeyId: number;
  encryptedSharedKey: string;
  allowedTypes: number[];
  specVersion: number;
}

export interface Pb1_V3 {
  version: number;
  keyId: number;
  publicKey: string;
  privateKey: string;
  createdTime: Int64;
}

export interface Pb1_W4 {

}

export interface Pb1_W5 {
  e2ee: E2EEMetadata;
  singleValue: SingleValueMetadata;
}

export interface Pb1_W6 {
  reqSeq: number;
  publicKey: Pb1_C13097n4;
  blobPayload: string;
}

export interface Pb1_X {
  verifier: string;
  publicKey: Pb1_C13097n4;
  encryptedKeyChain: string;
  hashKeyChain: string;
  errorCode: ErrorCode;
}

export interface Pb1_X5 {
  metadata: Pb1_W5;
  blobPayload: string;
}

export interface Pb1_X7 {
  operationResponse: OperationResponse;
  fullSyncResponse: FullSyncResponse;
  partialFullSyncResponse: PartialFullSyncResponse;
}

export interface Pb1_Y4 {

}

export interface Pb1_Za {

}

export interface Pb1_Zc {

}

export interface Pb1_ad {
  title: string;
}

export interface Pb1_cd {

}

export interface PendingAgreementsResponse {
  pendingAgreements: number[];
}

export interface PermitLoginRequest {
  sessionId: string;
  metaData: Record<string, string>;
}

export interface PermitLoginResponse {
  oneTimeToken: string;
}

export interface PhoneVerificationResult {
  verificationResult: VerificationResult;
  accountMigrationCheckType: Pb1_EnumC13022i;
  recommendAddFriends: boolean;
}

export interface PocketMoneyInfo {
  assetServiceInfo: AssetServiceInfo;
  displayType: NZ0_I0;
  productType: NZ0_K0;
  refinanceText: string;
}

export interface PoiInfo {
  poiId: string;
  poiRealm: Pb1_F6;
}

export interface PointInfo {
  assetServiceInfo: AssetServiceInfo;
}

export interface PopularKeyword {
  value: string;
  highlighted: boolean;
  id: Int64;
}

export interface Popup {
  id: Int64;
  country: string;
  name: string;
  type: PopupType;
  content: PopupContent;
  activated: boolean;
  revision: Int64;
  startsAt: Int64;
  endsAt: Int64;
  createdAt: Int64;
}

export interface PopupContent {
  mainPopUp: MainPopup;
  chatroomPopup: ChatroomPopup;
}

export interface PopupProperty {
  id: string;
  name: string;
  startDateTimeMillis: Int64;
  endDateTimeMillis: Int64;
  popupContents: PopupContent[];
  wrsCampaignId: string;
  optOut: boolean;
  layoutSize: NZ0_N0;
}

export interface Price {
  currency: string;
  amount: string;
  priceString: string;
}

export interface Priority {
  value: Int64;
}

export interface Product {
  id: string;
  productVersion: Int64;
  productDetails: AR0_o;
}

export interface ProductDetail {
  id: string;
  billingItemId: string;
  type: string;
  subtype: Ob1_X1;
  billingCpId: string;
  name: string;
  author: string;
  details: string;
  copyright: string;
  notice: string;
  promotionInfo: PromotionInfo;
  latestVersion: Int64;
  latestVersionString: string;
  version: Int64;
  versionString: string;
  applicationVersionRange: ApplicationVersionRange;
  owned: boolean;
  grantedByDefault: boolean;
  validFor: number;
  validUntil: Int64;
  onSale: boolean;
  salesFlags: string[];
  availableForPresent: boolean;
  availableForMyself: boolean;
  priceTier: number;
  price: Price;
  priceInLineCoin: string;
  localizedPrice: Price;
  attributes: Record<string, string>;
  authorId: string;
  stickerResourceType: StickerResourceType;
  productProperty: jp_naver_line_shop_protocol_thrift_ProductProperty;
  productSalesState: Ob1_J0;
  installedTime: Int64;
  wishProperty: ProductWishProperty;
  subscriptionProperty: ProductSubscriptionProperty;
  productPromotionProperty: Ob1_H0;
  availableInCountry: boolean;
  editorsPickBanners: EditorsPickBannerForClient[];
  ableToBeGivenAsPresent: boolean;
  madeWithStickerMaker: boolean;
  customDownloadButtonLabel: string;
}

export interface ProductList {
  productList: ProductDetail[];
  offset: number;
  totalSize: number;
  title: string;
}

export interface ProductListByAuthorRequest {
  productType: Ob1_O0;
  authorId: string;
  offset: number;
  limit: number;
  shopFilter: ShopFilter;
  includeStickerIds: boolean;
  additionalProductTypes: number[];
  showcaseType: Ob1_EnumC12666u1;
}

export interface ProductSearchSummary {

}

export interface ProductSubscriptionProperty {
  availableForSubscribe: boolean;
  subscriptionAvailability: Ob1_D0;
}

export interface ProductSummary {
  id: string;
  name: string;
  latestVersion: Int64;
  applicationVersionRange: ApplicationVersionRange;
  grantedByDefault: boolean;
  attributes: Record<string, string>;
  productTypeSummary: Ob1_P0;
  validUntil: Int64;
  validFor: number;
  installedTime: Int64;
  availability: Ob1_D0;
  authorId: string;
  canAutoDownload: boolean;
  promotionInfo: PromotionInfo;
}

export interface ProductSummaryForAutoSuggest {
  id: string;
  version: Int64;
  name: string;
  stickerResourceType: StickerResourceType;
  suggestVersion: Int64;
  popupLayer: Ob1_B0;
  type: Ob1_O0;
  resourceType: Ob1_I0;
  stickerSize: Ob1_C1;
}

export interface ProductSummaryList {
  productList: ProductSummary[];
  offset: number;
  totalSize: number;
}

export interface ProductValidationRequest {
  validationScheme: ProductValidationScheme;
  authCode: string;
}

export interface ProductValidationResult {
  validated: boolean;
}

export interface ProductValidationScheme {
  key: string;
  offset: Int64;
  size: Int64;
}

export interface ProductWishProperty {
  totalCount: Int64;
}

export interface Profile {
  mid: string;
  userid: string;
  phone: string;
  email: string;
  regionCode: string;
  displayName: string;
  phoneticName: string;
  pictureStatus: string;
  thumbnailUrl: string;
  statusMessage: string;
  allowSearchByUserid: boolean;
  allowSearchByEmail: boolean;
  picturePath: string;
  musicProfile: string;
  videoProfile: string;
  statusMessageContentMetadata: Record<string, string>;
  avatarProfile: AvatarProfile;
  nftProfile: boolean;
  pictureSource: Pb1_N6;
  profileId: string;
  profileType: Pb1_O6;
  createdTimeMillis: Int64;
}

export interface ProfileContent {
  value: string;
  meta: Record<string, string>;
}

export interface ProfileRefererContent {
  oatQueryParameters: Record<string, string>;
}

export interface PromotionBuddyDetail {
  searchId: string;
  contactStatus: ContactStatus;
  name: string;
  pictureUrl: string;
  statusMessage: string;
  brandType: Ob1_EnumC12641m;
}

export interface PromotionBuddyInfo {
  buddyMid: string;
  promotionBuddyDetail: PromotionBuddyDetail;
  showBanner: boolean;
}

export interface PromotionInfo {
  promotionType: Ob1_EnumC12610b1;
  promotionDetail: Ob1_W0;
  buddyInfo: PromotionBuddyInfo;
}

export interface PromotionInstallInfo {
  downloadUrl: string;
  customUrlSchema: string;
}

export interface PromotionMissionInfo {
  promotionMissionType: Ob1_EnumC12607a1;
  missionCompleted: boolean;
  downloadUrl: string;
  customUrlSchema: string;
  oaMid: string;
}

export interface Provider {
  id: string;
  name: string;
  providerPageUrl: string;
}

export interface PublicKeyCredentialCreationOptions {
  rp: PublicKeyCredentialRpEntity;
  user: PublicKeyCredentialUserEntity;
  challenge: string;
  pubKeyCredParams: PublicKeyCredentialParameters[];
  timeout: Int64;
  excludeCredentials: PublicKeyCredentialDescriptor[];
  authenticatorSelection: AuthenticatorSelectionCriteria;
  attestation: string;
  extensions: AuthenticationExtensionsClientInputs;
}

export interface PublicKeyCredentialDescriptor {
  type: string;
  id: string;
  transports: string[];
}

export interface PublicKeyCredentialParameters {
  type: string;
  alg: number;
}

export interface PublicKeyCredentialRequestOptions {
  challenge: string;
  timeout: Int64;
  rpId: string;
  allowCredentials: PublicKeyCredentialDescriptor[];
  userVerification: string;
  extensions: AuthenticationExtensionsClientInputs;
}

export interface PublicKeyCredentialRpEntity {
  name: string;
  icon: string;
  id: string;
}

export interface PublicKeyCredentialUserEntity {
  name: string;
  icon: string;
  id: string;
  displayName: string;
}

export interface PurchaseEnabledRequest {
  uniqueKey: string;
}

export interface PurchaseOrder {
  shopId: string;
  productId: string;
  recipientMid: string;
  price: Price;
  enableLinePointAutoExchange: boolean;
  locale: Locale;
  presentAttributes: Record<string, string>;
}

export interface PurchaseOrderResponse {
  orderId: string;
  attributes: Record<string, string>;
  billingConfirmUrl: string;
}

export interface PurchaseRecord {
  productDetail: ProductDetail;
  purchasedTime: Int64;
  giver: string;
  recipient: string;
  purchasedPrice: Price;
}

export interface PurchaseRecordList {
  purchaseRecords: PurchaseRecord[];
  offset: number;
  totalSize: number;
}

export interface PurchaseSubscriptionRequest {
  billingItemId: string;
  subscriptionService: any;
  storeCode: Ob1_K1;
  storeOrderId: string;
  outsideAppPurchase: boolean;
  unavailableItemPurchase: boolean;
}

export interface PurchaseSubscriptionResponse {
  result: Ob1_M1;
  orderId: string;
  confirmUrl: string;
}

export interface PushRecvReport {
  pushTrackingId: string;
  recvTimestamp: Int64;
  battery: number;
  batteryMode: Pb1_EnumC13009h0;
  clientNetworkType: Pb1_EnumC12998g3;
  carrierCode: string;
  displayTimestamp: Int64;
}

export interface PutE2eeKeyRequest {
  sessionId: string;
  e2eeKey: Record<string, string>;
}

export interface Q70_l {

}

export interface Q70_o {

}

export interface Qj_C13595l {
  none: Qj_C13607y;
  chat: LiffChatContext;
  squareChat: LiffSquareChatContext;
}

export interface Qj_C13599p {
  consentRequired: LiffErrorConsentRequired;
  permanentLinkInvalidRequest: LiffErrorPermanentLinkInvalidRequest;
}

export interface Qj_C13602t {
  externalService: LiffFIDOExternalService;
}

export interface Qj_C13607y {

}

export interface QuickMenuCouponInfo {
  couponCount: string;
  mainText: string;
  linkUrl: string;
  iconUrl: string;
  targetId: string;
  targetName: string;
  responseStatus: NZ0_W0;
  darkModeIconUrl: string;
}

export interface QuickMenuMyCardInfo {
  myCardItems: QuickMenuMyCardItem[];
  responseStatus: NZ0_W0;
}

export interface QuickMenuMyCardItem {
  itemType: NZ0_S0;
  mainText: string;
  linkUrl: string;
  iconUrl: string;
  targetId: string;
  targetName: string;
  darkModeIconUrl: string;
}

export interface QuickMenuPointInfo {
  balance: string;
  linkUrl: string;
  iconUrl: string;
  targetId: string;
  targetName: string;
  responseStatus: NZ0_W0;
}

export interface R70_a {

}

export interface R70_c {

}

export interface R70_d {

}

export interface R70_t {

}

export interface RSAEncryptedLoginInfo {
  loginId: string;
  loginPassword: string;
}

export interface RSAEncryptedPassword {
  encrypted: string;
  keyName: string;
}

export interface RSAKey {
  keynm: string;
  nvalue: string;
  evalue: string;
  sessionKey: string;
}

export interface ReactRequest {
  reqSeq: number;
  messageId: Int64;
  reactionType: ReactionType;
}

export interface ReactToMessageRequest {
  reqSeq: number;
  squareChatMid: string;
  messageId: string;
  reactionType: MessageReactionType;
  threadMid: string;
}

export interface ReactToMessageResponse {
  reaction: SquareMessageReaction;
  status: SquareMessageReactionStatus;
}

export interface Reaction {
  fromUserMid: string;
  atMillis: Int64;
  reactionType: ReactionType;
}

export interface ReactionType {
  predefinedReactionType: Pb1_G6;
}

export interface RecommendationDetail {
  createdTime: Int64;
  reasons: LN0_z0[];
  hidden: boolean;
}

export interface RecommendationReasonSharedChat {
  chatMid: string;
}

export interface RefreshAccessTokenRequest {
  refreshToken: string;
}

export interface RefreshAccessTokenResponse {
  accessToken: string;
  durationUntilRefreshInSec: Int64;
  retryPolicy: RetryPolicy;
  tokenIssueTimeEpochSec: Int64;
  refreshToken: string;
}

export interface RefreshApiRetryPolicy {
  initialDelayInMillis: Int64;
  maxDelayInMillis: Int64;
  multiplier: number;
  jitterRate: number;
}

export interface RefreshSubscriptionsRequest {
  subscriptions: Int64[];
}

export interface RefreshSubscriptionsResponse {
  ttlMillis: Int64;
  subscriptionStates: Record<number, SubscriptionState>;
}

export interface RegPublicKeyCredential {
  id: string;
  type: string;
  response: AuthenticatorAttestationResponse;
  extensionResults: AuthenticationExtensionsClientOutputs;
}

export interface RegisterCampaignRewardRequest {
  campaignId: string;
}

export interface RegisterCampaignRewardResponse {
  campaignStatus: NZ0_EnumC12188n;
  resultPopupProperty: ResultPopupProperty;
  errorMessage: string;
  registeredId: string;
  registeredDateTimeMillis: Int64;
  redirectUrlWithoutResultPopup: string;
}

export interface RegisterE2EEPublicKeyV2Response {
  publicKey: Pb1_C13097n4;
  isMasterKeyConflict: boolean;
}

export interface RegisterPrimaryCredentialRequest {
  sessionId: string;
  credential: any;
}

export interface RegisterPrimaryWithTokenV3Response {
  authToken: string;
  tokenV3IssueResult: TokenV3IssueResult;
  mid: string;
}

export interface I80_q0 {
  authSessionId: string;
  encryptionKey: I80_y0;
}

export interface RegularBadge {
  label: string;
  color: string;
}

export interface ReissueChatTicketRequest {
  reqSeq: number;
  groupMid: string;
}

export interface ReissueChatTicketResponse {
  ticketId: string;
}

export interface RejectChatInvitationRequest {
  reqSeq: number;
  chatMid: string;
}

export interface RejectSpeakersRequest {
  squareChatMid: string;
  sessionId: string;
  targetMids: string[];
}

export interface RejectSquareMembersRequest {
  squareMid: string;
  requestedMemberMids: string[];
}

export interface RejectSquareMembersResponse {
  rejectedMembers: SquareMember[];
  status: SquareStatus;
}

export interface RejectToSpeakRequest {
  squareChatMid: string;
  sessionId: string;
  inviteRequestId: string;
}

export interface RemoveFollowerRequest {
  followMid: Pb1_A4;
}

export interface RemoveFromFollowBlacklistRequest {
  followMid: Pb1_A4;
}

export interface RemoveItemFromCollectionRequest {
  collectionId: string;
  productId: string;
  itemId: string;
}

export interface RemoveLiveTalkSubscriptionRequest {
  squareChatMid: string;
  sessionId: string;
}

export interface RemoveProductFromSubscriptionSlotRequest {
  productType: Ob1_O0;
  productId: string;
  subscriptionService: any;
  productIds: string[];
}

export interface RemoveProductFromSubscriptionSlotResponse {
  result: Ob1_U1;
}

export interface RemoveSubscriptionsRequest {
  unsubscriptions: Int64[];
}

export interface RepairGroupMembers {
  numMembers: number;
  invalidGroup: boolean;
}

export interface RepairProfileMappingMembers {
  matched: boolean;
  numMembers: number;
}

export interface RepairTriggerConfigurationsElement {
  serverConfigurations: Configurations;
  nextCallIntervalMinutes: number;
}

export interface RepairTriggerGroupMembersElement {
  matchedGroups: Record<string, RepairGroupMembers>;
  mismatchedGroups: Record<string, RepairGroupMembers>;
  nextCallIntervalMinutes: number;
}

export interface RepairTriggerNumElement {
  matched: boolean;
  numValue: number;
  nextCallIntervalMinutes: number;
}

export interface RepairTriggerProfileElement {
  serverProfile: Profile;
  nextCallIntervalMinutes: number;
  serverMultiProfiles: Profile[];
}

export interface RepairTriggerProfileMappingListElement {
  profileMappings: Record<string, RepairProfileMappingMembers>;
  nextCallIntervalMinutes: number;
}

export interface RepairTriggerSettingsElement {
  serverSettings: Settings;
  nextCallIntervalMinutes: number;
}

export interface ReportAbuseExRequest {
  abuseReportEntry: Pb1_C12938c;
}

export interface ReportLiveTalkRequest {
  squareChatMid: string;
  sessionId: string;
  reportType: LiveTalkReportType;
}

export interface ReportLiveTalkSpeakerRequest {
  squareChatMid: string;
  sessionId: string;
  speakerMemberMid: string;
  reportType: LiveTalkReportType;
}

export interface ReportMessageSummaryRequest {
  chatEmid: string;
  messageSummaryRangeTo: Int64;
  reportType: MessageSummaryReportType;
}

export interface ReportRefreshedAccessTokenRequest {
  accessToken: string;
}

export interface ReportSquareChatRequest {
  squareMid: string;
  squareChatMid: string;
  reportType: ReportType;
  otherReason: string;
}

export interface ReportSquareMemberRequest {
  squareMemberMid: string;
  reportType: ReportType;
  otherReason: string;
  squareChatMid: string;
  threadMid: string;
}

export interface ReportSquareMessageRequest {
  squareMid: string;
  squareChatMid: string;
  squareMessageId: string;
  reportType: ReportType;
  otherReason: string;
  threadMid: string;
}

export interface ReportSquareRequest {
  squareMid: string;
  reportType: ReportType;
  otherReason: string;
}

export interface ReqToSendPhonePinCodeRequest {
  authSessionId: string;
  userPhoneNumber: UserPhoneNumber;
  verifMethod: T70_K;
}

export interface I80_s0 {
  authSessionId: string;
  userPhoneNumber: UserPhoneNumber;
  verifMethod: I80_EnumC26425y;
}

export interface I80_t0 {
  availableMethods: number[];
}

export interface ReqToSendPhonePinCodeResponse {
  availableMethods: number[];
}

export interface RequestToListenRequest {
  squareChatMid: string;
  sessionId: string;
}

export interface I80_u0 {
  authSessionId: string;
  email: string;
}

export interface RequestToSendPasswordSetVerificationEmailResponse {
  timeoutMinutes: Int64;
}

export interface RequestToSpeakRequest {
  squareChatMid: string;
  sessionId: string;
}

export interface RequestTokenResponse {
  requestToken: string;
  returnUrl: string;
}

export interface ReserveInfo {
  purchaseEnabledStatus: og_I;
  orderInfo: OrderInfo;
}

export interface ReserveRequest {
  uniqueKey: string;
}

export interface ReserveSubscriptionPurchaseRequest {
  billingItemId: string;
  storeCode: fN0_G;
  addOaFriend: boolean;
  entryPoint: string;
  campaignId: string;
  invitationId: string;
}

export interface ReserveSubscriptionPurchaseResponse {
  result: fN0_F;
  orderId: string;
  confirmUrl: string;
}

export interface I80_w0 {
  authSessionId: string;
}

export interface I80_x0 {
  mid: string;
  tokenV3IssueResult: TokenV3IssueResult;
  tokenV1IssueResult: TokenV1IssueResult;
  accountCountryCode: any;
  formattedPhoneNumbers: FormattedPhoneNumbers;
}

export interface ResultPopupProperty {
  iconUrl: string;
  text: string;
  closeButtonText: string;
  linkButtonText: string;
  linkButtonForwardUrl: string;
  eventButton: EventButton;
  oaAddfreindArea: OaAddFriendArea;
}

export interface RetrieveRequestTokenWithDocomoV2Response {
  loginRedirectUrl: string;
}

export interface RetryPolicy {
  initialDelayInMillis: Int64;
  maxDelayInMillis: Int64;
  multiplier: number;
  jitterRate: number;
}

export interface RevokeTokensRequest {
  accessTokens: string[];
}

export interface RichContent {
  callback: Callback;
  noBidCallback: NoBidCallback;
  ttl: Int64;
  muteSupported: boolean;
  voteSupported: boolean;
  priority: Priority;
  richFormatPayload: Uf_t;
}

export interface RichImage {
  url: string;
}

export interface RichItem {
  eyeCatchMessage: string;
  message: string;
  animationLayer: AnimationLayer;
  thumbnailLayer: ThumbnailLayer;
  linkUrl: string;
  fallbackUrl: string;
}

export interface RichString {
  content: string;
  meta: Record<string, string>;
}

export interface RichmenuCoordinates {
  x: number;
  y: number;
}

export interface RichmenuEvent {
  type: kf_u;
  richmenuId: string;
  coordinates: RichmenuCoordinates;
  areaIndex: number;
  clickUrl: string;
  clickAction: kf_r;
}

export interface RingbackTone {
  uuid: string;
  trackId: string;
  title: string;
  oid: string;
  tids: Record<string, string>;
  sid: string;
  artist: string;
  channelId: string;
}

export interface Ringtone {
  title: string;
  artist: string;
  oid: string;
  channelId: string;
}

export interface Room {
  mid: string;
  createdTime: Int64;
  contacts: Contact[];
  notificationDisabled: boolean;
  memberMids: string[];
}

export interface Rssi {
  value: number;
}

export interface S70_b {

}

export interface S70_k {

}

export interface SCC {
  businessName: string;
  tel: string;
  email: string;
  url: string;
  address: string;
  personName: string;
  memo: string;
}

export interface SIMInfo {
  phoneNumber: string;
  countryCode: string;
}

export interface SKAdNetwork {
  identifiers: string;
  version: string;
}

export interface I80_y0 {
  keyMaterial: string;
}

export interface SaveStudentInformationRequest {
  studentInformation: StudentInformation;
}

export interface Scenario {
  id: string;
  trigger: do0_I;
  actions: do0_C23141D[];
}

export interface ScenarioSet {
  scenarios: Scenario[];
  autoClose: boolean;
  suppressionInterval: Int64;
  revision: Int64;
  modifiedTime: Int64;
}

export interface ScoreInfo {
  assetServiceInfo: AssetServiceInfo;
}

export interface ScryptParams {
  salt: string;
  nrp: string;
  dkLen: Int64;
}

export interface SearchSquareChatMembersRequest {
  squareChatMid: string;
  searchOption: SquareChatMemberSearchOption;
  continuationToken: string;
  limit: number;
}

export interface SearchSquareChatMembersResponse {
  members: SquareMember[];
  continuationToken: string;
  totalCount: number;
}

export interface SearchSquareChatMentionablesRequest {
  squareChatMid: string;
  searchOption: SquareChatMentionableSearchOption;
  continuationToken: string;
  limit: number;
}

export interface SearchSquareChatMentionablesResponse {
  mentionables: Mentionable[];
  continuationToken: string;
}

export interface SearchSquareMembersRequest {
  squareMid: string;
  searchOption: SquareMemberSearchOption;
  continuationToken: string;
  limit: number;
}

export interface SearchSquareMembersResponse {
  members: SquareMember[];
  revision: Int64;
  continuationToken: string;
  totalCount: number;
}

export interface SearchSquaresRequest {
  query: string;
  continuationToken: string;
  limit: number;
}

export interface SearchSquaresResponse {
  squares: Square[];
  squareStatuses: Record<string, SquareStatus>;
  myMemberships: Record<string, SquareMember>;
  continuationToken: string;
  noteStatuses: Record<string, NoteStatus>;
}

export interface SecurityCenterResult {
  uri: string;
  token: string;
  cookiePath: string;
  skip: boolean;
}

export interface SendEncryptedE2EEKeyRequest {
  sessionId: string;
  encryptedSecureChannelPayload: any;
}

export interface SendMessageRequest {
  reqSeq: number;
  squareChatMid: string;
  squareMessage: SquareMessage;
}

export interface SendMessageResponse {
  createdSquareMessage: SquareMessage;
}

export interface SendPostbackRequest {
  messageId: string;
  url: string;
  chatMID: string;
  originMID: string;
}

export interface SendSquareThreadMessageRequest {
  reqSeq: number;
  chatMid: string;
  threadMid: string;
  threadMessage: SquareMessage;
}

export interface SendSquareThreadMessageResponse {
  createdThreadMessage: SquareMessage;
}

export interface ServiceDisclaimerInfo {
  disclaimerText: string;
  popupTitle: string;
  popupText: string;
}

export interface ServiceShortcut {
  id: string;
  name: string;
  serviceEntryUrl: string;
  pictogramIconUrl: string;
  storeUrl: string;
  badgeActiveUntilTimestamp: string;
  recommendedModelId: string;
  eventIcon: Icon;
  coloredPictogramIcon: Icon;
  customBadgeLabel: CustomBadgeLabel;
}

export interface SetChatHiddenStatusRequest {
  reqSeq: number;
  chatMid: string;
  lastMessageId: Int64;
  hidden: boolean;
}

export interface I80_z0 {
  authSessionId: string;
  password: string;
}

export interface SetHashedPasswordRequest {
  authSessionId: string;
  password: string;
}

export interface SetPasswordRequest {
  sessionId: string;
  hashedPassword: string;
}

export interface SetRequest {
  keyName: string;
  value: t80_p;
  clientTimestampMillis: Int64;
  ns: t80_h;
  transactionId: string;
  updateReason: UpdateReason;
}

export interface SetResponse {
  value: SettingValue;
  updateTransactionId: string;
}

export interface SettingValue {
  value: t80_p;
  updateTimeMillis: Int64;
  scope: t80_i;
  scopeKey: string;
}

export interface Settings {
  notificationEnable: boolean;
  notificationMuteExpiration: Int64;
  notificationNewMessage: boolean;
  notificationGroupInvitation: boolean;
  notificationShowMessage: boolean;
  notificationIncomingCall: boolean;
  notificationSoundMessage: string;
  notificationSoundGroup: string;
  notificationDisabledWithSub: boolean;
  notificationPayment: boolean;
  privacySyncContacts: boolean;
  privacySearchByPhoneNumber: boolean;
  privacySearchByUserid: boolean;
  privacySearchByEmail: boolean;
  privacyAllowSecondaryDeviceLogin: boolean;
  privacyProfileImagePostToMyhome: boolean;
  privacyReceiveMessagesFromNotFriend: boolean;
  privacyAgreeUseLineCoinToPaidCall: boolean;
  privacyAgreeUsePaidCall: boolean;
  privacyAllowFriendRequest: boolean;
  contactMyTicket: string;
  identityProvider: IdentityProvider;
  identityIdentifier: string;
  snsAccounts: Record<number, string>;
  phoneRegistration: boolean;
  emailConfirmationStatus: EmailConfirmationStatus;
  accountMigrationPincodeType: AccountMigrationPincodeType;
  enforcedInputAccountMigrationPincode: boolean;
  securityCenterSettingsType: AccountMigrationPincodeType;
  allowUnregistrationSecondaryDevice: boolean;
  pwlessPrimaryCredentialRegistration: boolean;
  preferenceLocale: string;
  customModes: Record<number, string>;
  e2eeEnable: boolean;
  hitokotoBackupRequested: boolean;
  privacyProfileMusicPostToMyhome: boolean;
  privacyAllowNearby: boolean;
  agreementNearbyTime: Int64;
  agreementSquareTime: Int64;
  notificationMention: boolean;
  botUseAgreementAcceptedAt: Int64;
  agreementShakeFunction: Int64;
  agreementMobileContactName: Int64;
  notificationThumbnail: boolean;
  agreementSoundToText: Int64;
  privacyPolicyVersion: string;
  agreementAdByWebAccess: Int64;
  agreementPhoneNumberMatching: Int64;
  agreementCommunicationInfo: Int64;
  privacySharePersonalInfoToFriends: Pb1_I6;
  agreementThingsWirelessCommunication: Int64;
  agreementGdpr: Int64;
  privacyStatusMessageHistory: Pb1_S7;
  agreementProvideLocation: Int64;
  agreementBeacon: Int64;
  privacyAllowProfileHistory: Pb1_M6;
  agreementContentsSuggest: Int64;
  agreementContentsSuggestDataCollection: Int64;
  privacyAgeResult: Pb1_gd;
  privacyAgeResultReceived: boolean;
  agreementOcrImageCollection: Int64;
  privacyAllowFollow: boolean;
  privacyShowFollowList: boolean;
  notificationBadgeTalkOnly: boolean;
  agreementIcna: Int64;
  notificationReaction: boolean;
  agreementMid: Int64;
  homeNotificationNewFriend: boolean;
  homeNotificationFavoriteFriendUpdate: boolean;
  homeNotificationGroupMemberUpdate: boolean;
  homeNotificationBirthday: boolean;
  eapAllowedToConnect: Record<number, boolean>;
  agreementLineOutUse: Int64;
  agreementLineOutProvideInfo: Int64;
  notificationShowProfileImage: boolean;
  agreementPdpa: Int64;
  agreementLocationVersion: string;
  zhdPageAllowedToShow: boolean;
  agreementSnowAiAvatar: Int64;
  eapOnlyAccountTargetCountry: boolean;
  agreementLypPremiumAlbum: Int64;
  agreementLypPremiumAlbumVersion: Int64;
  agreementAlbumUsageData: Int64;
  agreementAlbumUsageDataVersion: Int64;
  agreementLypPremiumBackup: Int64;
  agreementLypPremiumBackupVersion: Int64;
  agreementOaAiAssistant: Int64;
  agreementOaAiAssistantVersion: Int64;
  agreementLypPremiumMultiProfile: Int64;
  agreementLypPremiumMultiProfileVersion: Int64;
}

export interface ShareTargetPickerResultRequest {
  ott: string;
  liffId: string;
  resultCode: Qj_e0;
  resultDescription: string;
}

export interface ShopFilter {
  productAvailabilities: number[];
  stickerSizes: number[];
  popupLayers: number[];
}

export interface ShortcutUserGuidePopupInfo {
  popupTitle: string;
  popupText: string;
  revisionTimeMillis: Int64;
}

export interface ShouldShowWelcomeStickerBannerResponse {
  shouldShowBanner: boolean;
}

export interface I80_B0 {
  countryCode: string;
  hni: string;
  carrierName: string;
}

export interface SimCard {
  countryCode: string;
  hni: string;
  carrierName: string;
}

export interface SingleValueMetadata {
  type: any;
}

export interface SleepAction {
  sleepMillis: Int64;
}

export interface SmartChannelRecommendation {
  minDisplayDuration: number;
  title: string;
  descriptionText: string;
  labelText: string;
  imageUrl: string;
  bgColorCode: string;
  linkUrl: string;
  impEventUrl: string;
  clickEventUrl: string;
  muteEventUrl: string;
  upvoteEventUrl: string;
  downvoteEventUrl: string;
  template: SmartChannelRecommendationTemplate;
}

export interface SmartChannelRecommendationTemplate {
  type: string;
  bgColorName: string;
}

export interface SocialLogin {
  type: T70_j1;
  accessToken: string;
  countryCode: string;
}

export interface SpotItem {
  name: string;
  phone: string;
  category: SpotCategory;
  mid: string;
  countryAreaCode: string;
  freePhoneCallable: boolean;
}

export interface Square {
  mid: string;
  name: string;
  welcomeMessage: string;
  profileImageObsHash: string;
  desc: string;
  searchable: boolean;
  type: SquareType;
  categoryId: number;
  invitationURL: string;
  revision: Int64;
  ableToUseInvitationTicket: boolean;
  state: SquareState;
  emblems: number[];
  joinMethod: SquareJoinMethod;
  adultOnly: BooleanState;
  svcTags: string[];
  createdAt: Int64;
}

export interface SquareAuthority {
  squareMid: string;
  updateSquareProfile: SquareMemberRole;
  inviteNewMember: SquareMemberRole;
  approveJoinRequest: SquareMemberRole;
  createPost: SquareMemberRole;
  createOpenSquareChat: SquareMemberRole;
  deleteSquareChatOrPost: SquareMemberRole;
  removeSquareMember: SquareMemberRole;
  grantRole: SquareMemberRole;
  enableInvitationTicket: SquareMemberRole;
  revision: Int64;
  createSquareChatAnnouncement: SquareMemberRole;
  updateMaxChatMemberCount: SquareMemberRole;
  useReadonlyDefaultChat: SquareMemberRole;
  sendAllMention: SquareMemberRole;
}

export interface SquareBot {
  botMid: string;
  active: boolean;
  displayName: string;
  profileImageObsHash: string;
  iconType: number;
  lastModifiedAt: Int64;
  expiredIn: Int64;
}

export interface SquareChat {
  squareChatMid: string;
  squareMid: string;
  type: SquareChatType;
  name: string;
  chatImageObsHash: string;
  squareChatRevision: Int64;
  maxMemberCount: number;
  state: SquareChatState;
  invitationUrl: string;
  messageVisibility: MessageVisibility;
  ableToSearchMessage: BooleanState;
}

export interface SquareChatAnnouncement {
  announcementSeq: Int64;
  type: any;
  contents: SquareChatAnnouncementContents;
  createdAt: Int64;
  creator: string;
}

export interface SquareChatFeature {
  controlState: SquareChatFeatureControlState;
  booleanValue: BooleanState;
}

export interface SquareChatFeatureSet {
  squareChatMid: string;
  revision: Int64;
  disableUpdateMaxChatMemberCount: SquareChatFeature;
  disableMarkAsReadEvent: SquareChatFeature;
}

export interface SquareChatMember {
  squareMemberMid: string;
  squareChatMid: string;
  revision: Int64;
  membershipState: SquareChatMembershipState;
  notificationForMessage: boolean;
  notificationForNewMember: boolean;
}

export interface SquareChatMemberSearchOption {
  displayName: string;
  includingMe: boolean;
}

export interface SquareChatMentionableSearchOption {
  displayName: string;
}

export interface SquareChatStatus {
  lastMessage: SquareMessage;
  senderDisplayName: string;
  otherStatus: SquareChatStatusWithoutMessage;
}

export interface SquareChatStatusWithoutMessage {
  memberCount: number;
  unreadMessageCount: number;
  markedAsReadMessageId: string;
  mentionedMessageId: string;
  notifiedMessageType: NotifiedMessageType;
  badges: number[];
}

export interface SquareCleanScore {
  score: number;
}

export interface SquareEvent {
  createdTime: Int64;
  type: SquareEventType;
  payload: SquareEventPayload;
  syncToken: string;
  eventStatus: SquareEventStatus;
}

export interface SquareEventChatPopup {
  squareChatMid: string;
  popupId: Int64;
  flexJson: string;
  button: ButtonContent;
}

export interface SquareEventMutateMessage {
  squareChatMid: string;
  squareMessage: SquareMessage;
  reqSeq: number;
  senderDisplayName: string;
  threadMid: string;
}

export interface SquareEventNotificationJoinRequest {
  squareMid: string;
  squareName: string;
  requestMemberName: string;
  profileImageObsHash: string;
}

export interface SquareEventNotificationLiveTalk {
  squareChatMid: string;
  liveTalkInvitationTicket: string;
  squareChatName: string;
  chatImageObsHash: string;
}

export interface SquareEventNotificationMemberUpdate {
  squareMid: string;
  squareName: string;
  profileImageObsHash: string;
}

export interface SquareEventNotificationMessage {
  squareChatMid: string;
  squareMessage: SquareMessage;
  senderDisplayName: string;
  unreadCount: number;
  requiredToFetchChatEvents: boolean;
  mentionedMessageId: string;
  notifiedMessageType: NotifiedMessageType;
  reqSeq: number;
}

export interface SquareEventNotificationMessageReaction {
  squareChatMid: string;
  messageId: string;
  squareChatName: string;
  reactorName: string;
  thumbnailObsHash: string;
  messageText: string;
  type: MessageReactionType;
}

export interface SquareEventNotificationNewChatMember {
  squareChatMid: string;
  squareChatName: string;
}

export interface SquareEventNotificationPost {
  squareMid: string;
  notificationPostType: NotificationPostType;
  thumbnailObsHash: string;
  text: string;
  actionUri: string;
}

export interface SquareEventNotificationPostAnnouncement {
  squareMid: string;
  squareName: string;
  squareProfileImageObsHash: string;
  actionUri: string;
}

export interface SquareEventNotificationSquareChatDelete {
  squareChatMid: string;
  squareChatName: string;
  profileImageObsHash: string;
}

export interface SquareEventNotificationSquareDelete {
  squareMid: string;
  squareName: string;
  profileImageObsHash: string;
}

export interface SquareEventNotificationThreadMessage {
  threadMid: string;
  chatMid: string;
  squareMessage: SquareMessage;
  senderDisplayName: string;
  unreadCount: Int64;
  totalMessageCount: Int64;
  threadRootMessageId: string;
}

export interface SquareEventNotificationThreadMessageReaction {
  threadMid: string;
  chatMid: string;
  messageId: string;
  squareChatName: string;
  reactorName: string;
  thumbnailObsHash: string;
}

export interface SquareEventNotifiedAddBot {
  squareChatMid: string;
  squareMember: SquareMember;
  botMid: string;
  botDisplayName: string;
}

export interface SquareEventNotifiedCreateSquareChatMember {
  chat: SquareChat;
  chatStatus: SquareChatStatus;
  chatMember: SquareChatMember;
  joinedAt: Int64;
  peerSquareMember: SquareMember;
  squareChatFeatureSet: SquareChatFeatureSet;
}

export interface SquareEventNotifiedCreateSquareMember {
  square: Square;
  squareAuthority: SquareAuthority;
  squareStatus: SquareStatus;
  squareMember: SquareMember;
  squareFeatureSet: SquareFeatureSet;
  noteStatus: NoteStatus;
}

export interface SquareEventNotifiedDeleteSquareChat {
  squareChat: SquareChat;
}

export interface SquareEventNotifiedDestroyMessage {
  squareChatMid: string;
  messageId: string;
  threadMid: string;
}

export interface SquareEventNotifiedInviteIntoSquareChat {
  squareChatMid: string;
  invitees: SquareMember[];
  invitor: SquareMember;
  invitorRelation: SquareMemberRelation;
}

export interface SquareEventNotifiedJoinSquareChat {
  squareChatMid: string;
  joinedMember: SquareMember;
}

export interface SquareEventNotifiedKickoutFromSquare {
  squareChatMid: string;
  kickees: SquareMember[];
  kicker: SquareMember;
}

export interface SquareEventNotifiedLeaveSquareChat {
  squareChatMid: string;
  squareMemberMid: string;
  sayGoodbye: boolean;
  squareMember: SquareMember;
}

export interface SquareEventNotifiedMarkAsRead {
  squareChatMid: string;
  sMemberMid: string;
  messageId: string;
}

export interface SquareEventNotifiedRemoveBot {
  squareChatMid: string;
  squareMember: SquareMember;
  botMid: string;
  botDisplayName: string;
}

export interface SquareEventNotifiedShutdownSquare {
  squareChatMid: string;
  square: Square;
}

export interface SquareEventNotifiedSystemMessage {
  squareChatMid: string;
  text: string;
  messageKey: string;
}

export interface SquareEventNotifiedUpdateLiveTalk {
  squareChatMid: string;
  sessionId: string;
  liveTalkOnAir: boolean;
}

export interface SquareEventNotifiedUpdateLiveTalkInfo {
  squareChatMid: string;
  liveTalk: LiveTalk;
  liveTalkOnAir: boolean;
}

export interface SquareEventNotifiedUpdateMessageStatus {
  squareChatMid: string;
  messageId: string;
  messageStatus: SquareMessageStatus;
  threadMid: string;
}

export interface SquareEventNotifiedUpdateReadonlyChat {
  squareChatMid: string;
  readonly: boolean;
}

export interface SquareEventNotifiedUpdateSquare {
  squareMid: string;
  square: Square;
}

export interface SquareEventNotifiedUpdateSquareAuthority {
  squareMid: string;
  squareAuthority: SquareAuthority;
}

export interface SquareEventNotifiedUpdateSquareChat {
  squareMid: string;
  squareChatMid: string;
  squareChat: SquareChat;
}

export interface SquareEventNotifiedUpdateSquareChatAnnouncement {
  squareChatMid: string;
  announcementSeq: Int64;
}

export interface SquareEventNotifiedUpdateSquareChatFeatureSet {
  squareChatFeatureSet: SquareChatFeatureSet;
}

export interface SquareEventNotifiedUpdateSquareChatMaxMemberCount {
  squareChatMid: string;
  maxMemberCount: number;
  editor: SquareMember;
}

export interface SquareEventNotifiedUpdateSquareChatMember {
  squareChatMid: string;
  squareChatMember: SquareChatMember;
}

export interface SquareEventNotifiedUpdateSquareChatProfileImage {
  squareChatMid: string;
  editor: SquareMember;
}

export interface SquareEventNotifiedUpdateSquareChatProfileName {
  squareChatMid: string;
  editor: SquareMember;
  updatedChatName: string;
}

export interface SquareEventNotifiedUpdateSquareChatStatus {
  squareChatMid: string;
  statusWithoutMessage: SquareChatStatusWithoutMessage;
}

export interface SquareEventNotifiedUpdateSquareFeatureSet {
  squareFeatureSet: SquareFeatureSet;
}

export interface SquareEventNotifiedUpdateSquareMember {
  squareMid: string;
  squareMemberMid: string;
  squareMember: SquareMember;
}

export interface SquareEventNotifiedUpdateSquareMemberProfile {
  squareChatMid: string;
  squareMember: SquareMember;
}

export interface SquareEventNotifiedUpdateSquareMemberRelation {
  squareMid: string;
  myMemberMid: string;
  targetSquareMemberMid: string;
  squareMemberRelation: SquareMemberRelation;
}

export interface SquareEventNotifiedUpdateSquareNoteStatus {
  squareMid: string;
  noteStatus: NoteStatus;
}

export interface SquareEventNotifiedUpdateSquareStatus {
  squareMid: string;
  squareStatus: SquareStatus;
}

export interface SquareEventNotifiedUpdateThread {
  squareThread: SquareThread;
}

export interface SquareEventNotifiedUpdateThreadMember {
  threadMember: SquareThreadMember;
  squareThread: SquareThread;
  threadRootMessage: SquareMessage;
  totalMessageCount: Int64;
  lastMessage: SquareMessage;
  lastMessageSenderDisplayName: string;
}

export interface SquareEventNotifiedUpdateThreadRootMessage {
  squareThread: SquareThread;
}

export interface SquareEventNotifiedUpdateThreadRootMessageStatus {
  chatMid: string;
  threadMid: string;
  threadRootMessageId: string;
  totalMessageCount: Int64;
  lastMessageAt: Int64;
}

export interface SquareEventNotifiedUpdateThreadStatus {
  threadMid: string;
  chatMid: string;
  unreadCount: Int64;
  markAsReadMessageId: string;
}

export interface SquareEventReceiveMessage {
  squareChatMid: string;
  squareMessage: SquareMessage;
  senderDisplayName: string;
  messageReactionStatus: SquareMessageReactionStatus;
  senderRevision: Int64;
  squareMid: string;
  threadMid: string;
  threadTotalMessageCount: Int64;
  threadLastMessageAt: Int64;
  contentsAttribute: ContentsAttribute;
}

export interface SquareEventSendMessage {
  squareChatMid: string;
  squareMessage: SquareMessage;
  reqSeq: number;
  senderDisplayName: string;
  messageReactionStatus: SquareMessageReactionStatus;
  threadMid: string;
  threadTotalMessageCount: Int64;
  threadLastMessageAt: Int64;
}

export interface SquareExtraInfo {
  country: string;
}

export interface SquareFeature {
  controlState: SquareFeatureControlState;
  booleanValue: BooleanState;
}

export interface SquareFeatureSet {
  squareMid: string;
  revision: Int64;
  creatingSecretSquareChat: SquareFeature;
  invitingIntoOpenSquareChat: SquareFeature;
  creatingSquareChat: SquareFeature;
  readonlyDefaultChat: SquareFeature;
  showingAdvertisement: SquareFeature;
  delegateJoinToPlug: SquareFeature;
  delegateKickOutToPlug: SquareFeature;
  disableUpdateJoinMethod: SquareFeature;
  disableTransferAdmin: SquareFeature;
  creatingLiveTalk: SquareFeature;
  disableUpdateSearchable: SquareFeature;
  summarizingMessages: SquareFeature;
  creatingSquareThread: SquareFeature;
  enableSquareThread: SquareFeature;
  disableChangeRoleCoAdmin: SquareFeature;
}

export interface SquareInfo {
  square: Square;
  squareStatus: SquareStatus;
  squareNoteStatus: NoteStatus;
}

export interface SquareJoinMethod {
  type: SquareJoinMethodType;
  value: SquareJoinMethodValue;
}

export interface SquareJoinMethodValue {
  approvalValue: ApprovalValue;
  codeValue: CodeValue;
}

export interface SquareMember {
  squareMemberMid: string;
  squareMid: string;
  displayName: string;
  profileImageObsHash: string;
  ableToReceiveMessage: boolean;
  membershipState: SquareMembershipState;
  role: SquareMemberRole;
  revision: Int64;
  preference: SquarePreference;
  joinMessage: string;
  createdAt: Int64;
}

export interface SquareMemberRelation {
  state: SquareMemberRelationState;
  revision: Int64;
}

export interface SquareMemberSearchOption {
  membershipState: SquareMembershipState;
  memberRoles: SquareMemberRole[];
  displayName: string;
  ableToReceiveMessage: BooleanState;
  ableToReceiveFriendRequest: BooleanState;
  chatMidToExcludeMembers: string;
  includingMe: boolean;
  excludeBlockedMembers: boolean;
  includingMeOnlyMatch: boolean;
}

export interface SquareMessage {
  message: Message;
  fromType: MIDType;
  squareMessageRevision: Int64;
  state: SquareMessageState;
  threadInfo: SquareMessageThreadInfo;
}

export interface SquareMessageInfo {
  message: SquareMessage;
  square: Square;
  chat: SquareChat;
  sender: SquareMember;
}

export interface SquareMessageReaction {
  type: MessageReactionType;
  reactor: SquareMember;
  createdAt: Int64;
  updatedAt: Int64;
}

export interface SquareMessageReactionStatus {
  totalCount: number;
  countByReactionType: Record<number, number>;
  myReaction: SquareMessageReaction;
}

export interface SquareMessageStatus {
  squareChatMid: string;
  globalMessageId: string;
  type: any;
  contents: MessageStatusContents;
  publishedAt: Int64;
  squareChatThreadMid: string;
}

export interface SquareMessageThreadInfo {
  chatThreadMid: string;
  threadRoot: boolean;
}

export interface SquareMetadata {
  mid: string;
  excluded: number[];
  revision: Int64;
  noAd: boolean;
  updatedAt: Int64;
}

export interface SquarePreference {
  favoriteTimestamp: Int64;
  notiForNewJoinRequest: boolean;
}

export interface SquareStatus {
  memberCount: number;
  joinRequestCount: number;
  lastJoinRequestAt: Int64;
  openChatCount: number;
}

export interface SquareThread {
  threadMid: string;
  chatMid: string;
  squareMid: string;
  messageId: string;
  state: SquareThreadState;
  expiresAt: Int64;
  readOnlyAt: Int64;
  revision: Int64;
}

export interface SquareThreadMember {
  squareMemberMid: string;
  threadMid: string;
  chatMid: string;
  revision: Int64;
  membershipState: SquareThreadMembershipState;
}

export interface SquareUserSettings {
  liveTalkNotification: BooleanState;
}

export interface SquareVisibility {
  common: boolean;
  search: boolean;
}

export interface StartPhotoboothRequest {
  chatMid: string;
}

export interface StartPhotoboothResponse {
  photoboothSessionId: string;
}

export interface I80_C0 {
  authSessionId: string;
  modelName: string;
  deviceUid: string;
}

export interface I80_D0 {
  displayName: string;
  availableAuthFactors: number[];
}

export interface Sticker {
  stickerId: string;
  resourceType: StickerResourceType;
  popupLayer: zR0_EnumC40578c;
}

export interface StickerDisplayData {
  stickerHash: string;
  stickerResourceType: StickerResourceType;
  nameTextProperty: ImageTextProperty;
  popupLayer: Ob1_B0;
  stickerSize: Ob1_C1;
  productAvailability: Ob1_D0;
  height: number;
  width: number;
  version: Int64;
  availableForCombinationSticker: boolean;
}

export interface StickerIdRange {
  start: Int64;
  size: number;
}

export interface StickerLayout {
  layoutInfo: StickerLayoutInfo;
  stickerInfo: StickerLayoutStickerInfo;
}

export interface StickerLayoutInfo {
  width: number;
  height: number;
  rotation: number;
  x: number;
  y: number;
}

export interface StickerLayoutStickerInfo {
  stickerId: Int64;
  productId: Int64;
  stickerHash: string;
  stickerOptions: string;
  stickerVersion: Int64;
}

export interface StickerProperty {
  hasAnimation: boolean;
  hasSound: boolean;
  hasPopup: boolean;
  stickerResourceType: StickerResourceType;
  stickerOptions: string;
  compactStickerOptions: number;
  stickerHash: string;
  stickerIds: string[];
  nameTextProperty: ImageTextProperty;
  availableForPhotoEdit: boolean;
  stickerDefaultTexts: Record<string, string>;
  stickerSize: Ob1_C1;
  popupLayer: Ob1_B0;
  cpdProduct: boolean;
  availableForCombinationSticker: boolean;
}

export interface StickerSummary {
  stickerIdRanges: StickerIdRange[];
  suggestVersion: Int64;
  stickerHash: string;
  defaultDisplayOnKeyboard: boolean;
  stickerResourceType: StickerResourceType;
  nameTextProperty: ImageTextProperty;
  availableForPhotoEdit: boolean;
  popupLayer: Ob1_B0;
  stickerSize: Ob1_C1;
  availableForCombinationSticker: boolean;
}

export interface SticonProperty {
  sticonIds: string[];
  availableForPhotoEdit: boolean;
  sticonResourceType: Ob1_F1;
}

export interface SticonSummary {
  suggestVersion: Int64;
  availableForPhotoEdit: boolean;
  sticonResourceType: Ob1_F1;
}

export interface StopBundleSubscriptionRequest {
  subscriptionService: any;
  storeCode: Ob1_K1;
}

export interface StopBundleSubscriptionResponse {
  result: Ob1_J1;
}

export interface StopNotificationAction {
  serviceUuid: string;
  characteristicUuid: string;
}

export interface StudentInformation {
  schoolName: string;
  graduationDate: string;
}

export interface SubLiffView {
  presentationType: Qj_i0;
  url: string;
  maxBrightness: boolean;
  menuColorSetting: LIFFMenuColorSetting;
  closeButtonPosition: Qj_h0;
  closeButtonLabel: string;
  skipWebRTCPermissionPopupAllowed: boolean;
}

export interface SubTab {
  id: string;
  name: string;
  badgeInfo: BadgeInfo;
  tooltipInfo: TooltipInfo;
  modulesOrder: string[];
  wrsSubTabModelId: string;
}

export interface SubWindowResultRequest {
  msit: string;
  mstVerifier: string;
}

export interface SubscriptionNotification {
  subscriptionId: Int64;
}

export interface SubscriptionPlan {
  billingItemId: string;
  subscriptionService: any;
  target: Ob1_P1;
  type: Ob1_R1;
  period: string;
  freeTrial: string;
  localizedName: string;
  price: Price;
  availability: Ob1_O1;
  cpId: string;
  nameKey: string;
  tier: Ob1_Q1;
}

export interface SubscriptionSlotHistory {
  product: ProductSearchSummary;
  addedTime: Int64;
  removedTime: Int64;
}

export interface SubscriptionState {
  subscriptionId: Int64;
  ttlMillis: Int64;
}

export interface SubscriptionStatus {
  billingItemId: string;
  subscriptionService: any;
  period: string;
  localizedName: string;
  freeTrial: boolean;
  expired: boolean;
  validUntil: Int64;
  maxSlotCount: number;
  target: Ob1_P1;
  type: Ob1_R1;
  storeCode: Ob1_K1;
  nameKey: string;
  tier: Ob1_Q1;
  accountHold: boolean;
  maxSlotCountsByProductType: Record<number, number>;
  agreementAccepted: boolean;
  originalValidUntil: Int64;
}

export interface SuggestDictionarySetting {
  language: string;
  name: string;
  preload: boolean;
  suggestResource: SuggestResource;
  patch: Record<number, string>;
  suggestTagResource: SuggestResource;
  tagPatch: Record<number, string>;
  corpusResource: SuggestResource;
}

export interface SuggestResource {
  dataUrl: string;
  version: Int64;
  updatedTime: Int64;
}

export interface SuggestTag {
  tagId: string;
  weight: number;
}

export interface SuggestTrialRecommendation {
  productId: string;
  productVersion: Int64;
  productName: string;
  resource: zR0_C40580e;
  tags: SuggestTag[];
}

export interface SyncRequest {
  lastRevision: Int64;
  count: number;
  lastGlobalRevision: Int64;
  lastIndividualRevision: Int64;
  fullSyncRequestReason: Pb1_J4;
  lastPartialFullSyncs: Record<number, Int64>;
}

export interface SyncSquareMembersRequest {
  squareMid: string;
  squareMembers: Record<string, Int64>;
}

export interface SyncSquareMembersResponse {
  updatedSquareMembers: SquareMember[];
}

export interface T70_C14398f {

}

export interface T70_g1 {

}

export interface T70_o1 {

}

export interface T70_s1 {

}

export interface TGlobalEvents {
  events: Record<number, GlobalEvent>;
  lastRevision: Int64;
}

export interface TIndividualEvents {
  events: number[];
  lastRevision: Int64;
}

export interface TMessageReadRange {
  chatId: string;
}

export interface TMessageReadRangeEntry {
  startMessageId: Int64;
  endMessageId: Int64;
  startTime: Int64;
  endTime: Int64;
}

export interface Tag {
  tagId: string;
  candidates: Candidate[];
}

export interface TaiwanBankAgreementRequiredPopupInfo {
  popupTitle: string;
  popupContent: string;
}

export interface TaiwanBankBalanceInfo {
  bankUser: boolean;
  balance: Int64;
  accessToken: string;
  accessTokenExpiresInSecond: number;
  balanceLinkUrl: string;
  balanceDisplay: boolean;
  agreedToShowBalance: boolean;
  agreementRequiredPopupInfo: TaiwanBankAgreementRequiredPopupInfo;
}

export interface TaiwanBankLoginParameters {
  loginScheme: string;
  type: string;
  action: string;
  scope: string;
  responseType: string;
  codeChallengeMethod: string;
  clientId: string;
}

export interface TalkroomEnterReferer {
  urlScheme: string;
  type: kf_x;
  content: kf_w;
}

export interface TalkroomEvent {
  type: any;
  referer: TalkroomEnterReferer;
}

export interface TargetProfileDetail {
  snapshotTimeMillis: Int64;
  profileName: string;
  picturePath: string;
  statusMessage: RichString;
  musicProfile: string;
  videoProfile: string;
  avatarProfile: AvatarProfile;
  pictureSource: Pb1_N6;
  pictureStatus: string;
  profileId: string;
}

export interface TermsAgreementExtraInfo {
  termsType: any;
  termsVersion: number;
  lanUrl: string;
}

export interface TextButton {
  text: string;
}

export interface TextMessageAnnouncementContents {
  messageId: string;
  text: string;
  senderSquareMemberMid: string;
  createdAt: Int64;
  senderMid: string;
}

export interface ThaiBankBalanceInfo {
  bankUser: boolean;
  balanceDisplay: boolean;
  balance: number;
  balanceLinkUrl: string;
}

export interface ThemeProperty {
  thumbnailUrl: string;
  themeResourceType: Ob1_c2;
}

export interface ThemeSummary {
  imagePath: string;
  version: Int64;
  versionString: string;
}

export interface ThingsDevice {
  deviceId: string;
  actionUri: string;
  botMid: string;
  productType: do0_EnumC23139B;
  providerName: string;
  profileImageLocation: string;
  channelIdList: string[];
  targetABCEngineVersion: number;
  serviceUuid: string;
  bondingRequired: boolean;
}

export interface ThingsOperation {
  deviceId: string;
  offset: Int64;
  action: do0_C23138A;
}

export interface ThumbnailLayer {
  frontThumbnailImage: RichImage;
  backgroundThumbnailImage: RichImage;
}

export interface Ticket {
  id: string;
  expirationTime: Int64;
  maxUseCount: number;
}

export interface TokenV1IssueResult {
  tokenSecret: string;
}

export interface TokenV3IssueResult {
  accessToken: string;
  refreshToken: string;
  durationUntilRefreshInSec: Int64;
  refreshApiRetryPolicy: RefreshApiRetryPolicy;
  loginSessionId: string;
  tokenIssueTimeEpochSec: Int64;
}

export interface Tooltip {
  text: string;
  revisionTimeMillis: Int64;
}

export interface TooltipInfo {
  text: string;
  tooltipRevision: Int64;
}

export interface TopTab {
  id: string;
  modulesOrder: string[];
}

export interface TryAgainLaterExtraInfo {
  blockSecs: number;
}

export interface U70_a {

}

export interface U70_t {

}

export interface U70_v {

}

export interface UEN {
  revision: Int64;
}

export interface Uf_C14856C {
  uen: UEN;
  beacon: Beacon;
}

export interface Uf_C14864f {
  regularBadge: RegularBadge;
  urgentBadge: UrgentBadge;
}

export interface Uf_p {
  ad: AD;
  content: Content;
  richContent: RichContent;
}

export interface Uf_t {
  typeA: RichItem;
  typeB: RichItem;
}

export interface UnfollowRequest {
  followMid: Pb1_A4;
}

export interface UnhideSquareMemberContentsRequest {
  squareMemberMid: string;
}

export interface UnregisterAvailabilityInfo {
  result: r80_m0;
  message: string;
}

export interface UnsendMessageRequest {
  squareChatMid: string;
  messageId: string;
  threadMid: string;
}

export interface UnsendMessageResponse {
  unsentMessage: SquareMessage;
}

export interface UpdateChatRequest {
  reqSeq: number;
  chat: Chat;
  updatedAttribute: Pb1_O2;
}

export interface UpdateGroupCallUrlRequest {
  urlId: string;
  targetAttribute: Pb1_ad;
}

export interface UpdateLiveTalkAttrsRequest {
  updatedAttrs: LiveTalkAttribute[];
  liveTalk: LiveTalk;
}

export interface UpdatePasswordRequest {
  sessionId: string;
  hashedPassword: string;
}

export interface UpdateProfileAttributesRequest {
  profileAttributes: Record<number, ProfileContent>;
}

export interface UpdateReason {
  type: t80_r;
  detail: string;
}

export interface UpdateSafetyStatusRequest {
  disasterId: string;
  safetyStatus: vh_m;
  message: string;
}

export interface UpdateSquareAuthorityRequest {
  updateAttributes: SquareAuthorityAttribute[];
  authority: SquareAuthority;
}

export interface UpdateSquareAuthorityResponse {
  updatdAttributes: number[];
  authority: SquareAuthority;
}

export interface UpdateSquareChatMemberRequest {
  updatedAttrs: SquareChatMemberAttribute[];
  chatMember: SquareChatMember;
}

export interface UpdateSquareChatMemberResponse {
  updatedChatMember: SquareChatMember;
}

export interface UpdateSquareChatRequest {
  updatedAttrs: SquareChatAttribute[];
  squareChat: SquareChat;
}

export interface UpdateSquareChatResponse {
  updatedAttrs: number[];
  squareChat: SquareChat;
}

export interface UpdateSquareFeatureSetRequest {
  updateAttributes: SquareFeatureSetAttribute[];
  squareFeatureSet: SquareFeatureSet;
}

export interface UpdateSquareFeatureSetResponse {
  updateAttributes: number[];
  squareFeatureSet: SquareFeatureSet;
}

export interface UpdateSquareMemberRelationRequest {
  squareMid: string;
  targetSquareMemberMid: string;
  updatedAttrs: number[];
  relation: SquareMemberRelation;
}

export interface UpdateSquareMemberRelationResponse {
  squareMid: string;
  targetSquareMemberMid: string;
  updatedAttrs: number[];
  relation: SquareMemberRelation;
}

export interface UpdateSquareMemberRequest {
  updatedAttrs: SquareMemberAttribute[];
  updatedPreferenceAttrs: SquarePreferenceAttribute[];
  squareMember: SquareMember;
}

export interface UpdateSquareMemberResponse {
  updatedAttrs: number[];
  squareMember: SquareMember;
  updatedPreferenceAttrs: number[];
}

export interface UpdateSquareMembersRequest {
  updatedAttrs: SquareMemberAttribute[];
  members: SquareMember[];
}

export interface UpdateSquareMembersResponse {
  updatedAttrs: number[];
  editor: SquareMember;
  members: Record<string, SquareMember>;
}

export interface UpdateSquareRequest {
  updatedAttrs: SquareAttribute[];
  square: Square;
}

export interface UpdateSquareResponse {
  updatedAttrs: number[];
  square: Square;
}

export interface UpdateUserSettingsRequest {
  updatedAttrs: any[];
  userSettings: SquareUserSettings;
}

export interface UrgentBadge {
  bgColor: string;
  label: string;
  color: string;
}

export interface UrlButton {
  text: string;
  url: string;
}

export interface UsePhotoboothTicketRequest {
  chatMid: string;
  photoboothSessionId: string;
}

export interface UsePhotoboothTicketResponse {
  signedTicketJwt: string;
}

export interface UserBlockDetail {
  deletedFromBlockList: boolean;
}

export interface UserDevice {
  device: ThingsDevice;
  deviceDisplayName: string;
}

export interface UserFriendDetail {
  createdTime: Int64;
  overriddenName: string;
  favoriteTime: Int64;
  hidden: boolean;
  ringtone: string;
  ringbackTone: string;
}

export interface UserPhoneNumber {
  phoneNumber: string;
  countryCode: string;
}

export interface UserProfile {
  displayName: string;
  profileImageUrl: string;
}

export interface UserRestrictionExtraInfo {
  linkUrl: string;
}

export interface V1PasswordHashingParameters {
  aesKey: string;
  salt: string;
}

export interface VerificationSessionData {
  sessionId: string;
  method: VerificationMethod;
  callback: string;
  normalizedPhone: string;
  countryCode: string;
  nationalSignificantNumber: string;
  availableVerificationMethods: number[];
  callerIdMask: string;
}

export interface VerifyAccountUsingHashedPwdRequest {
  authSessionId: string;
  accountIdentifier: AccountIdentifier;
  v1HashedPassword: string;
  clientHashedPassword: string;
}

export interface I80_E0 {
  authSessionId: string;
  v1HashedPassword: string;
  clientHashedPassword: string;
}

export interface VerifyAccountUsingHashedPwdResponse {
  userProfile: UserProfile;
}

export interface VerifyAssertionRequest {
  sessionId: string;
  credentialId: string;
  assertionObject: string;
  clientDataJSON: string;
}

export interface VerifyAttestationRequest {
  sessionId: string;
  attestationObject: string;
  clientDataJSON: string;
}

export interface VerifyEapLoginRequest {
  authSessionId: string;
  eapLogin: EapLogin;
}

export interface I80_G0 {
  authSessionId: string;
  eapLogin: EapLogin;
}

export interface VerifyEapLoginResponse {
  accountExists: boolean;
}

export interface I80_H0 {
  userProfile: any;
}

export interface VerifyPhonePinCodeRequest {
  authSessionId: string;
  userPhoneNumber: UserPhoneNumber;
  pinCode: string;
}

export interface I80_I0 {
  authSessionId: string;
  userPhoneNumber: UserPhoneNumber;
  pinCode: string;
}

export interface VerifyPhonePinCodeResponse {
  accountExist: boolean;
  sameUdidFromAccount: boolean;
  allowedToRegister: boolean;
  userProfile: UserProfile;
}

export interface I80_J0 {
  userProfile: any;
}

export interface VerifyPinCodeRequest {
  pinCode: string;
}

export interface VerifyQrCodeRequest {
  authSessionId: string;
  metaData: Record<string, string>;
}

export interface VerifySocialLoginResponse {
  accountExist: boolean;
  userProfile: UserProfile;
  sameUdidFromAccount: boolean;
}

export interface I80_K0 {
  baseUrl: string;
  token: string;
}

export interface WebAuthDetails {
  baseUrl: string;
  token: string;
}

export interface WebLoginRequest {
  hookedFullUrl: string;
  sessionString: string;
  fromIAB: boolean;
  sourceApplication: string;
}

export interface WebLoginResponse {
  returnUrl: string;
  optionalReturnUrl: string;
  redirectConfirmationPageUrl: string;
}

export interface WifiSignal {
  ssid: string;
  bssid: string;
  wifiStandard: string;
  frequency: number;
  lastSeenTimestamp: Int64;
  rssi: number;
}

export interface Z70_a {
  recoveryKey: string;
  backupBlobPayload: string;
}

export interface ZQ0_b {

}

export interface acceptChatInvitationByTicket_args {
  request: AcceptChatInvitationByTicketRequest;
}

export interface acceptChatInvitationByTicket_result {
  success: Pb1_C12980f;
  e: TalkException;
}

export interface acceptChatInvitation_args {
  request: AcceptChatInvitationRequest;
}

export interface acceptChatInvitation_result {
  success: Pb1_C13008h;
  e: TalkException;
}

export interface SquareService_acceptSpeakers_result {
  success: AcceptSpeakersResponse;
  e: SquareException;
}

export interface SquareService_acceptToChangeRole_result {
  success: AcceptToChangeRoleResponse;
  e: SquareException;
}

export interface SquareService_acceptToListen_result {
  success: AcceptToListenResponse;
  e: SquareException;
}

export interface SquareService_acceptToSpeak_result {
  success: AcceptToSpeakResponse;
  e: SquareException;
}

export interface SquareService_acquireLiveTalk_result {
  success: AcquireLiveTalkResponse;
  e: SquareException;
}

export interface SquareService_cancelToSpeak_result {
  success: CancelToSpeakResponse;
  e: SquareException;
}

export interface SquareService_fetchLiveTalkEvents_result {
  success: FetchLiveTalkEventsResponse;
  e: SquareException;
}

export interface SquareService_findLiveTalkByInvitationTicket_result {
  success: FindLiveTalkByInvitationTicketResponse;
  e: SquareException;
}

export interface SquareService_forceEndLiveTalk_result {
  success: ForceEndLiveTalkResponse;
  e: SquareException;
}

export interface SquareService_getLiveTalkInfoForNonMember_result {
  success: GetLiveTalkInfoForNonMemberResponse;
  e: SquareException;
}

export interface SquareService_getLiveTalkInvitationUrl_result {
  success: GetLiveTalkInvitationUrlResponse;
  e: SquareException;
}

export interface SquareService_getLiveTalkSpeakersForNonMember_result {
  success: GetLiveTalkSpeakersForNonMemberResponse;
  e: SquareException;
}

export interface SquareService_getSquareInfoByChatMid_result {
  success: GetSquareInfoByChatMidResponse;
  e: SquareException;
}

export interface SquareService_inviteToChangeRole_result {
  success: InviteToChangeRoleResponse;
  e: SquareException;
}

export interface SquareService_inviteToListen_result {
  success: InviteToListenResponse;
  e: SquareException;
}

export interface SquareService_inviteToLiveTalk_result {
  success: InviteToLiveTalkResponse;
  e: SquareException;
}

export interface SquareService_inviteToSpeak_result {
  success: InviteToSpeakResponse;
  e: SquareException;
}

export interface SquareService_joinLiveTalk_result {
  success: JoinLiveTalkResponse;
  e: SquareException;
}

export interface SquareService_kickOutLiveTalkParticipants_result {
  success: KickOutLiveTalkParticipantsResponse;
  e: SquareException;
}

export interface SquareService_rejectSpeakers_result {
  success: RejectSpeakersResponse;
  e: SquareException;
}

export interface SquareService_rejectToSpeak_result {
  success: RejectToSpeakResponse;
  e: SquareException;
}

export interface SquareService_removeLiveTalkSubscription_result {
  success: RemoveLiveTalkSubscriptionResponse;
  e: SquareException;
}

export interface SquareService_reportLiveTalk_result {
  success: ReportLiveTalkResponse;
  e: SquareException;
}

export interface SquareService_reportLiveTalkSpeaker_result {
  success: ReportLiveTalkSpeakerResponse;
  e: SquareException;
}

export interface SquareService_requestToListen_result {
  success: RequestToListenResponse;
  e: SquareException;
}

export interface SquareService_requestToSpeak_result {
  success: RequestToSpeakResponse;
  e: SquareException;
}

export interface SquareService_updateLiveTalkAttrs_result {
  success: UpdateLiveTalkAttrsResponse;
  e: SquareException;
}

export interface SquareService_acceptSpeakers_args {
  request: AcceptSpeakersRequest;
}

export interface SquareService_acceptToChangeRole_args {
  request: AcceptToChangeRoleRequest;
}

export interface SquareService_acceptToListen_args {
  request: AcceptToListenRequest;
}

export interface SquareService_acceptToSpeak_args {
  request: AcceptToSpeakRequest;
}

export interface SquareService_acquireLiveTalk_args {
  request: AcquireLiveTalkRequest;
}

export interface SquareService_cancelToSpeak_args {
  request: CancelToSpeakRequest;
}

export interface SquareService_fetchLiveTalkEvents_args {
  request: FetchLiveTalkEventsRequest;
}

export interface SquareService_findLiveTalkByInvitationTicket_args {
  request: FindLiveTalkByInvitationTicketRequest;
}

export interface SquareService_forceEndLiveTalk_args {
  request: ForceEndLiveTalkRequest;
}

export interface SquareService_getLiveTalkInfoForNonMember_args {
  request: GetLiveTalkInfoForNonMemberRequest;
}

export interface SquareService_getLiveTalkInvitationUrl_args {
  request: GetLiveTalkInvitationUrlRequest;
}

export interface SquareService_getLiveTalkSpeakersForNonMember_args {
  request: GetLiveTalkSpeakersForNonMemberRequest;
}

export interface SquareService_getSquareInfoByChatMid_args {
  request: GetSquareInfoByChatMidRequest;
}

export interface SquareService_inviteToChangeRole_args {
  request: InviteToChangeRoleRequest;
}

export interface SquareService_inviteToListen_args {
  request: InviteToListenRequest;
}

export interface SquareService_inviteToLiveTalk_args {
  request: InviteToLiveTalkRequest;
}

export interface SquareService_inviteToSpeak_args {
  request: InviteToSpeakRequest;
}

export interface SquareService_joinLiveTalk_args {
  request: JoinLiveTalkRequest;
}

export interface SquareService_kickOutLiveTalkParticipants_args {
  request: KickOutLiveTalkParticipantsRequest;
}

export interface SquareService_rejectSpeakers_args {
  request: RejectSpeakersRequest;
}

export interface SquareService_rejectToSpeak_args {
  request: RejectToSpeakRequest;
}

export interface SquareService_removeLiveTalkSubscription_args {
  request: RemoveLiveTalkSubscriptionRequest;
}

export interface SquareService_reportLiveTalk_args {
  request: ReportLiveTalkRequest;
}

export interface SquareService_reportLiveTalkSpeaker_args {
  request: ReportLiveTalkSpeakerRequest;
}

export interface SquareService_requestToListen_args {
  request: RequestToListenRequest;
}

export interface SquareService_requestToSpeak_args {
  request: RequestToSpeakRequest;
}

export interface SquareService_updateLiveTalkAttrs_args {
  request: UpdateLiveTalkAttrsRequest;
}

export interface acquireCallRoute_args {
  to: string;
  callType: Pb1_D4;
  fromEnvInfo: Record<string, string>;
}

export interface acquireCallRoute_result {
  success: CallRoute;
  e: TalkException;
}

export interface acquireEncryptedAccessToken_args {
  featureType: Pb1_EnumC13222w4;
}

export interface acquireEncryptedAccessToken_result {
  success: string;
  e: TalkException;
}

export interface acquireGroupCallRoute_args {
  chatMid: string;
  mediaType: Pb1_EnumC13237x5;
  isInitialHost: boolean;
  capabilities: string[];
}

export interface acquireGroupCallRoute_result {
  success: GroupCallRoute;
  e: TalkException;
}

export interface acquireOACallRoute_args {
  request: AcquireOACallRouteRequest;
}

export interface acquireOACallRoute_result {
  success: AcquireOACallRouteResponse;
  e: TalkException;
}

export interface acquirePaidCallRoute_args {
  paidCallType: PaidCallType;
  dialedNumber: string;
  language: string;
  networkCode: string;
  disableCallerId: boolean;
  referer: string;
  adSessionId: string;
}

export interface acquirePaidCallRoute_result {
  success: PaidCallResponse;
  e: TalkException;
}

export interface activateSubscription_args {
  request: ActivateSubscriptionRequest;
}

export interface activateSubscription_result {
  e: MembershipException;
}

export interface adTypeOptOutClickEvent_args {
  request: AdTypeOptOutClickEventRequest;
}

export interface adTypeOptOutClickEvent_result {
  success: NZ0_C12152b;
  e: WalletException;
}

export interface addFriendByMid_args {
  request: AddFriendByMidRequest;
}

export interface addFriendByMid_result {
  success: LN0_C11270b;
  be: RejectedException;
  ce: ServerFailureException;
  te: TalkException;
}

export interface addItemToCollection_args {
  request: AddItemToCollectionRequest;
}

export interface addItemToCollection_result {
  success: Ob1_C12608b;
  e: CollectionException;
}

export interface addOaFriend_args {
  request: NZ0_C12155c;
}

export interface addOaFriend_result {
  success: AddOaFriendResponse;
  e: WalletException;
}

export interface addProductToSubscriptionSlot_args {
  req: AddProductToSubscriptionSlotRequest;
}

export interface addProductToSubscriptionSlot_result {
  success: AddProductToSubscriptionSlotResponse;
  e: ShopException;
}

export interface addThemeToSubscriptionSlot_args {
  req: AddThemeToSubscriptionSlotRequest;
}

export interface addThemeToSubscriptionSlot_result {
  success: AddThemeToSubscriptionSlotResponse;
  e: ShopException;
}

export interface addToFollowBlacklist_args {
  addToFollowBlacklistRequest: AddToFollowBlacklistRequest;
}

export interface addToFollowBlacklist_result {
  e: TalkException;
}

export interface SquareService_agreeToTerms_result {
  success: AgreeToTermsResponse;
  e: SquareException;
}

export interface SquareService_approveSquareMembers_result {
  success: ApproveSquareMembersResponse;
  e: SquareException;
}

export interface SquareService_checkJoinCode_result {
  success: CheckJoinCodeResponse;
  e: SquareException;
}

export interface SquareService_createSquareChatAnnouncement_result {
  success: CreateSquareChatAnnouncementResponse;
  e: SquareException;
}

export interface SquareService_createSquareChat_result {
  success: CreateSquareChatResponse;
  e: SquareException;
}

export interface SquareService_createSquare_result {
  success: CreateSquareResponse;
  e: SquareException;
}

export interface SquareService_deleteSquareChatAnnouncement_result {
  success: DeleteSquareChatAnnouncementResponse;
  e: SquareException;
}

export interface SquareService_deleteSquareChat_result {
  success: DeleteSquareChatResponse;
  e: SquareException;
}

export interface SquareService_deleteSquare_result {
  success: DeleteSquareResponse;
  e: SquareException;
}

export interface SquareService_destroyMessage_result {
  success: DestroyMessageResponse;
  e: SquareException;
}

export interface SquareService_destroyMessages_result {
  success: DestroyMessagesResponse;
  e: SquareException;
}

export interface SquareService_fetchMyEvents_result {
  success: FetchMyEventsResponse;
  e: SquareException;
}

export interface SquareService_fetchSquareChatEvents_result {
  success: FetchSquareChatEventsResponse;
  e: SquareException;
}

export interface SquareService_findSquareByEmid_result {
  success: FindSquareByEmidResponse;
  e: SquareException;
}

export interface SquareService_findSquareByInvitationTicket_result {
  success: FindSquareByInvitationTicketResponse;
  e: SquareException;
}

export interface SquareService_findSquareByInvitationTicketV2_result {
  success: FindSquareByInvitationTicketV2Response;
  e: SquareException;
}

export interface SquareService_getGoogleAdOptions_result {
  success: GetGoogleAdOptionsResponse;
  e: SquareException;
}

export interface SquareService_getInvitationTicketUrl_result {
  success: GetInvitationTicketUrlResponse;
  e: SquareException;
}

export interface SquareService_getJoinableSquareChats_result {
  success: GetJoinableSquareChatsResponse;
  e: SquareException;
}

export interface SquareService_getJoinedSquareChats_result {
  success: GetJoinedSquareChatsResponse;
  e: SquareException;
}

export interface SquareService_getJoinedSquares_result {
  success: GetJoinedSquaresResponse;
  e: SquareException;
}

export interface SquareService_getMessageReactions_result {
  success: GetMessageReactionsResponse;
  e: SquareException;
}

export interface SquareService_getNoteStatus_result {
  success: GetNoteStatusResponse;
  e: SquareException;
}

export interface SquareService_getPopularKeywords_result {
  success: GetPopularKeywordsResponse;
  e: SquareException;
}

export interface SquareService_getSquareAuthorities_result {
  success: GetSquareAuthoritiesResponse;
  e: SquareException;
}

export interface SquareService_getSquareAuthority_result {
  success: GetSquareAuthorityResponse;
  e: SquareException;
}

export interface SquareService_getCategories_result {
  success: GetSquareCategoriesResponse;
  e: SquareException;
}

export interface SquareService_getSquareChatAnnouncements_result {
  success: GetSquareChatAnnouncementsResponse;
  e: SquareException;
}

export interface SquareService_getSquareChatEmid_result {
  success: GetSquareChatEmidResponse;
  e: SquareException;
}

export interface SquareService_getSquareChatFeatureSet_result {
  success: GetSquareChatFeatureSetResponse;
  e: SquareException;
}

export interface SquareService_getSquareChatMember_result {
  success: GetSquareChatMemberResponse;
  e: SquareException;
}

export interface SquareService_getSquareChatMembers_result {
  success: GetSquareChatMembersResponse;
  e: SquareException;
}

export interface SquareService_getSquareChat_result {
  success: GetSquareChatResponse;
  e: SquareException;
}

export interface SquareService_getSquareChatStatus_result {
  success: GetSquareChatStatusResponse;
  e: SquareException;
}

export interface SquareService_getSquareEmid_result {
  success: GetSquareEmidResponse;
  e: SquareException;
}

export interface SquareService_getSquareFeatureSet_result {
  success: GetSquareFeatureSetResponse;
  e: SquareException;
}

export interface SquareService_getSquareMemberRelation_result {
  success: GetSquareMemberRelationResponse;
  e: SquareException;
}

export interface SquareService_getSquareMemberRelations_result {
  success: GetSquareMemberRelationsResponse;
  e: SquareException;
}

export interface SquareService_getSquareMember_result {
  success: GetSquareMemberResponse;
  e: SquareException;
}

export interface SquareService_getSquareMembersBySquare_result {
  success: GetSquareMembersBySquareResponse;
  e: SquareException;
}

export interface SquareService_getSquareMembers_result {
  success: GetSquareMembersResponse;
  e: SquareException;
}

export interface SquareService_getSquare_result {
  success: GetSquareResponse;
  e: SquareException;
}

export interface SquareService_getSquareStatus_result {
  success: GetSquareStatusResponse;
  e: SquareException;
}

export interface SquareService_getSquareThreadMid_result {
  success: GetSquareThreadMidResponse;
  e: SquareException;
}

export interface SquareService_getSquareThread_result {
  success: GetSquareThreadResponse;
  e: SquareException;
}

export interface SquareService_getUserSettings_result {
  success: GetUserSettingsResponse;
  e: SquareException;
}

export interface SquareService_hideSquareMemberContents_result {
  success: HideSquareMemberContentsResponse;
  e: SquareException;
}

export interface SquareService_inviteIntoSquareChat_result {
  success: InviteIntoSquareChatResponse;
  e: SquareException;
}

export interface SquareService_inviteToSquare_result {
  success: InviteToSquareResponse;
  e: SquareException;
}

export interface SquareService_joinSquareChat_result {
  success: JoinSquareChatResponse;
  e: SquareException;
}

export interface SquareService_joinSquare_result {
  success: JoinSquareResponse;
  e: SquareException;
}

export interface SquareService_joinSquareThread_result {
  success: JoinSquareThreadResponse;
  e: SquareException;
}

export interface SquareService_leaveSquareChat_result {
  success: LeaveSquareChatResponse;
  e: SquareException;
}

export interface SquareService_leaveSquare_result {
  success: LeaveSquareResponse;
  e: SquareException;
}

export interface SquareService_leaveSquareThread_result {
  success: LeaveSquareThreadResponse;
  e: SquareException;
}

export interface SquareService_manualRepair_result {
  success: ManualRepairResponse;
  e: SquareException;
}

export interface SquareService_markAsRead_result {
  success: MarkAsReadResponse;
  e: SquareException;
}

export interface SquareService_markChatsAsRead_result {
  success: MarkChatsAsReadResponse;
  e: SquareException;
}

export interface SquareService_markThreadsAsRead_result {
  success: MarkThreadsAsReadResponse;
  e: SquareException;
}

export interface SquareService_reactToMessage_result {
  success: ReactToMessageResponse;
  e: SquareException;
}

export interface SquareService_refreshSubscriptions_result {
  success: RefreshSubscriptionsResponse;
  e: SquareException;
}

export interface SquareService_rejectSquareMembers_result {
  success: RejectSquareMembersResponse;
  e: SquareException;
}

export interface SquareService_removeSubscriptions_result {
  success: RemoveSubscriptionsResponse;
  e: SquareException;
}

export interface SquareService_reportMessageSummary_result {
  success: ReportMessageSummaryResponse;
  e: SquareException;
}

export interface SquareService_reportSquareChat_result {
  success: ReportSquareChatResponse;
  e: SquareException;
}

export interface SquareService_reportSquareMember_result {
  success: ReportSquareMemberResponse;
  e: SquareException;
}

export interface SquareService_reportSquareMessage_result {
  success: ReportSquareMessageResponse;
  e: SquareException;
}

export interface SquareService_reportSquare_result {
  success: ReportSquareResponse;
  e: SquareException;
}

export interface SquareService_searchSquareChatMembers_result {
  success: SearchSquareChatMembersResponse;
  e: SquareException;
}

export interface SquareService_searchSquareChatMentionables_result {
  success: SearchSquareChatMentionablesResponse;
  e: SquareException;
}

export interface SquareService_searchSquareMembers_result {
  success: SearchSquareMembersResponse;
  e: SquareException;
}

export interface SquareService_searchSquares_result {
  success: SearchSquaresResponse;
  e: SquareException;
}

export interface SquareService_sendMessage_result {
  success: SendMessageResponse;
  e: SquareException;
}

export interface SquareService_sendSquareThreadMessage_result {
  success: SendSquareThreadMessageResponse;
  e: SquareException;
}

export interface SquareService_syncSquareMembers_result {
  success: SyncSquareMembersResponse;
  e: SquareException;
}

export interface SquareService_unhideSquareMemberContents_result {
  success: UnhideSquareMemberContentsResponse;
  e: SquareException;
}

export interface SquareService_unsendMessage_result {
  success: UnsendMessageResponse;
  e: SquareException;
}

export interface SquareService_updateSquareAuthority_result {
  success: UpdateSquareAuthorityResponse;
  e: SquareException;
}

export interface SquareService_updateSquareChatMember_result {
  success: UpdateSquareChatMemberResponse;
  e: SquareException;
}

export interface SquareService_updateSquareChat_result {
  success: UpdateSquareChatResponse;
  e: SquareException;
}

export interface SquareService_updateSquareFeatureSet_result {
  success: UpdateSquareFeatureSetResponse;
  e: SquareException;
}

export interface SquareService_updateSquareMemberRelation_result {
  success: UpdateSquareMemberRelationResponse;
  e: SquareException;
}

export interface SquareService_updateSquareMember_result {
  success: UpdateSquareMemberResponse;
  e: SquareException;
}

export interface SquareService_updateSquareMembers_result {
  success: UpdateSquareMembersResponse;
  e: SquareException;
}

export interface SquareService_updateSquare_result {
  success: UpdateSquareResponse;
  e: SquareException;
}

export interface SquareService_updateUserSettings_result {
  success: UpdateUserSettingsResponse;
  e: SquareException;
}

export interface SquareService_agreeToTerms_args {
  request: AgreeToTermsRequest;
}

export interface SquareService_approveSquareMembers_args {
  request: ApproveSquareMembersRequest;
}

export interface SquareService_checkJoinCode_args {
  request: CheckJoinCodeRequest;
}

export interface SquareService_createSquareChatAnnouncement_args {
  createSquareChatAnnouncementRequest: CreateSquareChatAnnouncementRequest;
}

export interface SquareService_createSquareChat_args {
  request: CreateSquareChatRequest;
}

export interface SquareService_createSquare_args {
  request: CreateSquareRequest;
}

export interface SquareService_deleteSquareChatAnnouncement_args {
  deleteSquareChatAnnouncementRequest: DeleteSquareChatAnnouncementRequest;
}

export interface SquareService_deleteSquareChat_args {
  request: DeleteSquareChatRequest;
}

export interface SquareService_deleteSquare_args {
  request: DeleteSquareRequest;
}

export interface SquareService_destroyMessage_args {
  request: DestroyMessageRequest;
}

export interface SquareService_destroyMessages_args {
  request: DestroyMessagesRequest;
}

export interface SquareService_fetchMyEvents_args {
  request: FetchMyEventsRequest;
}

export interface SquareService_fetchSquareChatEvents_args {
  request: FetchSquareChatEventsRequest;
}

export interface SquareService_findSquareByEmid_args {
  findSquareByEmidRequest: FindSquareByEmidRequest;
}

export interface SquareService_findSquareByInvitationTicket_args {
  request: FindSquareByInvitationTicketRequest;
}

export interface SquareService_findSquareByInvitationTicketV2_args {
  request: FindSquareByInvitationTicketV2Request;
}

export interface SquareService_getGoogleAdOptions_args {
  request: GetGoogleAdOptionsRequest;
}

export interface SquareService_getInvitationTicketUrl_args {
  request: GetInvitationTicketUrlRequest;
}

export interface SquareService_getJoinableSquareChats_args {
  request: GetJoinableSquareChatsRequest;
}

export interface SquareService_getJoinedSquareChats_args {
  request: GetJoinedSquareChatsRequest;
}

export interface SquareService_getJoinedSquares_args {
  request: GetJoinedSquaresRequest;
}

export interface SquareService_getMessageReactions_args {
  request: GetMessageReactionsRequest;
}

export interface SquareService_getNoteStatus_args {
  request: GetNoteStatusRequest;
}

export interface SquareService_getPopularKeywords_args {
  request: GetPopularKeywordsRequest;
}

export interface SquareService_getSquareAuthorities_args {
  request: GetSquareAuthoritiesRequest;
}

export interface SquareService_getSquareAuthority_args {
  request: GetSquareAuthorityRequest;
}

export interface SquareService_getCategories_args {
  request: GetSquareCategoriesRequest;
}

export interface SquareService_getSquareChatAnnouncements_args {
  getSquareChatAnnouncementsRequest: GetSquareChatAnnouncementsRequest;
}

export interface SquareService_getSquareChatEmid_args {
  request: GetSquareChatEmidRequest;
}

export interface SquareService_getSquareChatFeatureSet_args {
  request: GetSquareChatFeatureSetRequest;
}

export interface SquareService_getSquareChatMember_args {
  request: GetSquareChatMemberRequest;
}

export interface SquareService_getSquareChatMembers_args {
  request: GetSquareChatMembersRequest;
}

export interface SquareService_getSquareChat_args {
  request: GetSquareChatRequest;
}

export interface SquareService_getSquareChatStatus_args {
  request: GetSquareChatStatusRequest;
}

export interface SquareService_getSquareEmid_args {
  request: GetSquareEmidRequest;
}

export interface SquareService_getSquareFeatureSet_args {
  request: GetSquareFeatureSetRequest;
}

export interface SquareService_getSquareMemberRelation_args {
  request: GetSquareMemberRelationRequest;
}

export interface SquareService_getSquareMemberRelations_args {
  request: GetSquareMemberRelationsRequest;
}

export interface SquareService_getSquareMember_args {
  request: GetSquareMemberRequest;
}

export interface SquareService_getSquareMembersBySquare_args {
  request: GetSquareMembersBySquareRequest;
}

export interface SquareService_getSquareMembers_args {
  request: GetSquareMembersRequest;
}

export interface SquareService_getSquare_args {
  request: GetSquareRequest;
}

export interface SquareService_getSquareStatus_args {
  request: GetSquareStatusRequest;
}

export interface SquareService_getSquareThreadMid_args {
  request: GetSquareThreadMidRequest;
}

export interface SquareService_getSquareThread_args {
  request: GetSquareThreadRequest;
}

export interface SquareService_getUserSettings_args {
  request: GetUserSettingsRequest;
}

export interface SquareService_hideSquareMemberContents_args {
  request: HideSquareMemberContentsRequest;
}

export interface SquareService_inviteIntoSquareChat_args {
  request: InviteIntoSquareChatRequest;
}

export interface SquareService_inviteToSquare_args {
  request: InviteToSquareRequest;
}

export interface SquareService_joinSquareChat_args {
  request: JoinSquareChatRequest;
}

export interface SquareService_joinSquare_args {
  request: JoinSquareRequest;
}

export interface SquareService_joinSquareThread_args {
  request: JoinSquareThreadRequest;
}

export interface SquareService_leaveSquareChat_args {
  request: LeaveSquareChatRequest;
}

export interface SquareService_leaveSquare_args {
  request: LeaveSquareRequest;
}

export interface SquareService_leaveSquareThread_args {
  request: LeaveSquareThreadRequest;
}

export interface SquareService_manualRepair_args {
  request: ManualRepairRequest;
}

export interface SquareService_markAsRead_args {
  request: MarkAsReadRequest;
}

export interface SquareService_markChatsAsRead_args {
  request: MarkChatsAsReadRequest;
}

export interface SquareService_markThreadsAsRead_args {
  request: MarkThreadsAsReadRequest;
}

export interface SquareService_reactToMessage_args {
  request: ReactToMessageRequest;
}

export interface SquareService_refreshSubscriptions_args {
  request: RefreshSubscriptionsRequest;
}

export interface SquareService_rejectSquareMembers_args {
  request: RejectSquareMembersRequest;
}

export interface SquareService_removeSubscriptions_args {
  request: RemoveSubscriptionsRequest;
}

export interface SquareService_reportMessageSummary_args {
  request: ReportMessageSummaryRequest;
}

export interface SquareService_reportSquareChat_args {
  request: ReportSquareChatRequest;
}

export interface SquareService_reportSquareMember_args {
  request: ReportSquareMemberRequest;
}

export interface SquareService_reportSquareMessage_args {
  request: ReportSquareMessageRequest;
}

export interface SquareService_reportSquare_args {
  request: ReportSquareRequest;
}

export interface SquareService_searchSquareChatMembers_args {
  request: SearchSquareChatMembersRequest;
}

export interface SquareService_searchSquareChatMentionables_args {
  request: SearchSquareChatMentionablesRequest;
}

export interface SquareService_searchSquareMembers_args {
  request: SearchSquareMembersRequest;
}

export interface SquareService_searchSquares_args {
  request: SearchSquaresRequest;
}

export interface SquareService_sendMessage_args {
  request: SendMessageRequest;
}

export interface SquareService_sendSquareThreadMessage_args {
  request: SendSquareThreadMessageRequest;
}

export interface SquareService_syncSquareMembers_args {
  request: SyncSquareMembersRequest;
}

export interface SquareService_unhideSquareMemberContents_args {
  request: UnhideSquareMemberContentsRequest;
}

export interface SquareService_unsendMessage_args {
  request: UnsendMessageRequest;
}

export interface SquareService_updateSquareAuthority_args {
  request: UpdateSquareAuthorityRequest;
}

export interface SquareService_updateSquareChatMember_args {
  request: UpdateSquareChatMemberRequest;
}

export interface SquareService_updateSquareChat_args {
  request: UpdateSquareChatRequest;
}

export interface SquareService_updateSquareFeatureSet_args {
  request: UpdateSquareFeatureSetRequest;
}

export interface SquareService_updateSquareMemberRelation_args {
  request: UpdateSquareMemberRelationRequest;
}

export interface SquareService_updateSquareMember_args {
  request: UpdateSquareMemberRequest;
}

export interface SquareService_updateSquareMembers_args {
  request: UpdateSquareMembersRequest;
}

export interface SquareService_updateSquare_args {
  request: UpdateSquareRequest;
}

export interface SquareService_updateUserSettings_args {
  request: UpdateUserSettingsRequest;
}

export interface approveChannelAndIssueChannelToken_args {
  channelId: string;
}

export interface approveChannelAndIssueChannelToken_result {
  success: ChannelToken;
  e: ChannelException;
}

export interface authenticateUsingBankAccountEx_args {
  type: r80_EnumC34362b;
  bankId: string;
  bankBranchId: string;
  realAccountNo: string;
  accountProductCode: r80_EnumC34361a;
  authToken: string;
}

export interface authenticateUsingBankAccountEx_result {
  success: PaymentAuthenticationInfo;
  e: PaymentException;
}

export interface authenticateWithPaak_args {
  request: AuthenticateWithPaakRequest;
}

export interface authenticateWithPaak_result {
  success: o80_C32273b;
  e: SecondaryPwlessLoginException;
}

export interface blockContact_args {
  reqSeq: number;
  id: string;
}

export interface blockContact_result {
  e: TalkException;
}

export interface blockRecommendation_args {
  reqSeq: number;
  targetMid: string;
}

export interface blockRecommendation_result {
  e: TalkException;
}

export interface bulkFollow_args {
  bulkFollowRequest: BulkFollowRequest;
}

export interface bulkFollow_result {
  success: Pb1_C12996g1;
  e: TalkException;
}

export interface bulkGetSetting_args {
  request: BulkGetRequest;
}

export interface bulkGetSetting_result {
  success: any;
  e: SettingsException;
}

export interface bulkSetSetting_args {
  request: any;
}

export interface bulkSetSetting_result {
  success: any;
  e: SettingsException;
}

export interface buyMustbuyProduct_args {
  request: BuyMustbuyRequest;
}

export interface buyMustbuyProduct_result {
  e: ShopException;
}

export interface canCreateCombinationSticker_args {
  request: CanCreateCombinationStickerRequest;
}

export interface canCreateCombinationSticker_result {
  success: CanCreateCombinationStickerResponse;
  e: ShopException;
}

export interface canReceivePresent_args {
  shopId: string;
  productId: string;
  locale: Locale;
  recipientMid: string;
}

export interface canReceivePresent_result {
  e: ShopException;
}

export interface cancelChatInvitation_args {
  request: CancelChatInvitationRequest;
}

export interface cancelChatInvitation_result {
  success: Pb1_U1;
  e: TalkException;
}

export interface cancelPaakAuth_args {
  request: CancelPaakAuthRequest;
}

export interface cancelPaakAuth_result {
  success: o80_d;
  e: SecondaryPwlessLoginException;
}

export interface cancelPaakAuthentication_args {
  request: CancelPaakAuthenticationRequest;
}

export interface cancelPaakAuthentication_result {
  success: n80_d;
  cpae: ChannelPaakAuthnException;
  tae: TokenAuthException;
}

export interface cancelPinCode_args {
  request: CancelPinCodeRequest;
}

export interface cancelPinCode_result {
  success: q80_C33650b;
  e: SecondaryQrCodeException;
}

export interface cancelReaction_args {
  cancelReactionRequest: CancelReactionRequest;
}

export interface cancelReaction_result {
  e: TalkException;
}

export interface changeSubscription_args {
  req: any;
}

export interface changeSubscription_result {
  success: ChangeSubscriptionResponse;
  e: ShopException;
}

export interface changeVerificationMethod_args {
  sessionId: string;
  method: VerificationMethod;
}

export interface changeVerificationMethod_result {
  success: VerificationSessionData;
  e: TalkException;
}

export interface checkCanUnregisterEx_args {
  type: r80_n0;
}

export interface checkCanUnregisterEx_result {
  success: UnregisterAvailabilityInfo;
  e: PaymentException;
}

export interface I80_C26370F {
  request: I80_C26396d;
}

export interface checkEmailAssigned_args {
  authSessionId: string;
  accountIdentifier: AccountIdentifier;
}

export interface checkEmailAssigned_result {
  success: CheckEmailAssignedResponse;
  e: AuthException;
}

export interface I80_C26371G {
  success: I80_C26398e;
  e: I80_C26390a;
}

export interface checkIfEncryptedE2EEKeyReceived_args {
  request: CheckIfEncryptedE2EEKeyReceivedRequest;
}

export interface checkIfEncryptedE2EEKeyReceived_result {
  success: CheckIfEncryptedE2EEKeyReceivedResponse;
  e: PrimaryQrCodeMigrationException;
}

export interface I80_C26372H {
  request: I80_C26400f;
}

export interface checkIfPasswordSetVerificationEmailVerified_args {
  authSessionId: string;
}

export interface checkIfPasswordSetVerificationEmailVerified_result {
  success: T70_C14398f;
  e: AuthException;
}

export interface I80_C26373I {
  success: I80_C26402g;
  e: I80_C26390a;
}

export interface checkIfPhonePinCodeMsgVerified_args {
  request: CheckIfPhonePinCodeMsgVerifiedRequest;
}

export interface checkIfPhonePinCodeMsgVerified_result {
  success: CheckIfPhonePinCodeMsgVerifiedResponse;
  e: AuthException;
}

export interface checkOperationTimeEx_args {
  type: r80_EnumC34368h;
  lpAccountNo: string;
  channelType: r80_EnumC34371k;
}

export interface checkOperationTimeEx_result {
  success: CheckOperationResult;
  e: PaymentException;
}

export interface checkUserAgeAfterApprovalWithDocomoV2_args {
  request: CheckUserAgeAfterApprovalWithDocomoV2Request;
}

export interface checkUserAgeAfterApprovalWithDocomoV2_result {
  success: CheckUserAgeAfterApprovalWithDocomoV2Response;
  e: TalkException;
}

export interface checkUserAgeWithDocomoV2_args {
  request: CheckUserAgeWithDocomoV2Request;
}

export interface checkUserAgeWithDocomoV2_result {
  success: CheckUserAgeWithDocomoV2Response;
  e: TalkException;
}

export interface checkUserAge_args {
  carrier: CarrierCode;
  sessionId: string;
  verifier: string;
  standardAge: number;
}

export interface checkUserAge_result {
  success: Pb1_gd;
  e: TalkException;
}

export interface clearRingbackTone_result {
  e: TalkException;
}

export interface clearRingtone_args {
  oid: string;
}

export interface clearRingtone_result {
  e: TalkException;
}

export interface AcceptSpeakersResponse {

}

export interface AcceptToChangeRoleResponse {

}

export interface AcceptToListenResponse {

}

export interface AcceptToSpeakResponse {

}

export interface AgreeToTermsResponse {

}

export interface AllNonMemberLiveTalkParticipants {

}

export interface CancelToSpeakResponse {

}

export interface DeleteSquareChatAnnouncementResponse {

}

export interface DeleteSquareChatResponse {

}

export interface DeleteSquareResponse {

}

export interface DestroyMessageResponse {

}

export interface DestroyMessagesResponse {

}

export interface ForceEndLiveTalkResponse {

}

export interface GetPopularKeywordsRequest {

}

export interface GetSquareCategoriesRequest {

}

export interface HideSquareMemberContentsResponse {

}

export interface InviteToChangeRoleResponse {

}

export interface InviteToListenResponse {

}

export interface InviteToLiveTalkResponse {

}

export interface InviteToSquareResponse {

}

export interface KickOutLiveTalkParticipantsResponse {

}

export interface LeaveSquareChatResponse {

}

export interface LeaveSquareResponse {

}

export interface LiveTalkEventPayload {
  notifiedUpdateLiveTalkTitle: LiveTalkEventNotifiedUpdateLiveTalkTitle;
  notifiedUpdateLiveTalkAnnouncement: LiveTalkEventNotifiedUpdateLiveTalkAnnouncement;
  notifiedUpdateSquareMemberRole: LiveTalkEventNotifiedUpdateSquareMemberRole;
  notifiedUpdateLiveTalkAllowRequestToSpeak: LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak;
  notifiedUpdateSquareMember: LiveTalkEventNotifiedUpdateSquareMember;
}

export interface LiveTalkKickOutTarget {
  liveTalkParticipant: LiveTalkParticipant;
  allNonMemberLiveTalkParticipants: AllNonMemberLiveTalkParticipants;
}

export interface MarkAsReadResponse {

}

export interface MarkChatsAsReadResponse {

}

export interface MarkThreadsAsReadResponse {

}

export interface RejectSpeakersResponse {

}

export interface RejectToSpeakResponse {

}

export interface RemoveLiveTalkSubscriptionResponse {

}

export interface RemoveSubscriptionsResponse {

}

export interface ReportLiveTalkResponse {

}

export interface ReportLiveTalkSpeakerResponse {

}

export interface ReportMessageSummaryResponse {

}

export interface ReportSquareChatResponse {

}

export interface ReportSquareMemberResponse {

}

export interface ReportSquareMessageResponse {

}

export interface ReportSquareResponse {

}

export interface RequestToListenResponse {

}

export interface RequestToSpeakResponse {

}

export interface SquareEventPayload {
  receiveMessage: SquareEventReceiveMessage;
  sendMessage: SquareEventSendMessage;
  notifiedJoinSquareChat: SquareEventMutateMessage;
  notifiedInviteIntoSquareChat: SquareEventNotifiedJoinSquareChat;
  notifiedLeaveSquareChat: SquareEventNotifiedInviteIntoSquareChat;
  notifiedDestroyMessage: SquareEventNotifiedLeaveSquareChat;
  notifiedMarkAsRead: SquareEventNotifiedDestroyMessage;
  notifiedUpdateSquareMemberProfile: SquareEventNotifiedMarkAsRead;
  notifiedUpdateSquare: SquareEventNotifiedUpdateSquareMemberProfile;
  notifiedUpdateSquareMember: SquareEventNotifiedKickoutFromSquare;
  notifiedUpdateSquareChat: SquareEventNotifiedShutdownSquare;
  notifiedUpdateSquareChatMember: SquareEventNotifiedDeleteSquareChat;
  notifiedUpdateSquareAuthority: SquareEventNotifiedUpdateSquareChatProfileName;
  notifiedUpdateSquareStatus: SquareEventNotifiedUpdateSquareChatProfileImage;
  notifiedUpdateSquareChatStatus: SquareEventNotifiedUpdateSquareChatMaxMemberCount;
  notifiedCreateSquareMember: SquareEventNotifiedAddBot;
  notifiedCreateSquareChatMember: SquareEventNotifiedRemoveBot;
  notifiedUpdateSquareMemberRelation: SquareEventNotifiedUpdateReadonlyChat;
  notifiedShutdownSquare: SquareEventNotifiedUpdateMessageStatus;
  notifiedKickoutFromSquare: SquareEventChatPopup;
  notifiedDeleteSquareChat: SquareEventNotifiedSystemMessage;
  notificationJoinRequest: SquareEventNotifiedUpdateLiveTalkInfo;
  notificationJoined: SquareEventNotifiedUpdateThreadRootMessage;
  notificationPromoteCoadmin: SquareEventNotifiedUpdateThreadRootMessageStatus;
  notificationPromoteAdmin: SquareEventNotifiedUpdateSquare;
  notificationDemoteMember: SquareEventNotifiedUpdateSquareStatus;
  notificationKickedOut: SquareEventNotifiedUpdateSquareMember;
  notificationSquareDelete: SquareEventNotifiedUpdateSquareChat;
  notificationSquareChatDelete: SquareEventNotifiedUpdateSquareChatStatus;
  notificationMessage: SquareEventNotifiedUpdateSquareChatMember;
  notifiedUpdateSquareChatProfileName: SquareEventNotifiedUpdateSquareAuthority;
  notifiedUpdateSquareChatProfileImage: SquareEventNotifiedCreateSquareMember;
  notifiedUpdateSquareFeatureSet: SquareEventNotifiedCreateSquareChatMember;
  notifiedAddBot: SquareEventNotifiedUpdateSquareMemberRelation;
  notifiedRemoveBot: SquareEventNotifiedUpdateSquareFeatureSet;
  notifiedUpdateSquareNoteStatus: SquareEventNotifiedUpdateSquareChatFeatureSet;
  notifiedUpdateSquareChatAnnouncement: SquareEventNotifiedUpdateSquareNoteStatus;
  notifiedUpdateSquareChatMaxMemberCount: SquareEventNotifiedUpdateSquareChatAnnouncement;
  notificationPostAnnouncement: SquareEventNotifiedUpdateLiveTalk;
  notificationPost: SquareEventNotificationJoinRequest;
  mutateMessage: SquareEventNotificationMemberUpdate;
  notificationNewChatMember: SquareEventNotificationMemberUpdate;
  notifiedUpdateReadonlyChat: SquareEventNotificationMemberUpdate;
  notifiedUpdateMessageStatus: SquareEventNotificationMemberUpdate;
  notificationMessageReaction: SquareEventNotificationMemberUpdate;
  chatPopup: SquareEventNotificationSquareDelete;
  notifiedSystemMessage: SquareEventNotificationSquareChatDelete;
  notifiedUpdateSquareChatFeatureSet: SquareEventNotificationMessage;
  notifiedUpdateLiveTalkInfo: SquareEventNotificationPostAnnouncement;
  notifiedUpdateLiveTalk: SquareEventNotificationPost;
  notificationLiveTalk: SquareEventNotificationNewChatMember;
  notificationThreadMessage: SquareEventNotificationMessageReaction;
  notificationThreadMessageReaction: SquareEventNotificationLiveTalk;
  notifiedUpdateThread: SquareEventNotificationThreadMessage;
  notifiedUpdateThreadStatus: SquareEventNotificationThreadMessageReaction;
  notifiedUpdateThreadMember: SquareEventNotifiedUpdateThread;
  notifiedUpdateThreadRootMessage: SquareEventNotifiedUpdateThreadStatus;
  notifiedUpdateThreadRootMessageStatus: SquareEventNotifiedUpdateThreadMember;
}

export interface UnhideSquareMemberContentsResponse {

}

export interface UpdateLiveTalkAttrsResponse {

}

export interface UpdateUserSettingsResponse {

}

export interface ButtonBGColor {
  custom: CustomColor;
  defaultGradient: DefaultGradientColor;
}

export interface ButtonContent {
  urlButton: UrlButton;
  textButton: TextButton;
  okButton: OkButton;
}

export interface DefaultGradientColor {

}

export interface ErrorExtraInfo {
  preconditionFailedExtraInfo: number;
  userRestrictionInfo: UserRestrictionExtraInfo;
  tryAgainLaterExtraInfo: TryAgainLaterExtraInfo;
  liveTalkExtraInfo: LiveTalkExtraInfo;
  termsAgreementExtraInfo: TermsAgreementExtraInfo;
}

export interface Mentionable {
  squareMember: MentionableSquareMember;
  bot: MentionableBot;
}

export interface MessageStatusContents {
  messageReactionStatus: SquareMessageReactionStatus;
}

export interface SquareActivityScore {
  cleanScore: SquareCleanScore;
}

export interface SquareChatAnnouncementContents {
  textMessageAnnouncementContents: TextMessageAnnouncementContents;
}

export interface TargetChats {
  mids: any[];
  categories: any[];
  channelId: number;
}

export interface TargetUsers {
  mids: any[];
}

export interface TermsAgreement {
  aiQnABot: AiQnABotTermsAgreement;
}

export interface confirmIdentifier_args {
  authSessionId: string;
  request: IdentityCredentialRequest;
}

export interface confirmIdentifier_result {
  success: IdentityCredentialResponse;
  e: TalkException;
}

export interface connectEapAccount_args {
  request: ConnectEapAccountRequest;
}

export interface connectEapAccount_result {
  success: Q70_l;
  e: AccountEapConnectException;
}

export interface createChatRoomAnnouncement_args {
  reqSeq: number;
  chatRoomMid: string;
  type: Pb1_X2;
  contents: ChatRoomAnnouncementContents;
}

export interface createChatRoomAnnouncement_result {
  success: ChatRoomAnnouncement;
  e: TalkException;
}

export interface createChat_args {
  request: CreateChatRequest;
}

export interface createChat_result {
  success: CreateChatResponse;
  e: TalkException;
}

export interface createCollectionForUser_args {
  request: any;
}

export interface createCollectionForUser_result {
  success: any;
  e: CollectionException;
}

export interface createCombinationSticker_args {
  request: any;
}

export interface createCombinationSticker_result {
  success: any;
  e: ShopException;
}

export interface createE2EEKeyBackupEnforced_args {
  request: Pb1_C13263z3;
}

export interface createE2EEKeyBackupEnforced_result {
  success: Pb1_B3;
  e: E2EEKeyBackupException;
}

export interface createGroupCallUrl_args {
  request: CreateGroupCallUrlRequest;
}

export interface createGroupCallUrl_result {
  success: CreateGroupCallUrlResponse;
  e: TalkException;
}

export interface createLifetimeKeyBackup_args {
  request: Pb1_E3;
}

export interface createLifetimeKeyBackup_result {
  success: Pb1_F3;
  e: E2EEKeyBackupException;
}

export interface createMultiProfile_args {
  request: CreateMultiProfileRequest;
}

export interface createMultiProfile_result {
  success: CreateMultiProfileResponse;
  e: TalkException;
}

export interface createRoomV2_args {
  reqSeq: number;
  contactIds: string[];
}

export interface createRoomV2_result {
  success: Room;
  e: TalkException;
}

export interface createSession_args {
  request: h80_C25643c;
}

export interface I80_C26365A {
  request: I80_C26404h;
}

export interface createSession_result {
  success: CreateSessionResponse;
  pqme: PrimaryQrCodeMigrationException;
  tae: TokenAuthException;
}

export interface I80_C26366B {
  success: I80_C26406i;
  e: I80_C26390a;
  tae: TokenAuthException;
}

export interface decryptFollowEMid_args {
  eMid: string;
}

export interface decryptFollowEMid_result {
  success: string;
  e: TalkException;
}

export interface deleteE2EEKeyBackup_args {
  request: Pb1_H3;
}

export interface deleteE2EEKeyBackup_result {
  success: Pb1_I3;
  e: E2EEKeyBackupException;
}

export interface deleteGroupCallUrl_args {
  request: DeleteGroupCallUrlRequest;
}

export interface deleteGroupCallUrl_result {
  success: Pb1_K3;
  e: TalkException;
}

export interface deleteMultiProfile_args {
  request: DeleteMultiProfileRequest;
}

export interface deleteMultiProfile_result {
  success: gN0_C25147d;
  e: TalkException;
}

export interface deleteOtherFromChat_args {
  request: DeleteOtherFromChatRequest;
}

export interface deleteOtherFromChat_result {
  success: Pb1_M3;
  e: TalkException;
}

export interface deletePrimaryCredential_args {
  request: R70_c;
}

export interface deletePrimaryCredential_result {
  success: R70_d;
  e: PwlessCredentialException;
}

export interface deleteSafetyStatus_args {
  req: DeleteSafetyStatusRequest;
}

export interface deleteSafetyStatus_result {
  e: any;
}

export interface deleteSelfFromChat_args {
  request: DeleteSelfFromChatRequest;
}

export interface deleteSelfFromChat_result {
  success: Pb1_O3;
  e: TalkException;
}

export interface determineMediaMessageFlow_args {
  request: DetermineMediaMessageFlowRequest;
}

export interface determineMediaMessageFlow_result {
  success: DetermineMediaMessageFlowResponse;
  e: TalkException;
}

export interface disableNearby_result {
  e: TalkException;
}

export interface disconnectEapAccount_args {
  request: DisconnectEapAccountRequest;
}

export interface disconnectEapAccount_result {
  success: Q70_o;
  e: AccountEapConnectException;
}

export interface do0_C23138A {
  connectDevice: ConnectDeviceOperation;
  executeOnetimeScenario: ExecuteOnetimeScenarioOperation;
}

export interface do0_C23141D {
  gattRead: GattReadAction;
  gattWrite: do0_C23158p;
  sleep: SleepAction;
  disconnect: do0_C23153k;
  stopNotification: StopNotificationAction;
}

export interface do0_C23142E {
  voidResult: do0_m0;
  binaryResult: do0_C23143a;
}

export interface do0_C23143a {
  bytes: string;
}

export interface do0_C23152j {

}

export interface do0_C23153k {

}

export interface do0_C23158p {
  serviceUuid: string;
  characteristicUuid: string;
  data: string;
}

export interface do0_C23161t {

}

export interface do0_C23165x {

}

export interface do0_C23167z {

}

export interface do0_F {
  scenarioId: string;
  deviceId: string;
  revision: Int64;
  startTime: Int64;
  endTime: Int64;
  code: do0_G;
  errorReason: string;
  bleNotificationPayload: string;
  actionResults: do0_C23142E[];
  connectionId: string;
}

export interface do0_I {
  immediate: do0_C23161t;
  bleNotificationReceived: BleNotificationReceivedTrigger;
}

export interface do0_V {

}

export interface do0_X {

}

export interface do0_m0 {

}

export interface editItemsInCollection_args {
  request: any;
}

export interface editItemsInCollection_result {
  success: any;
  e: CollectionException;
}

export interface enablePointForOneTimeKey_args {
  usePoint: boolean;
}

export interface enablePointForOneTimeKey_result {
  e: PaymentException;
}

export interface establishE2EESession_args {
  request: any;
}

export interface establishE2EESession_result {
  success: any;
  e: ShopException;
}

export interface existPinCode_args {
  request: S70_b;
}

export interface existPinCode_result {
  success: ExistPinCodeResponse;
  e: SecondAuthFactorPinCodeException;
}

export interface fN0_C24471c {

}

export interface fN0_C24473e {

}

export interface fN0_C24475g {

}

export interface fN0_C24476h {

}

export interface fetchOperations_args {
  request: FetchOperationsRequest;
}

export interface fetchOperations_result {
  success: FetchOperationsResponse;
  e: ThingsException;
}

export interface fetchPhonePinCodeMsg_args {
  request: FetchPhonePinCodeMsgRequest;
}

export interface fetchPhonePinCodeMsg_result {
  success: FetchPhonePinCodeMsgResponse;
  e: AuthException;
}

export interface findAndAddContactByMetaTag_result {
  success: Contact;
  e: TalkException;
}

export interface findAndAddContactsByMid_result {
  success: Record<string, Contact>;
  e: TalkException;
}

export interface findAndAddContactsByPhone_result {
  success: Record<string, Contact>;
  e: TalkException;
}

export interface findAndAddContactsByUserid_result {
  success: Record<string, Contact>;
  e: TalkException;
}

export interface findBuddyContactsByQuery_args {
  language: string;
  country: string;
  query: string;
  fromIndex: number;
  count: number;
  requestSource: Pb1_F0;
}

export interface findBuddyContactsByQuery_result {
  success: BuddySearchResult[];
  e: TalkException;
}

export interface findChatByTicket_args {
  request: FindChatByTicketRequest;
}

export interface findChatByTicket_result {
  success: FindChatByTicketResponse;
  e: TalkException;
}

export interface findContactByUserTicket_args {
  ticketIdWithTag: string;
}

export interface findContactByUserTicket_result {
  success: Contact;
  e: TalkException;
}

export interface findContactByUserid_args {
  searchId: string;
}

export interface findContactByUserid_result {
  success: Contact;
  e: TalkException;
}

export interface findContactsByPhone_args {
  phones: string[];
}

export interface findContactsByPhone_result {
  success: Record<string, Contact>;
  e: TalkException;
}

export interface finishUpdateVerification_args {
  sessionId: string;
}

export interface finishUpdateVerification_result {
  e: TalkException;
}

export interface follow_args {
  followRequest: FollowRequest;
}

export interface follow_result {
  e: TalkException;
}

export interface gN0_C25143G {

}

export interface gN0_C25147d {

}

export interface generateUserTicket_args {
  expirationTime: Int64;
  maxUseCount: number;
}

export interface generateUserTicket_result {
  success: Ticket;
  e: TalkException;
}

export interface getAccessToken_args {
  request: GetAccessTokenRequest;
}

export interface getAccessToken_result {
  success: GetAccessTokenResponse;
  e: TalkException;
}

export interface getAccountBalanceAsync_args {
  requestToken: string;
  accountId: string;
}

export interface getAccountBalanceAsync_result {
  e: PaymentException;
}

export interface I80_C26374J {
  request: I80_C26410k;
}

export interface getAcctVerifMethod_args {
  authSessionId: string;
  accountIdentifier: AccountIdentifier;
}

export interface getAcctVerifMethod_result {
  success: GetAcctVerifMethodResponse;
  e: AuthException;
}

export interface I80_C26375K {
  success: I80_C26412l;
  e: I80_C26390a;
}

export interface getAllChatMids_args {
  request: GetAllChatMidsRequest;
  syncReason: Pb1_V7;
}

export interface getAllChatMids_result {
  success: GetAllChatMidsResponse;
  e: TalkException;
}

export interface getAllContactIds_args {
  syncReason: Pb1_V7;
}

export interface getAllContactIds_result {
  success: string[];
  e: TalkException;
}

export interface getAllowedRegistrationMethod_args {
  authSessionId: string;
  countryCode: string;
}

export interface getAllowedRegistrationMethod_result {
  success: GetAllowedRegistrationMethodResponse;
  e: AuthException;
}

export interface getAnalyticsInfo_result {
  success: AnalyticsInfo;
  e: TalkException;
}

export interface getApprovedChannels_args {
  lastSynced: Int64;
  locale: string;
}

export interface getApprovedChannels_result {
  success: ApprovedChannelInfos;
  e: ChannelException;
}

export interface getAssertionChallenge_args {
  request: m80_l;
}

export interface getAssertionChallenge_result {
  success: GetAssertionChallengeResponse;
  deviceAttestationException: m80_b;
  attestationRequiredException: m80_C30146a;
}

export interface getAttestationChallenge_args {
  request: m80_n;
}

export interface getAttestationChallenge_result {
  success: GetAttestationChallengeResponse;
  deviceAttestationException: m80_b;
}

export interface getAuthRSAKey_args {
  authSessionId: string;
  identityProvider: IdentityProvider;
}

export interface getAuthRSAKey_result {
  success: RSAKey;
  e: TalkException;
}

export interface getAuthorsLatestProducts_args {
  latestProductsByAuthorRequest: LatestProductsByAuthorRequest;
}

export interface getAuthorsLatestProducts_result {
  success: LatestProductsByAuthorResponse;
  e: ShopException;
}

export interface getAutoSuggestionShowcase_args {
  autoSuggestionShowcaseRequest: AutoSuggestionShowcaseRequest;
}

export interface getAutoSuggestionShowcase_result {
  success: AutoSuggestionShowcaseResponse;
  e: ShopException;
}

export interface getBalanceSummaryV2_args {
  request: NZ0_C12208u;
}

export interface getBalanceSummaryV2_result {
  success: GetBalanceSummaryResponseV2;
  e: WalletException;
}

export interface getBalanceSummaryV4WithPayV3_args {
  request: NZ0_C12214w;
}

export interface getBalanceSummaryV4WithPayV3_result {
  success: GetBalanceSummaryV4WithPayV3Response;
  e: WalletException;
}

export interface getBalance_args {
  request: ZQ0_b;
}

export interface getBalance_result {
  success: GetBalanceResponse;
  e: PointException;
}

export interface getBankBranches_args {
  financialCorpId: string;
  query: string;
  startNum: number;
  count: number;
}

export interface getBankBranches_result {
  success: BankBranchInfo[];
  e: PaymentException;
}

export interface getBanners_args {
  request: BannerRequest;
}

export interface getBanners_result {
  success: BannerResponse;
}

export interface getBirthdayEffect_args {
  req: Eh_C8933a;
}

export interface getBirthdayEffect_result {
  success: GetBirthdayEffectResponse;
  e: any;
}

export interface getBleDevice_args {
  request: GetBleDeviceRequest;
}

export interface getBleDevice_result {
  success: ThingsDevice;
  e: ThingsException;
}

export interface getBleProducts_result {
  success: BleProduct[];
  e: ThingsException;
}

export interface getBlockedContactIds_args {
  syncReason: Pb1_V7;
}

export interface getBlockedContactIds_result {
  success: string[];
  e: TalkException;
}

export interface getBlockedRecommendationIds_args {
  syncReason: Pb1_V7;
}

export interface getBlockedRecommendationIds_result {
  success: string[];
  e: TalkException;
}

export interface getBrowsingHistory_args {
  getBrowsingHistoryRequest: any;
}

export interface getBrowsingHistory_result {
  success: any;
  e: ShopException;
}

export interface getBuddyChatBarV2_args {
  request: GetBuddyChatBarRequest;
}

export interface getBuddyChatBarV2_result {
  success: BuddyChatBar;
  e: TalkException;
}

export interface getBuddyDetailWithPersonal_args {
  buddyMid: string;
  attributeSet: Pb1_D0[];
}

export interface getBuddyDetailWithPersonal_result {
  success: BuddyDetailWithPersonal;
  e: TalkException;
}

export interface getBuddyDetail_args {
  buddyMid: string;
}

export interface getBuddyDetail_result {
  success: BuddyDetail;
  e: TalkException;
}

export interface getBuddyLive_args {
  request: GetBuddyLiveRequest;
}

export interface getBuddyLive_result {
  success: GetBuddyLiveResponse;
  e: TalkException;
}

export interface getBuddyOnAir_args {
  buddyMid: string;
}

export interface getBuddyOnAir_result {
  success: BuddyOnAir;
  e: TalkException;
}

export interface getBuddyStatusBarV2_args {
  request: GetBuddyStatusBarV2Request;
}

export interface getBuddyStatusBarV2_result {
  success: BuddyStatusBar;
  e: TalkException;
}

export interface getCallStatus_args {
  request: GetCallStatusRequest;
}

export interface getCallStatus_result {
  success: GetCallStatusResponse;
  e: OaChatException;
}

export interface getCampaign_args {
  request: GetCampaignRequest;
}

export interface getCampaign_result {
  success: GetCampaignResponse;
  e: WalletException;
}

export interface getChallengeForPaakAuth_args {
  request: GetChallengeForPaakAuthRequest;
}

export interface getChallengeForPaakAuth_result {
  success: GetChallengeForPaakAuthResponse;
  e: SecondaryPwlessLoginException;
}

export interface getChallengeForPrimaryReg_args {
  request: GetChallengeForPrimaryRegRequest;
}

export interface getChallengeForPrimaryReg_result {
  success: GetChallengeForPrimaryRegResponse;
  e: PwlessCredentialException;
}

export interface getChannelContext_args {
  request: GetChannelContextRequest;
}

export interface getChannelContext_result {
  success: GetChannelContextResponse;
  cpae: ChannelPaakAuthnException;
  tae: TokenAuthException;
}

export interface getChannelInfo_args {
  channelId: string;
  locale: string;
}

export interface getChannelInfo_result {
  success: ChannelInfo;
  e: ChannelException;
}

export interface getChannelNotificationSettings_args {
  locale: string;
}

export interface getChannelNotificationSettings_result {
  success: ChannelNotificationSetting[];
  e: ChannelException;
}

export interface getChannelSettings_result {
  success: ChannelSettings;
  e: ChannelException;
}

export interface getChatEffectMetaList_args {
  categories: Pb1_Q2[];
}

export interface getChatEffectMetaList_result {
  success: ChatEffectMeta[];
  e: TalkException;
}

export interface getChatRoomAnnouncementsBulk_args {
  chatRoomMids: string[];
  syncReason: Pb1_V7;
}

export interface getChatRoomAnnouncementsBulk_result {
  e: TalkException;
}

export interface getChatRoomAnnouncements_args {
  chatRoomMid: string;
}

export interface getChatRoomAnnouncements_result {
  success: ChatRoomAnnouncement[];
  e: TalkException;
}

export interface getChatRoomBGMs_args {
  chatRoomMids: string[];
  syncReason: Pb1_V7;
}

export interface getChatRoomBGMs_result {
  success: Record<string, ChatRoomBGM>;
  e: TalkException;
}

export interface getChatapp_args {
  request: GetChatappRequest;
}

export interface getChatapp_result {
  success: GetChatappResponse;
  e: ChatappException;
}

export interface getChats_args {
  request: GetChatsRequest;
  syncReason: Pb1_V7;
}

export interface getChats_result {
  success: GetChatsResponse;
  e: TalkException;
}

export interface getCoinProducts_args {
  request: GetCoinProductsRequest;
}

export interface getCoinProducts_result {
  success: GetCoinProductsResponse;
  e: CoinException;
}

export interface getCoinPurchaseHistory_args {
  request: GetCoinHistoryRequest;
}

export interface getCoinPurchaseHistory_result {
  success: GetCoinHistoryResponse;
  e: CoinException;
}

export interface getCoinUseAndRefundHistory_args {
  request: GetCoinHistoryRequest;
}

export interface getCoinUseAndRefundHistory_result {
  success: GetCoinHistoryResponse;
  e: CoinException;
}

export interface getCommonDomains_args {
  lastSynced: Int64;
}

export interface getCommonDomains_result {
  success: ChannelDomains;
  e: ChannelException;
}

export interface getConfigurations_args {
  revision: Int64;
  regionOfUsim: string;
  regionOfTelephone: string;
  regionOfLocale: string;
  carrier: string;
  syncReason: Pb1_V7;
}

export interface getConfigurations_result {
  success: Configurations;
  e: TalkException;
}

export interface getContactCalendarEvents_args {
  request: GetContactCalendarEventsRequest;
}

export interface getContactCalendarEvents_result {
  success: GetContactCalendarEventsResponse;
  re: RejectedException;
  sfe: ServerFailureException;
  te: TalkException;
  ere: ExcessiveRequestItemException;
}

export interface getContact_result {
  success: Contact;
  e: TalkException;
}

export interface getContactsV3_args {
  request: GetContactsV3Request;
}

export interface getContactsV3_result {
  success: GetContactsV3Response;
  be: RejectedException;
  ce: ServerFailureException;
  te: TalkException;
  ere: ExcessiveRequestItemException;
}

export interface getContacts_result {
  success: Contact[];
  e: TalkException;
}

export interface getCountries_args {
  countryGroup: Pb1_EnumC13221w3;
}

export interface getCountries_result {
  success: string[];
  e: TalkException;
}

export interface I80_C26376L {
  request: I80_C26413m;
}

export interface getCountryInfo_args {
  authSessionId: string;
  simCard: SimCard;
}

export interface getCountryInfo_result {
  success: GetCountryInfoResponse;
  e: AuthException;
}

export interface I80_C26377M {
  success: I80_C26414n;
  e: I80_C26390a;
}

export interface getCountryWithRequestIp_result {
  success: string;
  e: TalkException;
}

export interface getDataRetention_args {
  req: fN0_C24473e;
}

export interface getDataRetention_result {
  success: GetPremiumDataRetentionResponse;
  e: PremiumException;
}

export interface getDestinationUrl_args {
  request: DestinationLIFFRequest;
}

export interface getDestinationUrl_result {
  success: DestinationLIFFResponse;
  liffException: LiffException;
}

export interface getDisasterCases_args {
  req: vh_C37633d;
}

export interface getDisasterCases_result {
  success: GetDisasterCasesResponse;
  e: any;
}

export interface getE2EEGroupSharedKey_args {
  keyVersion: number;
  chatMid: string;
  groupKeyId: number;
}

export interface getE2EEGroupSharedKey_result {
  success: Pb1_U3;
  e: TalkException;
}

export interface getE2EEKeyBackupCertificates_args {
  request: Pb1_W4;
}

export interface getE2EEKeyBackupCertificates_result {
  success: GetE2EEKeyBackupCertificatesResponse;
  e: E2EEKeyBackupException;
}

export interface getE2EEKeyBackupInfo_args {
  request: Pb1_Y4;
}

export interface getE2EEKeyBackupInfo_result {
  success: GetE2EEKeyBackupInfoResponse;
  e: E2EEKeyBackupException;
}

export interface getE2EEPublicKey_args {
  mid: string;
  keyVersion: number;
  keyId: number;
}

export interface getE2EEPublicKey_result {
  success: Pb1_C13097n4;
  e: TalkException;
}

export interface getE2EEPublicKeys_result {
  success: Pb1_C13097n4[];
  e: TalkException;
}

export interface getEncryptedIdentityV3_result {
  success: Pb1_C12916a5;
  e: TalkException;
}

export interface getExchangeKey_args {
  request: GetExchangeKeyRequest;
}

export interface getExchangeKey_result {
  success: GetExchangeKeyResponse;
  e: SecondaryPwlessLoginException;
}

export interface getExtendedProfile_args {
  syncReason: Pb1_V7;
}

export interface getExtendedProfile_result {
  success: ExtendedProfile;
  e: TalkException;
}

export interface getFollowBlacklist_args {
  getFollowBlacklistRequest: GetFollowBlacklistRequest;
}

export interface getFollowBlacklist_result {
  success: GetFollowBlacklistResponse;
  e: TalkException;
}

export interface getFollowers_args {
  getFollowersRequest: GetFollowersRequest;
}

export interface getFollowers_result {
  success: GetFollowersResponse;
  e: TalkException;
}

export interface getFollowings_args {
  getFollowingsRequest: GetFollowingsRequest;
}

export interface getFollowings_result {
  success: GetFollowingsResponse;
  e: TalkException;
}

export interface getFontMetas_args {
  request: GetFontMetasRequest;
}

export interface getFontMetas_result {
  success: GetFontMetasResponse;
  e: TalkException;
}

export interface getFriendDetails_args {
  request: GetFriendDetailsRequest;
}

export interface getFriendDetails_result {
  success: GetFriendDetailsResponse;
  re: RejectedException;
  sfe: ServerFailureException;
  te: TalkException;
  ere: ExcessiveRequestItemException;
}

export interface getFriendRequests_args {
  direction: Pb1_F4;
  lastSeenSeqId: Int64;
}

export interface getFriendRequests_result {
  success: FriendRequest[];
  e: TalkException;
}

export interface getGnbBadgeStatus_args {
  request: GetGnbBadgeStatusRequest;
}

export interface getGnbBadgeStatus_result {
  success: GetGnbBadgeStatusResponse;
  e: WalletException;
}

export interface getGroupCallUrlInfo_args {
  request: GetGroupCallUrlInfoRequest;
}

export interface getGroupCallUrlInfo_result {
  success: GetGroupCallUrlInfoResponse;
  e: TalkException;
}

export interface getGroupCallUrls_args {
  request: Pb1_C13042j5;
}

export interface getGroupCallUrls_result {
  success: GetGroupCallUrlsResponse;
  e: TalkException;
}

export interface getGroupCall_args {
  chatMid: string;
}

export interface getGroupCall_result {
  success: GroupCall;
  e: TalkException;
}

export interface getHomeFlexContent_args {
  request: GetHomeFlexContentRequest;
}

export interface getHomeFlexContent_result {
  success: GetHomeFlexContentResponse;
  e: any;
}

export interface getHomeServiceList_args {
  request: Eg_C8928b;
}

export interface getHomeServiceList_result {
  success: GetHomeServiceListResponse;
  e: any;
}

export interface getHomeServices_args {
  request: GetHomeServicesRequest;
}

export interface getHomeServices_result {
  success: GetHomeServicesResponse;
  e: any;
}

export interface getIncentiveStatus_args {
  req: fN0_C24471c;
}

export interface getIncentiveStatus_result {
  success: GetIncentiveStatusResponse;
  e: PremiumException;
}

export interface getInstantNews_args {
  region: string;
  location: Location;
}

export interface getInstantNews_result {
  success: InstantNews[];
  e: TalkException;
}

export interface getJoinedMembershipByBotMid_args {
  request: GetJoinedMembershipByBotMidRequest;
}

export interface getJoinedMembershipByBotMid_result {
  success: MemberInfo;
  e: MembershipException;
}

export interface getJoinedMembership_args {
  request: GetJoinedMembershipRequest;
}

export interface getJoinedMembership_result {
  success: MemberInfo;
  e: MembershipException;
}

export interface getJoinedMemberships_result {
  success: JoinedMemberships;
  e: MembershipException;
}

export interface getKeyBackupCertificatesV2_args {
  request: Pb1_C13070l5;
}

export interface getKeyBackupCertificatesV2_result {
  success: GetKeyBackupCertificatesV2Response;
  e: E2EEKeyBackupException;
}

export interface getLFLSuggestion_args {
  request: any;
}

export interface getLFLSuggestion_result {
  success: GetLFLSuggestionResponse;
  e: LFLPremiumException;
}

export interface getLastE2EEGroupSharedKey_args {
  keyVersion: number;
  chatMid: string;
}

export interface getLastE2EEGroupSharedKey_result {
  success: Pb1_U3;
  e: TalkException;
}

export interface getLastE2EEPublicKeys_args {
  chatMid: string;
}

export interface getLastE2EEPublicKeys_result {
  success: Record<string, Pb1_C13097n4>;
  e: TalkException;
}

export interface getLastOpRevision_result {
  success: Int64;
  e: TalkException;
}

export interface getLiffViewWithoutUserContext_args {
  request: LiffViewWithoutUserContextRequest;
}

export interface getLiffViewWithoutUserContext_result {
  success: LiffViewResponse;
  liffException: LiffException;
  talkException: TalkException;
}

export interface getLineCardIssueForm_args {
  resolutionType: r80_EnumC34372l;
}

export interface getLineCardIssueForm_result {
  success: PaymentLineCardIssueForm;
  e: PaymentException;
}

export interface getLinkedDevices_result {
  success: UserDevice[];
  e: ThingsException;
}

export interface getLoginActorContext_args {
  request: GetLoginActorContextRequest;
}

export interface getLoginActorContext_result {
  success: GetLoginActorContextResponse;
  e: SecondaryQrCodeException;
}

export interface getMappedProfileIds_args {
  request: GetMappedProfileIdsRequest;
}

export interface getMappedProfileIds_result {
  success: GetMappedProfileIdsResponse;
  e: TalkException;
}

export interface I80_C26378N {
  request: I80_C26415o;
}

export interface getMaskedEmail_args {
  authSessionId: string;
  accountIdentifier: AccountIdentifier;
}

export interface getMaskedEmail_result {
  success: GetMaskedEmailResponse;
  e: AuthException;
}

export interface I80_C26379O {
  success: I80_C26416p;
  e: I80_C26390a;
}

export interface getMessageBoxes_args {
  messageBoxListRequest: MessageBoxListRequest;
  syncReason: Pb1_V7;
}

export interface getMessageBoxes_result {
  success: MessageBoxList;
  e: TalkException;
}

export interface getMessageReadRange_args {
  chatIds: string[];
  syncReason: Pb1_V7;
}

export interface getMessageReadRange_result {
  success: TMessageReadRange[];
  e: TalkException;
}

export interface getModuleLayoutV4_args {
  request: GetModuleLayoutV4Request;
}

export interface getModuleLayoutV4_result {
  success: NZ0_D;
  e: WalletException;
}

export interface getModuleWithStatus_args {
  request: NZ0_G;
}

export interface getModuleWithStatus_result {
  success: NZ0_H;
  e: WalletException;
}

export interface getModule_args {
  request: NZ0_E;
}

export interface getModule_result {
  success: NZ0_F;
  e: WalletException;
}

export interface getModulesV2_args {
  request: GetModulesRequestV2;
}

export interface getModulesV2_result {
  success: NZ0_K;
  e: WalletException;
}

export interface getModulesV3_args {
  request: GetModulesRequestV3;
}

export interface getModulesV3_result {
  success: NZ0_K;
  e: WalletException;
}

export interface getModulesV4WithStatus_args {
  request: GetModulesV4WithStatusRequest;
}

export interface getModulesV4WithStatus_result {
  success: NZ0_M;
  e: WalletException;
}

export interface getMusicSubscriptionStatus_args {
  request: any;
}

export interface getMusicSubscriptionStatus_result {
  success: any;
  e: ShopException;
}

export interface getMyAssetInformationV2_args {
  request: GetMyAssetInformationV2Request;
}

export interface getMyAssetInformationV2_result {
  success: GetMyAssetInformationV2Response;
  e: WalletException;
}

export interface getMyChatapps_args {
  request: GetMyChatappsRequest;
}

export interface getMyChatapps_result {
  success: GetMyChatappsResponse;
  e: ChatappException;
}

export interface getMyDashboard_args {
  request: GetMyDashboardRequest;
}

export interface getMyDashboard_result {
  success: GetMyDashboardResponse;
  e: WalletException;
}

export interface getNewlyReleasedBuddyIds_args {
  country: string;
}

export interface getNewlyReleasedBuddyIds_result {
  success: Record<string, Int64>;
  e: TalkException;
}

export interface getNotificationSettings_args {
  request: GetNotificationSettingsRequest;
}

export interface getNotificationSettings_result {
  success: GetNotificationSettingsResponse;
  e: TalkException;
}

export interface getOwnedProductSummaries_args {
  shopId: string;
  offset: number;
  limit: number;
  locale: Locale;
}

export interface getOwnedProductSummaries_result {
  success: any;
  e: ShopException;
}

export interface getPasswordHashingParameter_args {
  request: GetPasswordHashingParametersRequest;
}

export interface getPasswordHashingParameter_result {
  success: GetPasswordHashingParametersResponse;
  pue: PasswordUpdateException;
  tae: TokenAuthException;
}

export interface getPasswordHashingParametersForPwdReg_args {
  request: GetPasswordHashingParametersForPwdRegRequest;
}

export interface I80_C26380P {
  request: I80_C26417q;
}

export interface getPasswordHashingParametersForPwdReg_result {
  success: GetPasswordHashingParametersForPwdRegResponse;
  e: AuthException;
}

export interface I80_C26381Q {
  success: I80_C26418r;
  e: I80_C26390a;
}

export interface getPasswordHashingParametersForPwdVerif_args {
  request: GetPasswordHashingParametersForPwdVerifRequest;
}

export interface I80_C26382S {
  request: I80_C26419s;
}

export interface getPasswordHashingParametersForPwdVerif_result {
  success: GetPasswordHashingParametersForPwdVerifResponse;
  e: AuthException;
}

export interface I80_C26383T {
  success: I80_C26420t;
  e: I80_C26390a;
}

export interface getPaymentUrlByKey_args {
  key: string;
}

export interface getPaymentUrlByKey_result {
  success: string;
  e: PaymentException;
}

export interface getPendingAgreements_result {
  success: PendingAgreementsResponse;
  e: TalkException;
}

export interface getPhoneVerifMethodForRegistration_args {
  request: GetPhoneVerifMethodForRegistrationRequest;
}

export interface getPhoneVerifMethodForRegistration_result {
  success: GetPhoneVerifMethodForRegistrationResponse;
  e: AuthException;
}

export interface getPhoneVerifMethodV2_args {
  request: GetPhoneVerifMethodV2Request;
}

export interface I80_C26384U {
  request: I80_C26421u;
}

export interface getPhoneVerifMethodV2_result {
  success: GetPhoneVerifMethodV2Response;
  e: AuthException;
}

export interface I80_C26385V {
  success: I80_C26422v;
  e: I80_C26390a;
}

export interface getPhotoboothBalance_args {
  request: Pb1_C13126p5;
}

export interface getPhotoboothBalance_result {
  success: GetPhotoboothBalanceResponse;
  e: TalkException;
}

export interface getPredefinedScenarioSets_args {
  request: GetPredefinedScenarioSetsRequest;
}

export interface getPredefinedScenarioSets_result {
  success: GetPredefinedScenarioSetsResponse;
  e: ThingsException;
}

export interface getPrefetchableBanners_args {
  request: BannerRequest;
}

export interface getPrefetchableBanners_result {
  success: BannerResponse;
}

export interface getPremiumStatusForUpgrade_args {
  req: fN0_C24475g;
}

export interface getPremiumStatusForUpgrade_result {
  success: GetPremiumStatusResponse;
  e: PremiumException;
}

export interface getPremiumStatus_args {
  req: fN0_C24476h;
}

export interface getPremiumStatus_result {
  success: GetPremiumStatusResponse;
  e: PremiumException;
}

export interface getPreviousMessagesV2WithRequest_args {
  request: GetPreviousMessagesV2Request;
  syncReason: Pb1_V7;
}

export interface getPreviousMessagesV2WithRequest_result {
  success: Message[];
  e: TalkException;
}

export interface getProductByVersion_args {
  shopId: string;
  productId: string;
  productVersion: Int64;
  locale: Locale;
}

export interface getProductByVersion_result {
  success: any;
  e: ShopException;
}

export interface getProductLatestVersionForUser_args {
  request: any;
}

export interface getProductLatestVersionForUser_result {
  success: any;
  e: ShopException;
}

export interface getProductSummariesInSubscriptionSlots_args {
  req: any;
}

export interface getProductSummariesInSubscriptionSlots_result {
  success: any;
  e: ShopException;
}

export interface getProductV2_args {
  request: any;
}

export interface getProductV2_result {
  success: any;
  e: ShopException;
}

export interface getProductValidationScheme_args {
  shopId: string;
  productId: string;
  productVersion: Int64;
}

export interface getProductValidationScheme_result {
  success: any;
  e: ShopException;
}

export interface getProductsByAuthor_args {
  productListByAuthorRequest: any;
}

export interface getProductsByAuthor_result {
  success: any;
  e: ShopException;
}

export interface getProfile_args {
  request: GetProfileRequest;
}

export interface getProfile_result {
  success: GetProfileResponse;
  e: TalkException;
}

export interface getProfiles_args {
  request: GetProfilesRequest;
}

export interface getProfiles_result {
  success: GetProfilesResponse;
  e: TalkException;
}

export interface getPromotedBuddyContacts_args {
  language: string;
  country: string;
}

export interface getPromotedBuddyContacts_result {
  success: Contact[];
  e: TalkException;
}

export interface getPublishedMemberships_args {
  request: GetPublishedMembershipsRequest;
}

export interface getPublishedMemberships_result {
  success: Membership[];
  e: MembershipException;
}

export interface getPurchaseEnabledStatus_args {
  request: PurchaseEnabledRequest;
}

export interface getPurchaseEnabledStatus_result {
  success: og_I;
  e: MembershipException;
}

export interface getPurchasedProducts_args {
  shopId: string;
  offset: number;
  limit: number;
  locale: Locale;
}

export interface getPurchasedProducts_result {
  success: PurchaseRecordList;
  e: ShopException;
}

export interface getQuickMenu_args {
  request: NZ0_S;
}

export interface getQuickMenu_result {
  success: GetQuickMenuResponse;
  e: WalletException;
}

export interface getRSAKeyInfo_result {
  success: RSAKey;
  e: TalkException;
}

export interface getReceivedPresents_args {
  shopId: string;
  offset: number;
  limit: number;
  locale: Locale;
}

export interface getReceivedPresents_result {
  success: PurchaseRecordList;
  e: ShopException;
}

export interface getRecentFriendRequests_args {
  syncReason: Pb1_V7;
}

export interface getRecentFriendRequests_result {
  success: FriendRequestsInfo;
  e: TalkException;
}

export interface getRecommendationDetails_args {
  request: GetRecommendationDetailsRequest;
}

export interface getRecommendationDetails_result {
  success: GetRecommendationDetailsResponse;
  re: RejectedException;
  sfe: ServerFailureException;
  te: TalkException;
  ere: ExcessiveRequestItemException;
}

export interface getRecommendationIds_args {
  syncReason: Pb1_V7;
}

export interface getRecommendationIds_result {
  success: string[];
  e: TalkException;
}

export interface getRecommendationList_args {
  getRecommendationRequest: any;
}

export interface getRecommendationList_result {
  success: GetSuggestTrialRecommendationResponse;
  e: SuggestTrialException;
}

export interface getRepairElements_args {
  request: GetRepairElementsRequest;
}

export interface getRepairElements_result {
  success: GetRepairElementsResponse;
  e: TalkException;
}

export interface getRequiredAgreements_result {
  success: PaymentRequiredAgreementsInfo;
  e: PaymentException;
}

export interface getResourceFile_args {
  req: any;
}

export interface getResourceFile_result {
  success: any;
  e: ShopException;
}

export interface getResponseStatus_args {
  request: GetResponseStatusRequest;
}

export interface getResponseStatus_result {
  success: GetResponseStatusResponse;
  e: OaChatException;
}

export interface getReturnUrlWithRequestTokenForAutoLogin_args {
  webLoginRequest: WebLoginRequest;
}

export interface getReturnUrlWithRequestTokenForAutoLogin_result {
  success: WebLoginResponse;
  e: ChannelException;
}

export interface getReturnUrlWithRequestTokenForMultiLiffLogin_args {
  request: LiffWebLoginRequest;
}

export interface getReturnUrlWithRequestTokenForMultiLiffLogin_result {
  success: LiffWebLoginResponse;
  liffException: LiffException;
  channelException: LiffChannelException;
  talkException: TalkException;
}

export interface getRingbackTone_result {
  success: RingbackTone;
  e: TalkException;
}

export interface getRingtone_result {
  success: Ringtone;
  e: TalkException;
}

export interface getRoomsV2_args {
  roomIds: string[];
}

export interface getRoomsV2_result {
  success: Room[];
  e: TalkException;
}

export interface getSCC_args {
  request: GetSCCRequest;
}

export interface getSCC_result {
  success: SCC;
  e: MembershipException;
}

export interface I80_C26386W {
  request: I80_C26423w;
}

export interface I80_C26387X {
  success: I80_C26424x;
  e: I80_C26390a;
}

export interface getSeasonalEffects_args {
  req: Eh_C8935c;
}

export interface getSeasonalEffects_result {
  success: GetSeasonalEffectsResponse;
  e: any;
}

export interface getSecondAuthMethod_args {
  authSessionId: string;
}

export interface getSecondAuthMethod_result {
  success: GetSecondAuthMethodResponse;
  e: AuthException;
}

export interface getSentPresents_args {
  shopId: string;
  offset: number;
  limit: number;
  locale: Locale;
}

export interface getSentPresents_result {
  success: PurchaseRecordList;
  e: ShopException;
}

export interface getServerTime_result {
  success: Int64;
  e: TalkException;
}

export interface getServiceShortcutMenu_args {
  request: NZ0_U;
}

export interface getServiceShortcutMenu_result {
  success: GetServiceShortcutMenuResponse;
  e: WalletException;
}

export interface getSessionContentBeforeMigCompletion_args {
  authSessionId: string;
}

export interface getSessionContentBeforeMigCompletion_result {
  success: GetSessionContentBeforeMigCompletionResponse;
  e: AuthException;
}

export interface getSettingsAttributes2_args {
  attributesToRetrieve: SettingsAttributeEx[];
}

export interface getSettingsAttributes2_result {
  success: Settings;
  e: TalkException;
}

export interface getSettingsAttributes_result {
  success: Settings;
  e: TalkException;
}

export interface getSettings_args {
  syncReason: Pb1_V7;
}

export interface getSettings_result {
  success: Settings;
  e: TalkException;
}

export interface getSmartChannelRecommendations_args {
  request: GetSmartChannelRecommendationsRequest;
}

export interface getSmartChannelRecommendations_result {
  success: GetSmartChannelRecommendationsResponse;
  e: WalletException;
}

export interface getSquareBot_args {
  req: GetSquareBotRequest;
}

export interface getSquareBot_result {
  success: GetSquareBotResponse;
  e: BotException;
}

export interface getStudentInformation_args {
  req: Ob1_C12606a0;
}

export interface getStudentInformation_result {
  success: GetStudentInformationResponse;
  e: ShopException;
}

export interface getSubscriptionPlans_args {
  req: GetSubscriptionPlansRequest;
}

export interface getSubscriptionPlans_result {
  success: GetSubscriptionPlansResponse;
  e: ShopException;
}

export interface getSubscriptionSlotHistory_args {
  req: Ob1_C12618e0;
}

export interface getSubscriptionSlotHistory_result {
  success: Ob1_C12621f0;
  e: ShopException;
}

export interface getSubscriptionStatus_args {
  req: GetSubscriptionStatusRequest;
}

export interface getSubscriptionStatus_result {
  success: GetSubscriptionStatusResponse;
  e: ShopException;
}

export interface getSuggestDictionarySetting_args {
  req: Ob1_C12630i0;
}

export interface getSuggestDictionarySetting_result {
  success: GetSuggestDictionarySettingResponse;
  e: ShopException;
}

export interface getSuggestResourcesV2_args {
  req: GetSuggestResourcesV2Request;
}

export interface getSuggestResourcesV2_result {
  success: GetSuggestResourcesV2Response;
  e: ShopException;
}

export interface getTaiwanBankBalance_args {
  request: GetTaiwanBankBalanceRequest;
}

export interface getTaiwanBankBalance_result {
  success: GetTaiwanBankBalanceResponse;
  e: WalletException;
}

export interface getTargetProfiles_args {
  request: GetTargetProfilesRequest;
}

export interface getTargetProfiles_result {
  success: GetTargetProfilesResponse;
  re: RejectedException;
  sfe: ServerFailureException;
  te: TalkException;
  ere: ExcessiveRequestItemException;
}

export interface getTargetingPopup_args {
  request: NZ0_C12150a0;
}

export interface getTargetingPopup_result {
  success: GetTargetingPopupResponse;
  e: WalletException;
}

export interface getThaiBankBalance_args {
  request: GetThaiBankBalanceRequest;
}

export interface getThaiBankBalance_result {
  success: GetThaiBankBalanceResponse;
  e: WalletException;
}

export interface getTotalCoinBalance_args {
  request: GetTotalCoinBalanceRequest;
}

export interface getTotalCoinBalance_result {
  success: GetTotalCoinBalanceResponse;
  e: CoinException;
}

export interface getUpdatedChannelIds_args {
  channelIds: ChannelIdWithLastUpdated[];
}

export interface getUpdatedChannelIds_result {
  success: string[];
  e: ChannelException;
}

export interface getUserCollections_args {
  request: GetUserCollectionsRequest;
}

export interface getUserCollections_result {
  success: GetUserCollectionsResponse;
  e: CollectionException;
}

export interface getUserProfile_args {
  authSessionId: string;
  accountIdentifier: AccountIdentifier;
}

export interface getUserProfile_result {
  success: GetUserProfileResponse;
  e: AuthException;
}

export interface getUserVector_args {
  request: GetUserVectorRequest;
}

export interface getUserVector_result {
  success: GetUserVectorResponse;
  e: LFLPremiumException;
}

export interface getUsersMappedByProfile_args {
  request: GetUsersMappedByProfileRequest;
}

export interface getUsersMappedByProfile_result {
  success: GetUsersMappedByProfileResponse;
  e: TalkException;
}

export interface getWebLoginDisallowedUrlForMultiLiffLogin_args {
  request: LiffWebLoginRequest;
}

export interface getWebLoginDisallowedUrlForMultiLiffLogin_result {
  success: LiffWebLoginResponse;
  liffException: LiffException;
  channelException: LiffChannelException;
  talkException: TalkException;
}

export interface getWebLoginDisallowedUrl_args {
  webLoginRequest: WebLoginRequest;
}

export interface getWebLoginDisallowedUrl_result {
  success: WebLoginResponse;
  e: ChannelException;
}

export interface h80_C25643c {

}

export interface h80_t {
  newDevicePublicKey: string;
  encryptedQrIdentifier: string;
}

export interface h80_v {

}

export interface I80_A0 {

}

export interface I80_C26398e {

}

export interface I80_C26404h {

}

export interface I80_F0 {

}

export interface I80_r0 {

}

export interface I80_v0 {

}

export interface inviteFriends_args {
  request: InviteFriendsRequest;
}

export interface inviteFriends_result {
  success: InviteFriendsResponse;
  e: PremiumException;
}

export interface inviteIntoChat_args {
  request: InviteIntoChatRequest;
}

export interface inviteIntoChat_result {
  success: Pb1_J5;
  e: TalkException;
}

export interface inviteIntoGroupCall_args {
  chatMid: string;
  memberMids: string[];
  mediaType: Pb1_EnumC13237x5;
}

export interface inviteIntoGroupCall_result {
  e: TalkException;
}

export interface inviteIntoRoom_args {
  reqSeq: number;
  roomId: string;
  contactIds: string[];
}

export interface inviteIntoRoom_result {
  e: TalkException;
}

export interface isProductForCollections_args {
  request: IsProductForCollectionsRequest;
}

export interface isProductForCollections_result {
  success: IsProductForCollectionsResponse;
  e: CollectionException;
}

export interface isStickerAvailableForCombinationSticker_args {
  request: IsStickerAvailableForCombinationStickerRequest;
}

export interface isStickerAvailableForCombinationSticker_result {
  success: IsStickerAvailableForCombinationStickerResponse;
  e: ShopException;
}

export interface isUseridAvailable_args {
  searchId: string;
}

export interface isUseridAvailable_result {
  success: boolean;
  e: TalkException;
}

export interface issueChannelToken_args {
  channelId: string;
}

export interface issueChannelToken_result {
  success: ChannelToken;
  e: ChannelException;
}

export interface issueLiffView_args {
  request: LiffViewRequest;
}

export interface issueLiffView_result {
  success: LiffViewResponse;
  liffException: LiffException;
  talkException: TalkException;
}

export interface issueNonce_result {
  success: string;
  e: PaymentException;
}

export interface issueRequestTokenWithAuthScheme_args {
  channelId: string;
  otpId: string;
  authScheme: string[];
  returnUrl: string;
}

export interface issueRequestTokenWithAuthScheme_result {
  success: RequestTokenResponse;
  e: ChannelException;
}

export interface issueSubLiffView_args {
  request: LiffViewRequest;
}

export interface issueSubLiffView_result {
  success: LiffViewResponse;
  liffException: LiffException;
  talkException: TalkException;
}

export interface issueTokenForAccountMigrationSettings_args {
  enforce: boolean;
}

export interface issueTokenForAccountMigrationSettings_result {
  success: SecurityCenterResult;
  e: TalkException;
}

export interface issueToken_args {
  request: IssueBirthdayGiftTokenRequest;
}

export interface issueToken_result {
  success: IssueBirthdayGiftTokenResponse;
  e: any;
}

export interface issueV3TokenForPrimary_args {
  request: IssueV3TokenForPrimaryRequest;
}

export interface issueV3TokenForPrimary_result {
  success: IssueV3TokenForPrimaryResponse;
  e: TalkException;
}

export interface issueWebAuthDetailsForSecondAuth_args {
  authSessionId: string;
}

export interface issueWebAuthDetailsForSecondAuth_result {
  success: IssueWebAuthDetailsForSecondAuthResponse;
  e: AuthException;
}

export interface joinChatByCallUrl_args {
  request: JoinChatByCallUrlRequest;
}

export interface joinChatByCallUrl_result {
  success: JoinChatByCallUrlResponse;
  e: TalkException;
}

export interface jp_naver_line_shop_protocol_thrift_ProductProperty {

}

export interface kf_i {

}

export interface kf_k {

}

export interface kf_m {
  richmenu: RichmenuEvent;
  talkroom: TalkroomEvent;
}

export interface kf_w {
  profileRefererContent: ProfileRefererContent;
}

export interface kickoutFromGroupCall_args {
  kickoutFromGroupCallRequest: KickoutFromGroupCallRequest;
}

export interface kickoutFromGroupCall_result {
  success: Pb1_S5;
  e: TalkException;
}

export interface leaveRoom_args {
  reqSeq: number;
  roomId: string;
}

export interface leaveRoom_result {
  e: TalkException;
}

export interface linkDevice_args {
  request: DeviceLinkRequest;
}

export interface linkDevice_result {
  success: DeviceLinkResponse;
  e: ThingsException;
}

export interface logoutV2_result {
  e: TalkException;
}

export interface lookupAvailableEap_args {
  request: LookupAvailableEapRequest;
}

export interface lookupAvailableEap_result {
  success: LookupAvailableEapResponse;
  e: AuthException;
}

export interface lookupPaidCall_args {
  dialedNumber: string;
  language: string;
  referer: string;
}

export interface lookupPaidCall_result {
  success: PaidCallResponse;
  e: TalkException;
}

export interface m80_l {

}

export interface m80_n {

}

export interface m80_q {

}

export interface m80_s {

}

export interface mapProfileToUsers_args {
  request: MapProfileToUsersRequest;
}

export interface mapProfileToUsers_result {
  success: MapProfileToUsersResponse;
  e: TalkException;
}

export interface migratePrimaryUsingEapAccountWithTokenV3_args {
  authSessionId: string;
}

export interface migratePrimaryUsingEapAccountWithTokenV3_result {
  success: MigratePrimaryWithTokenV3Response;
  e: AuthException;
}

export interface migratePrimaryUsingPhoneWithTokenV3_args {
  authSessionId: string;
}

export interface migratePrimaryUsingPhoneWithTokenV3_result {
  success: MigratePrimaryWithTokenV3Response;
  e: AuthException;
}

export interface migratePrimaryUsingQrCode_args {
  request: MigratePrimaryUsingQrCodeRequest;
}

export interface migratePrimaryUsingQrCode_result {
  success: MigratePrimaryUsingQrCodeResponse;
  e: PrimaryQrCodeMigrationException;
}

export interface n80_C31222b {

}

export interface n80_d {

}

export interface negotiateE2EEPublicKey_args {
  mid: string;
}

export interface negotiateE2EEPublicKey_result {
  success: E2EENegotiationResult;
  e: TalkException;
}

export interface noop_result {
  e: TalkException;
}

export interface notifyBannerShowing_result {
  e: TalkException;
}

export interface notifyBannerTapped_result {
  e: TalkException;
}

export interface notifyBeaconDetected_result {
  e: TalkException;
}

export interface notifyChatAdEntry_args {
  request: NotifyChatAdEntryRequest;
}

export interface notifyChatAdEntry_result {
  success: kf_i;
  e: BotExternalException;
}

export interface notifyDeviceConnection_args {
  request: NotifyDeviceConnectionRequest;
}

export interface notifyDeviceConnection_result {
  success: NotifyDeviceConnectionResponse;
  e: ThingsException;
}

export interface notifyDeviceDisconnection_args {
  request: NotifyDeviceDisconnectionRequest;
}

export interface notifyDeviceDisconnection_result {
  success: do0_C23165x;
  e: ThingsException;
}

export interface notifyInstalled_args {
  udidHash: string;
  applicationTypeWithExtensions: string;
}

export interface notifyInstalled_result {
  e: TalkException;
}

export interface notifyOATalkroomEvents_args {
  request: NotifyOATalkroomEventsRequest;
}

export interface notifyOATalkroomEvents_result {
  success: kf_k;
  e: BotExternalException;
}

export interface notifyProductEvent_args {
  shopId: string;
  productId: string;
  productVersion: Int64;
  productEvent: Int64;
}

export interface notifyProductEvent_result {
  e: ShopException;
}

export interface notifyRegistrationComplete_args {
  udidHash: string;
  applicationTypeWithExtensions: string;
}

export interface notifyRegistrationComplete_result {
  e: TalkException;
}

export interface notifyScenarioExecuted_args {
  request: NotifyScenarioExecutedRequest;
}

export interface notifyScenarioExecuted_result {
  success: do0_C23167z;
  e: ThingsException;
}

export interface notifySleep_result {
  e: TalkException;
}

export interface notifyUpdated_args {
  lastRev: Int64;
  deviceInfo: DeviceInfo;
  udidHash: string;
  oldUdidHash: string;
}

export interface notifyUpdated_result {
  e: TalkException;
}

export interface o80_C32273b {

}

export interface o80_d {

}

export interface o80_m {

}

export interface og_u {

}

export interface openAuthSession_args {
  request: AuthSessionRequest;
}

export interface openAuthSession_result {
  success: string;
  e: TalkException;
}

export interface openProximityMatch_result {
  success: string;
  e: TalkException;
}

export interface openSession_args {
  request: OpenSessionRequest;
}

export interface openSession_result {
  success: string;
  e: AuthException;
}

export interface permitLogin_args {
  request: PermitLoginRequest;
}

export interface permitLogin_result {
  success: PermitLoginResponse;
  sle: SeamlessLoginException;
  tae: TokenAuthException;
}

export interface placePurchaseOrderForFreeProduct_args {
  purchaseOrder: PurchaseOrder;
}

export interface placePurchaseOrderForFreeProduct_result {
  success: PurchaseOrderResponse;
  e: ShopException;
}

export interface placePurchaseOrderWithLineCoin_args {
  purchaseOrder: PurchaseOrder;
}

export interface placePurchaseOrderWithLineCoin_result {
  success: PurchaseOrderResponse;
  e: ShopException;
}

export interface postPopupButtonEvents_args {
  buttonId: string;
  checkboxes: Record<string, boolean>;
}

export interface postPopupButtonEvents_result {
  e: PaymentException;
}

export interface purchaseSubscription_args {
  req: PurchaseSubscriptionRequest;
}

export interface purchaseSubscription_result {
  success: PurchaseSubscriptionResponse;
  e: ShopException;
}

export interface putE2eeKey_args {
  request: PutE2eeKeyRequest;
}

export interface putE2eeKey_result {
  success: o80_m;
  e: SecondaryPwlessLoginException;
}

export interface q80_C33650b {

}

export interface q80_q {

}

export interface q80_s {

}

export interface qm_C34110c {
  inFriends: string;
  notInFriends: string;
  termsAgreed: boolean;
}

export interface qm_C34115h {
  hwid: string;
  secureMessage: string;
  applicationType: ApplicationType;
  applicationVersion: string;
  userSessionId: string;
  actionId: Int64;
  screen: string;
  bannerStartedAt: Int64;
  bannerShownFor: Int64;
}

export interface qm_j {
  hwid: string;
  secureMessage: string;
  applicationType: ApplicationType;
  applicationVersion: string;
  userSessionId: string;
  actionId: Int64;
  screen: string;
  bannerTappedAt: Int64;
  beaconTermAgreed: boolean;
}

export interface qm_l {
  hwid: string;
  secureMessage: string;
  applicationType: ApplicationType;
  applicationVersion: string;
  lang: string;
  region: string;
  modelName: string;
}

export interface qm_o {
  hwid: string;
  secureMessage: string;
  notificationType: qm_EnumC34112e;
  rssi: Rssi;
}

export interface queryBeaconActions_result {
  success: BeaconQueryResponse;
  e: TalkException;
}

export interface r80_C34358N {

}

export interface r80_C34360P {

}

export interface react_args {
  reactRequest: ReactRequest;
}

export interface react_result {
  e: TalkException;
}

export interface refresh_args {
  request: RefreshAccessTokenRequest;
}

export interface refresh_result {
  success: RefreshAccessTokenResponse;
  accessTokenRefreshException: AccessTokenRefreshException;
}

export interface registerBarcodeAsync_args {
  requestToken: string;
  barcodeRequestId: string;
  barcode: string;
  password: RSAEncryptedPassword;
}

export interface registerBarcodeAsync_result {
  e: PaymentException;
}

export interface registerCampaignReward_args {
  request: RegisterCampaignRewardRequest;
}

export interface registerCampaignReward_result {
  success: RegisterCampaignRewardResponse;
  e: WalletException;
}

export interface registerE2EEGroupKey_args {
  keyVersion: number;
  chatMid: string;
  members: string[];
  keyIds: number[];
  encryptedSharedKeys: string[];
}

export interface registerE2EEGroupKey_result {
  success: Pb1_U3;
  e: TalkException;
}

export interface registerE2EEPublicKeyV2_args {
  request: Pb1_W6;
}

export interface registerE2EEPublicKeyV2_result {
  success: RegisterE2EEPublicKeyV2Response;
  e: TalkException;
}

export interface registerE2EEPublicKey_args {
  reqSeq: number;
  publicKey: Pb1_C13097n4;
}

export interface registerE2EEPublicKey_result {
  success: Pb1_C13097n4;
  e: TalkException;
}

export interface registerPrimaryCredential_args {
  request: RegisterPrimaryCredentialRequest;
}

export interface registerPrimaryCredential_result {
  success: R70_t;
  e: PwlessCredentialException;
}

export interface registerPrimaryUsingEapAccount_args {
  authSessionId: string;
}

export interface registerPrimaryUsingEapAccount_result {
  success: RegisterPrimaryWithTokenV3Response;
  e: AuthException;
}

export interface registerPrimaryUsingPhoneWithTokenV3_args {
  authSessionId: string;
}

export interface registerPrimaryUsingPhoneWithTokenV3_result {
  success: RegisterPrimaryWithTokenV3Response;
  e: AuthException;
}

export interface I80_C26367C {
  request: I80_q0;
}

export interface I80_C26368D {
  success: I80_r0;
  e: I80_C26390a;
  tae: TokenAuthException;
}

export interface registerUserid_args {
  reqSeq: number;
  searchId: string;
}

export interface registerUserid_result {
  success: boolean;
  e: TalkException;
}

export interface reissueChatTicket_args {
  request: ReissueChatTicketRequest;
}

export interface reissueChatTicket_result {
  success: ReissueChatTicketResponse;
  e: TalkException;
}

export interface rejectChatInvitation_args {
  request: RejectChatInvitationRequest;
}

export interface rejectChatInvitation_result {
  success: Pb1_C12946c7;
  e: TalkException;
}

export interface removeAllMessages_result {
  e: TalkException;
}

export interface removeChatRoomAnnouncement_args {
  reqSeq: number;
  chatRoomMid: string;
  announcementSeq: Int64;
}

export interface removeChatRoomAnnouncement_result {
  e: TalkException;
}

export interface removeFollower_args {
  removeFollowerRequest: RemoveFollowerRequest;
}

export interface removeFollower_result {
  e: TalkException;
}

export interface removeFriendRequest_args {
  direction: Pb1_F4;
  midOrEMid: string;
}

export interface removeFriendRequest_result {
  e: TalkException;
}

export interface removeFromFollowBlacklist_args {
  removeFromFollowBlacklistRequest: RemoveFromFollowBlacklistRequest;
}

export interface removeFromFollowBlacklist_result {
  e: TalkException;
}

export interface removeIdentifier_args {
  authSessionId: string;
  request: IdentityCredentialRequest;
}

export interface removeIdentifier_result {
  success: IdentityCredentialResponse;
  e: TalkException;
}

export interface removeItemFromCollection_args {
  request: RemoveItemFromCollectionRequest;
}

export interface removeItemFromCollection_result {
  success: Ob1_C12637k1;
  e: CollectionException;
}

export interface removeLinePayAccount_args {
  accountId: string;
}

export interface removeLinePayAccount_result {
  e: PaymentException;
}

export interface removeProductFromSubscriptionSlot_args {
  req: RemoveProductFromSubscriptionSlotRequest;
}

export interface removeProductFromSubscriptionSlot_result {
  success: RemoveProductFromSubscriptionSlotResponse;
  e: ShopException;
}

export interface reportAbuseEx_args {
  request: ReportAbuseExRequest;
}

export interface reportAbuseEx_result {
  success: Pb1_C13114o7;
  e: TalkException;
}

export interface reportDeviceState_args {
  booleanState: Record<number, boolean>;
  stringState: Record<number, string>;
}

export interface reportDeviceState_result {
  e: TalkException;
}

export interface reportLocation_args {
  location: Geolocation;
  trigger: Pb1_EnumC12917a6;
  networkStatus: ClientNetworkStatus;
  measuredAt: Int64;
  clientCurrentTimestamp: Int64;
  debugInfo: LocationDebugInfo;
}

export interface reportLocation_result {
  e: TalkException;
}

export interface reportNetworkStatus_args {
  trigger: Pb1_EnumC12917a6;
  networkStatus: ClientNetworkStatus;
  measuredAt: Int64;
  scanCompletionTimestamp: Int64;
}

export interface reportNetworkStatus_result {
  e: TalkException;
}

export interface reportProfile_args {
  syncOpRevision: Int64;
  profile: Profile;
}

export interface reportProfile_result {
  e: TalkException;
}

export interface reportPushRecvReports_args {
  reqSeq: number;
  pushRecvReports: PushRecvReport[];
}

export interface reportPushRecvReports_result {
  e: TalkException;
}

export interface reportRefreshedAccessToken_args {
  request: ReportRefreshedAccessTokenRequest;
}

export interface reportRefreshedAccessToken_result {
  success: P70_k;
  accessTokenRefreshException: AccessTokenRefreshException;
}

export interface reportSettings_args {
  syncOpRevision: Int64;
  settings: Settings;
}

export interface reportSettings_result {
  e: TalkException;
}

export interface requestCleanupUserProvidedData_args {
  dataTypes: Pb1_od[];
}

export interface requestCleanupUserProvidedData_result {
  e: TalkException;
}

export interface I80_C26388Y {
  request: I80_u0;
}

export interface requestToSendPasswordSetVerificationEmail_args {
  authSessionId: string;
  email: string;
  accountIdentifier: AccountIdentifier;
}

export interface requestToSendPasswordSetVerificationEmail_result {
  success: RequestToSendPasswordSetVerificationEmailResponse;
  e: AuthException;
}

export interface I80_C26389Z {
  success: I80_v0;
  e: I80_C26390a;
}

export interface requestToSendPhonePinCode_args {
  request: ReqToSendPhonePinCodeRequest;
}

export interface I80_C26391a0 {
  request: I80_s0;
}

export interface requestToSendPhonePinCode_result {
  success: ReqToSendPhonePinCodeResponse;
  e: AuthException;
}

export interface I80_C26393b0 {
  success: I80_t0;
  e: I80_C26390a;
}

export interface requestTradeNumber_args {
  requestToken: string;
  requestType: r80_g0;
  amount: string;
  name: string;
}

export interface requestTradeNumber_result {
  success: PaymentTradeInfo;
  e: PaymentException;
}

export interface resendIdentifierConfirmation_args {
  authSessionId: string;
  request: IdentityCredentialRequest;
}

export interface resendIdentifierConfirmation_result {
  success: IdentityCredentialResponse;
  e: TalkException;
}

export interface resendPinCode_args {
  sessionId: string;
}

export interface resendPinCode_result {
  e: TalkException;
}

export interface reserveCoinPurchase_args {
  request: CoinPurchaseReservation;
}

export interface reserveCoinPurchase_result {
  success: PaymentReservationResult;
  e: CoinException;
}

export interface reserveSubscriptionPurchase_args {
  request: ReserveSubscriptionPurchaseRequest;
}

export interface reserveSubscriptionPurchase_result {
  success: ReserveSubscriptionPurchaseResponse;
  e: PremiumException;
}

export interface reserve_args {
  request: ReserveRequest;
}

export interface reserve_result {
  success: ReserveInfo;
  e: MembershipException;
}

export interface respondE2EEKeyExchange_result {
  e: TalkException;
}

export interface respondE2EELoginRequest_result {
  e: TalkException;
}

export interface restoreE2EEKeyBackup_args {
  request: Pb1_C13155r7;
}

export interface restoreE2EEKeyBackup_result {
  success: Pb1_C13169s7;
  e: E2EEKeyBackupException;
}

export interface I80_C26395c0 {
  request: I80_w0;
}

export interface I80_C26397d0 {
  success: I80_x0;
  e: I80_C26390a;
}

export interface I80_C26399e0 {
  request: I80_w0;
}

export interface I80_C26401f0 {
  success: I80_x0;
  e: I80_C26390a;
}

export interface retrieveRequestTokenWithDocomoV2_args {
  request: Pb1_C13183t7;
}

export interface retrieveRequestTokenWithDocomoV2_result {
  success: RetrieveRequestTokenWithDocomoV2Response;
  e: TalkException;
}

export interface retrieveRequestToken_args {
  carrier: CarrierCode;
}

export interface retrieveRequestToken_result {
  success: AgeCheckRequestResult;
  e: TalkException;
}

export interface revokeTokens_args {
  request: RevokeTokensRequest;
}

export interface revokeTokens_result {
  liffException: LiffException;
  talkException: TalkException;
}

export interface saveStudentInformation_args {
  req: SaveStudentInformationRequest;
}

export interface saveStudentInformation_result {
  success: Ob1_C12649o1;
  e: ShopException;
}

export interface sendChatChecked_args {
  seq: number;
  chatMid: string;
  lastMessageId: string;
  sessionId: number;
}

export interface sendChatChecked_result {
  e: TalkException;
}

export interface sendChatRemoved_args {
  seq: number;
  chatMid: string;
  lastMessageId: string;
  sessionId: number;
}

export interface sendChatRemoved_result {
  e: TalkException;
}

export interface sendEncryptedE2EEKey_args {
  request: SendEncryptedE2EEKeyRequest;
}

export interface sendEncryptedE2EEKey_result {
  success: h80_v;
  pqme: PrimaryQrCodeMigrationException;
  tae: TokenAuthException;
}

export interface sendMessage_args {
  seq: number;
  message: Message;
}

export interface sendMessage_result {
  success: Message;
  e: TalkException;
}

export interface sendPostback_args {
  request: SendPostbackRequest;
}

export interface sendPostback_result {
  e: TalkException;
}

export interface setChatHiddenStatus_args {
  setChatHiddenStatusRequest: SetChatHiddenStatusRequest;
}

export interface setChatHiddenStatus_result {
  e: TalkException;
}

export interface setHashedPassword_args {
  request: SetHashedPasswordRequest;
}

export interface I80_C26403g0 {
  request: I80_z0;
}

export interface setHashedPassword_result {
  success: T70_g1;
  e: AuthException;
}

export interface I80_C26405h0 {
  success: I80_A0;
  e: I80_C26390a;
}

export interface setIdentifier_args {
  authSessionId: string;
  request: IdentityCredentialRequest;
}

export interface setIdentifier_result {
  success: IdentityCredentialResponse;
  e: TalkException;
}

export interface setNotificationsEnabled_args {
  reqSeq: number;
  type: MIDType;
  target: string;
  enablement: boolean;
}

export interface setNotificationsEnabled_result {
  e: TalkException;
}

export interface setPassword_args {
  request: SetPasswordRequest;
}

export interface setPassword_result {
  success: U70_t;
  pue: PasswordUpdateException;
  tae: TokenAuthException;
}

export interface shouldShowWelcomeStickerBanner_args {
  request: Ob1_C12660s1;
}

export interface shouldShowWelcomeStickerBanner_result {
  success: ShouldShowWelcomeStickerBannerResponse;
  e: ShopException;
}

export interface startPhotobooth_args {
  request: StartPhotoboothRequest;
}

export interface startPhotobooth_result {
  success: StartPhotoboothResponse;
  e: TalkException;
}

export interface I80_C26407i0 {
  request: I80_C0;
}

export interface I80_C26409j0 {
  success: I80_D0;
  e: I80_C26390a;
}

export interface startUpdateVerification_args {
  region: string;
  carrier: CarrierCode;
  phone: string;
  udidHash: string;
  deviceInfo: DeviceInfo;
  networkCode: string;
  locale: string;
  simInfo: SIMInfo;
}

export interface startUpdateVerification_result {
  success: VerificationSessionData;
  e: TalkException;
}

export interface stopBundleSubscription_args {
  request: StopBundleSubscriptionRequest;
}

export interface stopBundleSubscription_result {
  success: StopBundleSubscriptionResponse;
  e: ShopException;
}

export interface storeShareTargetPickerResult_args {
  request: ShareTargetPickerResultRequest;
}

export interface storeShareTargetPickerResult_result {
  liffException: LiffException;
  talkException: TalkException;
}

export interface storeSubWindowResult_args {
  request: SubWindowResultRequest;
}

export interface storeSubWindowResult_result {
  liffException: LiffException;
  talkException: TalkException;
}

export interface syncContacts_args {
  reqSeq: number;
  localContacts: ContactModification[];
}

export interface syncContacts_result {
  success: Record<string, ContactRegistration>;
  e: TalkException;
}

export interface sync_args {
  request: SyncRequest;
}

export interface sync_result {
  success: Pb1_X7;
  e: TalkException;
}

export interface t80_g {
  response: GetResponse;
  error: SettingsException;
}

export interface t80_l {
  response: SetResponse;
  error: SettingsException;
}

export interface t80_p {
  booleanValue: boolean;
  i64Value: Int64;
  stringValue: string;
  stringListValue: any[];
  i64ListValue: any[];
  rawJsonStringValue: string;
  i8Value: number;
  i16Value: number;
  i32Value: number;
  doubleValue: number;
  i8ListValue: any[];
  i16ListValue: any[];
  i32ListValue: any[];
}

export interface tryFriendRequest_args {
  midOrEMid: string;
  method: Pb1_G4;
  friendRequestParams: string;
}

export interface tryFriendRequest_result {
  e: TalkException;
}

export interface unblockContact_args {
  reqSeq: number;
  id: string;
  reference: string;
}

export interface unblockContact_result {
  e: TalkException;
}

export interface unblockRecommendation_args {
  reqSeq: number;
  targetMid: string;
}

export interface unblockRecommendation_result {
  e: TalkException;
}

export interface unfollow_args {
  unfollowRequest: UnfollowRequest;
}

export interface unfollow_result {
  e: TalkException;
}

export interface unlinkDevice_args {
  request: DeviceUnlinkRequest;
}

export interface unlinkDevice_result {
  success: do0_C23152j;
  e: ThingsException;
}

export interface unregisterUserAndDevice_result {
  success: string;
  e: TalkException;
}

export interface unsendMessage_args {
  seq: number;
  messageId: string;
}

export interface unsendMessage_result {
  e: TalkException;
}

export interface updateAndGetNearby_args {
  latitude: number;
  longitude: number;
  accuracy: GeolocationAccuracy;
  networkStatus: ClientNetworkStatus;
  altitudeMeters: number;
  velocityMetersPerSecond: number;
  bearingDegrees: number;
  measuredAtTimestamp: Int64;
  clientCurrentTimestamp: Int64;
}

export interface updateAndGetNearby_result {
  success: NearbyEntry[];
  e: TalkException;
}

export interface updateChannelNotificationSetting_args {
  setting: ChannelNotificationSetting[];
}

export interface updateChannelNotificationSetting_result {
  e: ChannelException;
}

export interface updateChannelSettings_args {
  channelSettings: ChannelSettings;
}

export interface updateChannelSettings_result {
  success: boolean;
  e: ChannelException;
}

export interface updateChatRoomBGM_args {
  reqSeq: number;
  chatRoomMid: string;
  chatRoomBGMInfo: string;
}

export interface updateChatRoomBGM_result {
  success: ChatRoomBGM;
  e: TalkException;
}

export interface updateChat_args {
  request: UpdateChatRequest;
}

export interface updateChat_result {
  success: Pb1_Zc;
  e: TalkException;
}

export interface updateContactSetting_args {
  reqSeq: number;
  mid: string;
  flag: ContactSetting;
  value: string;
}

export interface updateContactSetting_result {
  e: TalkException;
}

export interface updateExtendedProfileAttribute_args {
  reqSeq: number;
  attr: any;
  extendedProfile: ExtendedProfile;
}

export interface updateExtendedProfileAttribute_result {
  e: TalkException;
}

export interface updateGroupCallUrl_args {
  request: UpdateGroupCallUrlRequest;
}

export interface updateGroupCallUrl_result {
  success: Pb1_cd;
  e: TalkException;
}

export interface updateIdentifier_args {
  authSessionId: string;
  request: IdentityCredentialRequest;
}

export interface updateIdentifier_result {
  success: IdentityCredentialResponse;
  e: TalkException;
}

export interface updateNotificationToken_args {
  token: string;
  type: NotificationType;
}

export interface updateNotificationToken_result {
  e: TalkException;
}

export interface updatePassword_args {
  request: UpdatePasswordRequest;
}

export interface updatePassword_result {
  success: U70_v;
  pue: PasswordUpdateException;
  tae: TokenAuthException;
}

export interface updateProfileAttribute_result {
  e: TalkException;
}

export interface updateProfileAttributes_args {
  reqSeq: number;
  request: UpdateProfileAttributesRequest;
}

export interface updateProfileAttributes_result {
  e: TalkException;
}

export interface updateSafetyStatus_args {
  req: UpdateSafetyStatusRequest;
}

export interface updateSafetyStatus_result {
  e: any;
}

export interface updateSettingsAttribute_result {
  e: TalkException;
}

export interface updateSettingsAttributes2_args {
  reqSeq: number;
  settings: Settings;
  attributesToUpdate: SettingsAttributeEx[];
}

export interface updateSettingsAttributes2_result {
  success: number[];
  e: TalkException;
}

export interface updateUserGeneralSettings_args {
  settings: Record<number, string>;
}

export interface updateUserGeneralSettings_result {
  e: PaymentException;
}

export interface usePhotoboothTicket_args {
  request: UsePhotoboothTicketRequest;
}

export interface usePhotoboothTicket_result {
  success: UsePhotoboothTicketResponse;
  e: TalkException;
}

export interface validateEligibleFriends_args {
  friends: string[];
  type: r80_EnumC34376p;
}

export interface validateEligibleFriends_result {
  success: PaymentEligibleFriendStatus[];
  e: PaymentException;
}

export interface validateProduct_args {
  shopId: string;
  productId: string;
  productVersion: Int64;
  validationReq: any;
}

export interface validateProduct_result {
  success: any;
  e: ShopException;
}

export interface validateProfile_args {
  authSessionId: string;
  displayName: string;
}

export interface validateProfile_result {
  success: T70_o1;
  e: AuthException;
}

export interface verifyAccountUsingHashedPwd_args {
  request: VerifyAccountUsingHashedPwdRequest;
}

export interface I80_C26411k0 {
  request: I80_E0;
}

export interface verifyAccountUsingHashedPwd_result {
  success: VerifyAccountUsingHashedPwdResponse;
  e: AuthException;
}

export interface I80_l0 {
  success: I80_F0;
  e: I80_C26390a;
}

export interface verifyAssertion_args {
  request: VerifyAssertionRequest;
}

export interface verifyAssertion_result {
  success: m80_q;
  deviceAttestationException: m80_b;
}

export interface verifyAttestation_args {
  request: VerifyAttestationRequest;
}

export interface verifyAttestation_result {
  success: m80_s;
  deviceAttestationException: m80_b;
}

export interface verifyBirthdayGiftAssociationToken_args {
  req: BirthdayGiftAssociationVerifyRequest;
}

export interface verifyBirthdayGiftAssociationToken_result {
  success: BirthdayGiftAssociationVerifyResponse;
  e: ShopException;
}

export interface verifyEapAccountForRegistration_args {
  authSessionId: string;
  device: Device;
  socialLogin: SocialLogin;
}

export interface verifyEapAccountForRegistration_result {
  success: T70_s1;
  e: AuthException;
}

export interface verifyEapLogin_args {
  request: VerifyEapLoginRequest;
}

export interface I80_m0 {
  request: I80_G0;
}

export interface verifyEapLogin_result {
  success: VerifyEapLoginResponse;
  e: AccountEapConnectException;
}

export interface I80_n0 {
  success: I80_H0;
  e: I80_C26390a;
}

export interface verifyPhoneNumber_args {
  sessionId: string;
  pinCode: string;
  udidHash: string;
  migrationPincodeSessionId: string;
  oldUdidHash: string;
}

export interface verifyPhoneNumber_result {
  success: PhoneVerificationResult;
  e: TalkException;
}

export interface verifyPhonePinCode_args {
  request: VerifyPhonePinCodeRequest;
}

export interface I80_o0 {
  request: I80_I0;
}

export interface verifyPhonePinCode_result {
  success: VerifyPhonePinCodeResponse;
  e: AuthException;
}

export interface I80_p0 {
  success: I80_J0;
  e: I80_C26390a;
}

export interface verifyPinCode_args {
  request: VerifyPinCodeRequest;
}

export interface verifyPinCode_result {
  success: q80_q;
  e: SecondaryQrCodeException;
}

export interface verifyQrCode_args {
  request: VerifyQrCodeRequest;
}

export interface verifyQrCode_result {
  success: q80_s;
  e: SecondaryQrCodeException;
}

export interface verifyQrcodeWithE2EE_result {
  success: string;
  e: TalkException;
}

export interface verifyQrcode_args {
  verifier: string;
  pinCode: string;
}

export interface verifyQrcode_result {
  success: string;
  e: TalkException;
}

export interface verifySocialLogin_args {
  authSessionId: string;
  device: Device;
  socialLogin: SocialLogin;
}

export interface verifySocialLogin_result {
  success: VerifySocialLoginResponse;
  e: AuthException;
}

export interface vh_C37633d {

}

export interface wakeUpLongPolling_args {
  clientRevision: Int64;
}

export interface wakeUpLongPolling_result {
  success: boolean;
  e: TalkException;
}

export interface zR0_C40576a {

}

export interface zR0_C40580e {
  sticker: Sticker;
}
